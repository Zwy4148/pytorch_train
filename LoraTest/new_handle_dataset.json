{
    "coder_file_name": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    ],
    "prerequisite": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    ],
    "pre_code": [
        "import url",
        "impor",
        "contents = urllib.request.urlopen(\"ht",
        "parsed = json.",
        "formatted = json.dum",
        "with open(\".polygon/r",
        "    f.write",
        "impo",
        "impor",
        "sys.path.insert(0, os.",
        "print(\"docs pat",
        "os.environ[\"POLYGON_API_",
        "",
        "project = \"poly",
        "copyright = \"20",
        "author = \"",
        "",
        "release ",
        "",
        "",
        "",
        "",
        "extensi",
        "    \"sphinx.",
        "    \"sphinx_aut",
        "    \"sphinx",
        "",
        "",
        "templates_path ",
        "",
        "",
        "",
        "exclude_pa",
        "",
        "",
        "",
        "",
        "html_theme = \"s",
        "",
        "",
        "",
        "html_static_pat",
        "from polygon im",
        "from polygon.rest.models.reque",
        "def get_list_tra",
        "    client =",
        "  ",
        "    options = RequestOpti",
        "        edge_id=\"EDGE_ID\", edge_ip_addres",
        "  ",
        "    tra",
        "    for t in client.list_trades(\"AAA\", ",
        "        trad",
        "    prin",
        "def m",
        "    get_list_tr",
        "if __name__ =",
        "    m",
        "import ",
        "import concu",
        "import ",
        "from polygon im",
        "import",
        "impor",
        "import",
        "import lz",
        "",
        "",
        "logging.basicConfig(level=logging.INF",
        "def signal_hand",
        "    print(\"You p",
        "    sys",
        "signal.signal(signal.S",
        "def get_aggs_for_symbol_a",
        "  ",
        "    symbol, date ",
        "    ag",
        "    client = RESTC",
        "    for a in cl",
        "       ",
        "     ",
        "        ",
        "      ",
        "      ",
        "        li",
        "   ",
        "        agg",
        "    print(",
        "    filename = f\"{symbol",
        "    with open(filen",
        "      ",
        "            compressed_data = lz4.",
        "            file.wr",
        "        except ",
        "            print(f\"Ser",
        "    logging.info(f\"Downloaded aggs ",
        "def weekdays_between(",
        "  ",
        "    day = ",
        "    while day",
        "        if day.",
        "          ",
        "        day += datet",
        "def m",
        "    start_date = date",
        "    end_date = datet",
        "    symbols = [\"TSLA\", ",
        "    dates = list(weekdays_be",
        "  ",
        "    symbol_date_pairs = [(symbol, date) ",
        "  ",
        "    with concurrent.futures.ThreadPoo",
        "        executor.map(get_aggs_for_",
        "if __name__ =",
        "    m",
        "import lz",
        "import",
        "import ",
        "",
        "def read_trades_for",
        "  ",
        "  ",
        "    filename = f\"{symbol",
        "    ",
        "        with open(fil",
        "            compress",
        "            trades = pickle.loads(lz",
        "            ",
        "            ",
        "    except Fil",
        "        print(f\"No fi",
        "    except Ex",
        "        print(f\"An e",
        "def m",
        "    start_date = date",
        "    end_date = datet",
        "    symbo",
        "  ",
        "    day = ",
        "    while day",
        "        if day.",
        "            read_trade",
        "        day += datet",
        "if __name__ =",
        "    m",
        "from polygon im",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "aggs",
        "for a in clie",
        "    \"X:",
        "   ",
        "    \"",
        "    \"202",
        "    \"202",
        "    limi",
        ")",
        "    aggs.",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "conditi",
        "for c in client.list_condit",
        "    conditio",
        "print(co",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "",
        "request = client.get_",
        "    \"X:",
        "    \"202",
        "",
        "print(r",
        "from polygon im",
        "from polygon.res",
        "    Ex",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "exchanges = client.ge",
        "print(ex",
        "",
        "for exchange ",
        "  ",
        "    if isinstance(e",
        "    ",
        "       ",
        "            \"{:<1",
        "                exchange.asset_class,",
        "      ",
        "    ",
        "from polygon im",
        "import",
        "",
        "",
        "",
        "",
        "client = RE",
        "grouped = client.get",
        "    \"2023-01-09\", locale=\"g",
        "",
        "",
        "",
        "",
        "pp = pprint.Prett",
        "pp.pprint",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "trade = client.get_last_c",
        "print(",
        "from polygon im",
        "from polygon.res",
        "    Marke",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "holidays = client.g",
        "",
        "",
        "for holiday ",
        "  ",
        "    if isinstance(hol",
        "        print(\"{:<15}{:<15} ({})\".format(ho",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "result = client.g",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "aggs = client.get_",
        "    \"X:",
        "",
        "print",
        "from polygon im",
        "from polygon.res",
        "    Ticke",
        "    ",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "snapshot = client.get_s",
        "",
        "print(s",
        "",
        "for item i",
        "  ",
        "    if isinstance(it",
        "    ",
        "        if isinstance",
        "      ",
        "            if isinstance(item.pre",
        "                item.",
        "       ",
        "                p",
        "                    (item.prev_",
        "                    ",
        "            ",
        "        ",
        "           ",
        "                    \"{:<15}{",
        "                  ",
        "                     ",
        "                      ",
        "                   ",
        "          ",
        "        ",
        "from polygon im",
        "from polygon.res",
        "    Ticke",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "",
        "gainers = client.get_snapshot_",
        "",
        "",
        "for gainer ",
        "  ",
        "    if isinstance(gai",
        "    ",
        "        if isinstance(gainer.",
        "            print(\"{:<15}{:.2f} %\".format(g",
        "pri",
        "",
        "losers = client.get_snapshot_",
        "",
        "",
        "for loser ",
        "  ",
        "    if isinstance(lo",
        "    ",
        "        if isinstance(loser.t",
        "            print(\"{:<15}{:.2f} %\".format(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "ticker = client.get_snapshot",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "snapshot = client.get_snaps",
        "",
        "print(s",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "ema = clie",
        "    ticker=",
        "    times",
        "    win",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "macd = clie",
        "    ticker=",
        "    times",
        "    short_",
        "    long_",
        "    signal",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "rsi = clie",
        "    ticker=",
        "    times",
        "    win",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "sma = clie",
        "    ticker=",
        "    times",
        "    win",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "ticker",
        "for t in client.list_tickers(",
        "    ticker",
        "print(t",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "trade",
        "for t in client.list_trades(\"X:BTC",
        "    trades",
        "",
        "print(",
        "from polygon im",
        "",
        "import",
        "client = RESTClient",
        "aggs = client.get_aggs(\"AAPL\", 1, ",
        "print",
        "import pan",
        "import num",
        "import seab",
        "import matplotli",
        "from polygon im",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "symbols = [\"INTC\", \"AMD\", \"NVDA\", \"TXN\", \"",
        "",
        "start_date =",
        "end_date = ",
        "def fetch_stock_data(symbo",
        "    sto",
        "  ",
        "    client = ",
        "    ",
        "        for sym",
        "            aggs ",
        "           ",
        "         ",
        "           ",
        "             ",
        "            ",
        "      ",
        "            df = pd.DataFrame(agg",
        "      ",
        "            df = df[",
        "            df[\"timestamp\"] = pd.to_",
        "            df.set_index(",
        "            df.rename(columns={",
        "            st",
        "    fi",
        "      ",
        "    merged_stocks = pd",
        "    return m",
        "def calculate_daily_",
        "    daily_returns = stock_",
        "    return d",
        "def compute_correlation",
        "    correlation_matrix",
        "    return cor",
        "def plot_correlation_hea",
        "    plt.figure(",
        "    ax = s",
        "        corre",
        "        a",
        "        cmap",
        "        ",
        "       ",
        "        sq",
        "        lin",
        "        cbar_kws",
        "  ",
        "    ax.xaxi",
        "    ax.xaxis.set_la",
        "    plt.title(\"Correlatio",
        "    plt",
        "def m",
        "    stock_data = fetch_stock_dat",
        "    daily_returns = calcula",
        "    correlation_matrix = compute_",
        "    print(\"Corre",
        "    print(corr",
        "    plot_correlation_hea",
        "if __name__ =",
        "    m",
        "from polygon im",
        "client = R",
        "financials = client.get",
        "print(fi",
        "for i, n in enumerate(client.lis",
        "    pri",
        "    if ",
        "      ",
        "from polygon im",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "aggs",
        "for a in clie",
        "    \"C:",
        "   ",
        "    \"",
        "    \"202",
        "    \"202",
        "    limi",
        ")",
        "    aggs.",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "conditi",
        "for c in client.list_cond",
        "    conditio",
        "print(co",
        "from polygon im",
        "from polygon.res",
        "    Ex",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "exchanges = client.",
        "print(ex",
        "",
        "for exchange ",
        "  ",
        "    if isinstance(e",
        "    ",
        "       ",
        "            \"{:<1",
        "                exchange.asset_class,",
        "      ",
        "    ",
        "from polygon im",
        "import",
        "",
        "",
        "",
        "",
        "client = RE",
        "grouped = client.get",
        "    \"202",
        "    locale",
        "    market",
        "",
        "",
        "",
        "",
        "pp = pprint.Prett",
        "pp.pprint",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "quote = client.get",
        "    \"",
        "    \"",
        "",
        "print(",
        "from polygon im",
        "from polygon.res",
        "    Marke",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "holidays = client.g",
        "",
        "",
        "for holiday ",
        "  ",
        "    if isinstance(hol",
        "        print(\"{:<15}{:<15} ({})\".format(ho",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "result = client.g",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "aggs = client.get_",
        "    \"C:",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "quote",
        "for t in client.list_quotes(\"C:EUR",
        "    quotes",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "rate = client.get_real_t",
        "    \"",
        "    \"",
        "",
        "print",
        "from polygon im",
        "from polygon.res",
        "    Ticke",
        "    ",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "snapshot = client.get_",
        "",
        "print(s",
        "",
        "for item i",
        "  ",
        "    if isinstance(it",
        "    ",
        "        if isinstance",
        "      ",
        "            if isinstance(item.pre",
        "                item.",
        "       ",
        "                p",
        "                    (item.prev_",
        "                    ",
        "            ",
        "        ",
        "           ",
        "                    \"{:<15}{",
        "                  ",
        "                     ",
        "                      ",
        "                   ",
        "          ",
        "        ",
        "from polygon im",
        "from polygon.res",
        "    Ticke",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "",
        "gainers = client.get_snapshot",
        "",
        "",
        "for gainer ",
        "  ",
        "    if isinstance(gai",
        "    ",
        "        if isinstance(gainer.",
        "            print(\"{:<15}{:.2f} %\".format(g",
        "pri",
        "",
        "losers = client.get_snapshot",
        "",
        "",
        "for loser ",
        "  ",
        "    if isinstance(lo",
        "    ",
        "        if isinstance(loser.t",
        "            print(\"{:<15}{:.2f} %\".format(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "ticker = client.get_snapshot",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "ema = clie",
        "    ticker=",
        "    times",
        "    win",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "macd = clie",
        "    ticker=",
        "    times",
        "    short_",
        "    long_",
        "    signal",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "rsi = clie",
        "    ticker=",
        "    times",
        "    win",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "sma = clie",
        "    ticker=",
        "    times",
        "    win",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "ticker",
        "for t in client.list_ticker",
        "    ticker",
        "print(t",
        "from polygon im",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "aggs",
        "for a in clie",
        "    \"I",
        "   ",
        "    \"",
        "    \"202",
        "    \"202",
        "    limi",
        ")",
        "    aggs.",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "",
        "request = client.get_",
        "    \"I",
        "    \"202",
        "",
        "print(r",
        "from polygon im",
        "from polygon.res",
        "    Marke",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "holidays = client.g",
        "",
        "",
        "for holiday ",
        "  ",
        "    if isinstance(hol",
        "        print(\"{:<15}{:<15} ({})\".format(ho",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "result = client.g",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "aggs = client.get_",
        "    \"I",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "tickers = [\"I:SPX\"",
        "snapshot = client.get_s",
        "",
        "print(s",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "ema = clie",
        "    ticke",
        "    times",
        "    win",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "macd = clie",
        "    ticke",
        "    times",
        "    short_",
        "    long_",
        "    signal",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "rsi = clie",
        "    ticke",
        "    times",
        "    win",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "sma = clie",
        "    ticke",
        "    times",
        "    win",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "ticker",
        "for t in client.list_tickers(",
        "    ticker",
        "print(t",
        "from typing import O",
        "from urllib3 imp",
        "from polygon im",
        "from polygon.res",
        "    Tick",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "types: Optional[Union[List[Tick",
        "tr",
        "    types = client.get_",
        "except Type",
        "    if \"not None",
        "        print",
        "        ty",
        "    ",
        "      ",
        "if types i",
        "    prin",
        "from polygon im",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "aggs",
        "for a in clie",
        "    \"O:SPY251",
        "   ",
        "    \"",
        "    \"202",
        "    \"202",
        "    limi",
        ")",
        "    aggs.",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "conditi",
        "for c in client.list_condit",
        "    conditio",
        "print(co",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "contract = client.get_options_c",
        "",
        "print(c",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "contrac",
        "for c in client.list_op",
        "    contrac",
        "print(co",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "",
        "request = client.get_",
        "    \"O:SPY251",
        "    \"202",
        "",
        "print(r",
        "from polygon im",
        "from polygon.res",
        "    Ex",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "exchanges = client.ge",
        "print(ex",
        "",
        "for exchange ",
        "  ",
        "    if isinstance(e",
        "    ",
        "       ",
        "            \"{:<1",
        "                exchange.asset_class,",
        "      ",
        "    ",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "trade = client.",
        "    \"O:TSLA210",
        "",
        "print(",
        "from polygon im",
        "from polygon.res",
        "    Marke",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "holidays = client.g",
        "",
        "",
        "for holiday ",
        "  ",
        "    if isinstance(hol",
        "        print(\"{:<15}{:<15} ({})\".format(ho",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "result = client.g",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "aggs = client.get_",
        "    \"O:SPY251",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "quote",
        "for t in client.list_quotes(\"O:S",
        "    quotes",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "options_c",
        "for o in client.list_s",
        "    \"",
        "    pa",
        "        \"expiration_da",
        "        \"strike",
        "   ",
        ")",
        "    options_c",
        "print(opti",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "snapshot = client.get_snapshot_opti",
        "",
        "print(s",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "ema = clie",
        "    ticker=\"O:SPY241220P00720000\", times",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "macd = clie",
        "    ticker=\"O:SPY",
        "    times",
        "    short_",
        "    long_",
        "    signal",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "rsi = clie",
        "    ticker=\"O:SPY241220P00720000\", times",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "sma = clie",
        "    ticker=\"O:SPY241220P00720000\", times",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "ticker",
        "for t in client.list",
        "    ticker",
        "print(t",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "details = client.get_",
        "print(d",
        "from polygon im",
        "from polygon.res",
        "    Tic",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "news",
        "for n in client.list_ticker_news(",
        "    news.",
        "",
        "for index, item i",
        "  ",
        "    if isinstance(",
        "        print(\"{:<25}{:<15}\".forma",
        "        if ",
        "        ",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "trade",
        "for t in client.list_trades(\"O:TS",
        "    trades",
        "",
        "print(",
        "from polygon im",
        "from typing",
        "from urllib3 imp",
        "client = R",
        "aggs =",
        "    HTTP",
        "    client",
        "       ",
        "     ",
        "       ",
        "        \"2",
        "        \"2",
        "        ",
        "   ",
        "",
        "print(aggs",
        "",
        "print(agg",
        "",
        "print(ag",
        "from polygon im",
        "from typing",
        "from urllib3 imp",
        "client = R",
        "trades ",
        "    HTTP",
        "    client.list_trades(\"AAA",
        "",
        "print(tra",
        "from polygon im",
        "from polygon.re",
        "client = R",
        "aggs = clie",
        "    \"",
        "   ",
        "    \"",
        "    \"202",
        "    \"202",
        "",
        "print",
        "from polygon im",
        "client = R",
        "trade",
        "for t in client.list_trades(\"",
        "    trades",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "aggs",
        "for a in clie",
        "    \"",
        "   ",
        "    \"m",
        "    \"202",
        "    \"202",
        "    limi",
        ")",
        "    aggs.",
        "print",
        "from polygon im",
        "from polygon.res",
        "    ",
        "",
        "impor",
        "import ",
        "impo",
        "",
        "",
        "",
        "",
        "client = RE",
        "aggs",
        "for a in clie",
        "    \"",
        "   ",
        "    \"",
        "    \"202",
        "    \"202",
        "    limi",
        ")",
        "    aggs.",
        "print",
        "",
        "heade",
        "    \"tim",
        "    \"",
        "    \"",
        "    \"",
        "    \"c",
        "    \"v",
        "    \"",
        "    \"tran",
        "    \"",
        "",
        "",
        "csv_string = ",
        "writer = csv.DictWriter(csv",
        "",
        "writer.wri",
        "",
        "for agg ",
        "  ",
        "    if isinsta",
        "    ",
        "        if isinstance",
        "            wr",
        "        ",
        "                    \"timestamp\": datetime.d",
        "                  ",
        "                  ",
        "                 ",
        "                   ",
        "                    ",
        "                  ",
        "                    \"trans",
        "                 ",
        "        ",
        "      ",
        "",
        "print(csv_stri",
        "from polygon im",
        "from polygon.res",
        "    ",
        "",
        "import ",
        "import ht",
        "import so",
        "import t",
        "impor",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "PORT ",
        "",
        "",
        "htm",
        "client = RE",
        "aggs",
        "for a in clie",
        "    \"",
        "   ",
        "    \"",
        "    \"201",
        "    \"202",
        "    limi",
        ")",
        "    aggs.",
        "",
        "data",
        "",
        "for agg ",
        "  ",
        "    if isinsta",
        "    ",
        "        if isinstance",
        "            n",
        "                \"da",
        "                ",
        "                ",
        "               ",
        "                \"",
        "                \"v",
        "      ",
        "            data.",
        "values = [[v for k, v in ",
        "",
        "",
        "class handler(http.server.",
        "    def do",
        "        if self.",
        "            self.",
        "            self.send_header(\"Co",
        "            sel",
        "            json_data",
        "            self.wfile.w",
        "      ",
        "            self.",
        "            self.send_header",
        "            sel",
        "            self.wfil",
        "",
        "tr",
        "    whi",
        "    ",
        "        with socketserver.TCPServ",
        "            print(\"se",
        "            http",
        "      ",
        "except Keybo",
        "    print(\"\\nExiti",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "conditi",
        "for c in client.list_c",
        "    conditio",
        "print(co",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "",
        "request = client.get_",
        "    \"",
        "    \"202",
        "",
        "print(r",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "dividen",
        "for d in client.list_divi",
        "    dividen",
        "print(di",
        "from polygon im",
        "from polygon.res",
        "    Ex",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "exchanges = clien",
        "print(ex",
        "",
        "for exchange ",
        "  ",
        "    if isinstance(e",
        "    ",
        "       ",
        "            \"{:<1",
        "                exchange.asset_class,",
        "      ",
        "    ",
        "from polygon im",
        "import",
        "",
        "",
        "",
        "",
        "client = RE",
        "grouped = client.get",
        "    \"202",
        "",
        "",
        "",
        "",
        "pp = pprint.Prett",
        "pp.pprint",
        "from polygon im",
        "",
        "",
        "",
        "client = RE",
        "ipos",
        "for ipo in client.vx.li",
        "    ipos.a",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "quote = client.",
        "    \"",
        "",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "trade = client.",
        "    \"",
        "",
        "print(",
        "from polygon im",
        "from polygon.res",
        "    Marke",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "holidays = client.g",
        "",
        "",
        "for holiday ",
        "  ",
        "    if isinstance(hol",
        "        print(\"{:<15}{:<15} ({})\".format(ho",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "result = client.g",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "aggs = client.get_",
        "    \"",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "quote",
        "for t in client.list_quotes(\"IB",
        "    quotes",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "client = RE",
        "related_companies = client.g",
        "print(relate",
        "from polygon im",
        "from polygon.res",
        "    Ticke",
        "    ",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "",
        "tickers = [\"TSLA\", \"A",
        "",
        "snapshot = client.get_snap",
        "",
        "print(s",
        "",
        "for item i",
        "  ",
        "    if isinstance(it",
        "    ",
        "        if isinstance",
        "      ",
        "            if isinstance(item.pre",
        "                item.",
        "       ",
        "                p",
        "                    (item.prev_",
        "                    ",
        "            ",
        "        ",
        "           ",
        "                    \"{:<15}{",
        "                  ",
        "                     ",
        "                      ",
        "                   ",
        "          ",
        "        ",
        "from polygon im",
        "from polygon.res",
        "    Ticke",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "",
        "gainers = client.get_snapshot_",
        "",
        "",
        "for gainer ",
        "  ",
        "    if isinstance(gai",
        "    ",
        "        if isinstance(gainer.",
        "            print(\"{:<15}{:.2f} %\".format(g",
        "pri",
        "",
        "losers = client.get_snapshot_",
        "",
        "",
        "for loser ",
        "  ",
        "    if isinstance(lo",
        "    ",
        "        if isinstance(loser.t",
        "            print(\"{:<15}{:.2f} %\".format(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "ticker = client.get_snapsh",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "financi",
        "for f in client.vx.list_stock_financi",
        "    financia",
        "  ",
        "  ",
        "  ",
        "  ",
        "print(fi",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "split",
        "for s in client.list_spl",
        "    splits",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "ema = clie",
        "    ticke",
        "    times",
        "    win",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "macd = clie",
        "    ticke",
        "    times",
        "    short_",
        "    long_",
        "    signal",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "rsi = clie",
        "    ticke",
        "    times",
        "    win",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "sma = clie",
        "    ticke",
        "    times",
        "    win",
        "    series_t",
        "",
        "print",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "ticker",
        "for t in client.list_tickers(market=\"stoc",
        "    ticker",
        "print(t",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "details = client.get_",
        "print(d",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "events = client.get_",
        "print(",
        "from polygon im",
        "from polygon.res",
        "    Tic",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "news",
        "for n in client.list_ticker_news(",
        "    news.",
        "",
        "",
        "for index, item i",
        "  ",
        "    if isinstance(",
        "        print(\"{:<25}{:<15}\".forma",
        "        if ",
        "        ",
        "from polygon im",
        "",
        "",
        "",
        "",
        "client = RE",
        "types = client.g",
        "print(",
        "from polygon im",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "trade",
        "for t in client.list_trades(\"IB",
        "    trades",
        "",
        "print(",
        "from polygon im",
        "from polygon.res",
        "    T",
        "",
        "",
        "",
        "",
        "",
        "client = RE",
        "",
        "money = ",
        "",
        "for t in client.list_trades(\"DI",
        "  ",
        "    if isinsta",
        "    ",
        "        if isinstance(t.price, fl",
        "            money ",
        "",
        "formatted_number = \"{",
        "print(\"Roughly \" + formatted_number + \"",
        "from typing import c",
        "from urllib3 imp",
        "from polygon im",
        "from polygon.rest.models import Un",
        "",
        "",
        "",
        "",
        "client = RE",
        "def print_snapshots(iterator: Union[Iter",
        "    snapshots = [s",
        "    print(f\"count:",
        "    for item ",
        "        p",
        "",
        "it = client.list_u",
        "    ticke",
        "       ",
        "        \"O:AAPL2",
        "        \"DOE",
        "        \"X",
        "        \"",
        "  ",
        "",
        "print_sna",
        "it = client.list_universal_snapshots(type=",
        "print_sna",
        "it = client.list_universal_snapshots(type=\"s",
        "print_sna",
        "it = client.list_u",
        "    type=",
        "    ticker_gte=\"O:A",
        "    ticker_lte=\"O:A",
        "",
        "print_sna",
        "import ",
        "import ",
        "impo",
        "impo",
        "from concurrent.futures ",
        "from typing impor",
        "from polygon import RES",
        "from polygon.websocket.m",
        "class ApiC",
        "    def __i",
        "        self.api_call_",
        "        self.executor =",
        "        self.clien",
        "    async def enqueue_api_",
        "        await self.api_cal",
        "    async def start_pro",
        "        w",
        "            options_ticker = a",
        "        ",
        "        ",
        "        ",
        "        ",
        "                contract = await async",
        "                    self.executor, sel",
        "        ",
        "                ",
        "            excep",
        "                logging.error(f\"Error proc",
        "          ",
        "                self.ap",
        "    def get_options_contr",
        "        return self.client.get_",
        "class Mess",
        "    def __init__(sel",
        "        self.handler_q",
        "        self.api_call_ha",
        "    async def add(self, message_respons",
        "        await self.handler_",
        "    async def start_h",
        "        w",
        "            message_response =",
        "            logging.info(f\"Recei",
        "        ",
        "        ",
        "        ",
        "        ",
        "        ",
        "                for tra",
        "                    ticker = se",
        "                    ",
        "                      ",
        "                            self.api_cal",
        "            ",
        "            excep",
        "                logging.error(",
        "          ",
        "                self.ha",
        "    def extract_symbo",
        "        match = re.search(r",
        "        ",
        "            retu",
        "      ",
        "           ",
        "class M",
        "    def __init__(self, fee",
        "        api_key = os.ge",
        "        self.polygon_websock",
        "            ap",
        "           ",
        "            m",
        "            ",
        "            subscrip",
        "    ",
        "        self.api_call_ha",
        "        self.message_handler = Mes",
        "    async def start",
        "      ",
        "            awai",
        "                self.polygon_websocket_c",
        "                self.messag",
        "                self.api_call_han",
        "      ",
        "        except ",
        "            logging.error(f\"",
        "async de",
        "    logging.basicConf",
        "    my_clien",
        "        feed=Feed.RealTime, market=M",
        "  ",
        "    await my_client.",
        "",
        "asyncio.r",
        "from polygon im",
        "",
        "",
        "",
        "client = RE",
        "aggs",
        "for a in clie",
        "    \"",
        "   ",
        "    \"",
        "    \"202",
        "    \"202",
        "    limi",
        ")",
        "    aggs.",
        "print",
        "import pan",
        "import seab",
        "import matplotli",
        "import num",
        "import",
        "",
        "file_path = \"2",
        "",
        "df = pd.read_",
        "",
        "df[\"participant_timest",
        "    df[\"participant_timest",
        "",
        "",
        "df[\"participant_timestamp\"] = df[\"pa",
        "    \"Americ",
        "",
        "",
        "df[\"time_interval\"] = df[\"participan",
        "",
        "all_intervals = pd.date_range(start=\"",
        "all_exchanges = df[",
        "full_index = pd.Mult",
        "    [all_exchanges, all_intervals],",
        "",
        "",
        "group",
        "    df.groupby([\"excha",
        "    .",
        "    .reindex(full_i",
        "    .reset_index(n",
        "",
        "",
        "pivot_table = grouped.pivot(\"exchange\", ",
        "",
        "log_scale_data = np.lo",
        "",
        "plt.figure(fig",
        "sns.he",
        "    log_s",
        "    anno",
        "    cmap",
        "    linew",
        "    cba",
        "    xticklabels=[t.strftime(\"%",
        "    yticklabels=p",
        "",
        "plt.title(\"Trade Count Heatmap by Excha",
        "plt.ylabel(",
        "plt.xlabel(\"Time",
        "plt.xticks(",
        "plt.tight_",
        "plt.s",
        "import pan",
        "",
        "file_path = \"2",
        "",
        "df = pd.read_",
        "",
        "exchange_counts = df[\"e",
        "",
        "total_trades = exc",
        "",
        "for exchange, count in ",
        "    percentage = (coun",
        "    print(f\"Exchange {exchange}: {count} t",
        "import pan",
        "",
        "file_path = \"2",
        "",
        "df = pd.read_",
        "",
        "trade_counts = df[\"ti",
        "",
        "total_trades = t",
        "",
        "top_10_traded = tr",
        "",
        "for ticker, count in ",
        "    percentage = (coun",
        "    print(f\"{ticker}: {count} trades",
        "import pan",
        "import matplotli",
        "",
        "file_path = \"2",
        "",
        "df = pd.read_",
        "",
        "df[\"participant_timest",
        "    df[\"participant_timest",
        "",
        "",
        "df[\"participant_timestamp\"] = df[\"pa",
        "    \"Americ",
        "",
        "",
        "df[\"time_interval\"] = df[\"partic",
        "",
        "trade_counts_per_interval = df.",
        "",
        "plt.figure(fi",
        "",
        "bars = ",
        "    trade_counts_per_interval.index, tra",
        "",
        "",
        "for bar ",
        "    height = b",
        "    plt.",
        "        f\"{i",
        "        xy=(bar.get_x() + b",
        "        xyte",
        "        textcoord",
        "        ha",
        "        va",
        "  ",
        "plt.title(\"Trade Counts Aggregat",
        "plt.xlabel(\"Time",
        "plt.ylabel(\"Num",
        "plt.xticks(rotati",
        "",
        "plt.gca().set",
        "    [t.strftime(\"%Y-%m-%d %H:%M\") for t in t",
        "",
        "plt.tight",
        "plt.s",
        "impo",
        "import pan",
        "from collections ",
        "import",
        "impor",
        "from typing import Defaul",
        "",
        "data_dir = \"./a",
        "",
        "trades_data = d",
        "",
        "files = sorted([f for f in os.listd",
        "print(\"Starting to",
        "",
        "for file ",
        "    print(f\"Pro",
        "    file_path = os.pat",
        "    df = pd.rea",
        "  ",
        "    for _, row i",
        "        ticker ",
        "        date = pd.to_datetime(row[",
        "        trades = r",
        "        close_pric",
        "        trades_da",
        "            {\"date\": date, \"trades\":",
        "    ",
        "print(\"Finished p",
        "print(\"Building ",
        "",
        "lookup_table: DefaultDict[str,",
        "    ",
        ")",
        "for ticker, records i",
        "  ",
        "    df_ticker = pd",
        "  ",
        "    df_ticker.sort_valu",
        "    df_ticker.set_inde",
        "  ",
        "    df_ticker[\"",
        "        df_ticker[\"close_",
        "   ",
        "  ",
        "    df_ticker[\"trades_shifted\"]",
        "  ",
        "    df_ticker[\"avg_trades\"] = df_ticker[\"",
        "    df_ticker[\"std_trades\"] = df_ticker[",
        "  ",
        "    for date, row in ",
        "    ",
        "        date_str = dat",
        "    ",
        "        if pd.notnull(row[\"avg_trades",
        "            lookup_tabl",
        "                \"tra",
        "                \"close_pr",
        "                \"price_d",
        "                \"avg_tra",
        "                \"std_tra",
        "      ",
        "      ",
        "      ",
        "            lookup_tabl",
        "                \"tra",
        "                \"close_pr",
        "                \"price_d",
        "                \"",
        "                \"",
        "      ",
        "print(\"Lookup table ",
        "",
        "lookup_table_dict = {k: v for",
        "",
        "with open(\"lookup_tab",
        "    pickle.dump(lo",
        "print(\"Lookup table saved",
        "impo",
        "import",
        "impor",
        "from datetime ",
        "from polygon im",
        "from polygon.rest",
        "import ht",
        "import so",
        "import t",
        "from urllib.parse imp",
        "PORT ",
        "",
        "with open(\"lookup_ta",
        "    lookup_table",
        "class handler(http.server.",
        "    def do",
        "    ",
        "        parsed_path ",
        "        path = ",
        "        query_params = pa",
        "        if ",
        "      ",
        "      ",
        "            date_param = query",
        "      ",
        "            al",
        "            for ticker_dat",
        "                all_dates.",
        "            all_date",
        "      ",
        "            if da",
        "              ",
        "                    late",
        "          ",
        "                    s",
        "                    self.send_he",
        "                   ",
        "                  ",
        "                        \"<html><body><h",
        "          ",
        "                    self.wfil",
        "             ",
        "        ",
        "                late",
        "      ",
        "            if latest_",
        "        ",
        "                sel",
        "                self.send_head",
        "                s",
        "                error_html = f\"<html><body><h1>Error: No ",
        "                self.wfile",
        "           ",
        "      ",
        "            a",
        "            for ticker, date_",
        "                if lat",
        "                    data",
        "                    t",
        "                    avg_t",
        "                    std_t",
        "            ",
        "                       ",
        "                        a",
        "                     ",
        "           ",
        "                        z_score = ",
        "                        t",
        "                        if z_",
        "                      ",
        "                ",
        "                          ",
        "                            ",
        "                          ",
        "                              ",
        "                              ",
        "                           ",
        "                                   ",
        "                                  ",
        "                ",
        "              ",
        "      ",
        "            anomalies.sort(key=la",
        "      ",
        "            self.",
        "            self.send_header",
        "            sel",
        "      ",
        "            html_content = '<html><link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\"><script src=\"https://cdnjs.cloudflare.com/ajax/libs/tablesort/5.2.1/tablesort.min.js\" integrity=\"sha512-F/gIMdDfda6OD2rnzt/Iyp2V9JLHlFQ+EUyixDg9+rkwjqgW1snpkpx7FD5FV1+gG2",
        "             ",
        "      ",
        "            html_content += '<div id=\"container\" sty",
        "             ",
        "      ",
        "      ",
        "            current_index = ",
        "            prev_date = all_dates[current",
        "            ",
        "                all_da",
        "                if current",
        "            ",
        "      ",
        "            html",
        "            ",
        "                html_content += '<a href",
        "              ",
        "        ",
        "            ",
        "                html_content += '<a href=\"/",
        "            html_",
        "      ",
        "            ht",
        "                '<table id=\"anomalies\" c",
        "      ",
        "            html_con",
        "            html_conte",
        "            html_conte",
        "            html_content",
        "            html_conten",
        "            html_conten",
        "            html_content ",
        "            html_content",
        "            html_conte",
        "            html_content ",
        "            for an",
        "                htm",
        "                html_content += \"<t",
        "                html_content += \"<t",
        "                html_content += \"<td>{:",
        "                html_content += \"<td>{:",
        "                html_content += \"<td>{",
        "                html_content += \"<td>{:.",
        "                html_content += \"<td>{:",
        "        ",
        "                ",
        "                    '<td><a href=\"/chart?tic",
        "                        ano",
        "          ",
        "        ",
        "                htm",
        "            html_content += '</tbody></table><script>new ",
        "            html_content ",
        "            self.wfile.wr",
        "        elif pa",
        "      ",
        "      ",
        "            ticker = query_pa",
        "            date = query_pa",
        "            if ticker i",
        "        ",
        "                sel",
        "                self.send_head",
        "                s",
        "                error_html = \"<html><body><h1>Error:",
        "                self.wfile",
        "        ",
        "        ",
        "                cl",
        "               ",
        "         ",
        "          ",
        "              ",
        "                  ",
        "                 ",
        "                    for",
        "               ",
        "             ",
        "                ",
        "                 ",
        "                ",
        "                  ",
        "           ",
        "                   ",
        "          ",
        "              ",
        "                  ",
        "                        if isinstance(agg",
        "                     ",
        "                       ",
        "                    ",
        "                    ",
        "                    ",
        "                     ",
        "              ",
        "                         ",
        "          ",
        "                  ",
        "                    ",
        "               ",
        "              ",
        "               ",
        "          ",
        "                    s",
        "                    self.send_he",
        "                    self.send_header",
        "                   ",
        "                    self.wfi",
        "                exc",
        "          ",
        "                    s",
        "                    self.send_he",
        "                   ",
        "                    error_html = \"<html><body><h1>",
        "               ",
        "          ",
        "                    self.wfi",
        "      ",
        "      ",
        "            su",
        "def run_",
        "    with socketserver.TCPServer",
        "        print(\"serv",
        "      ",
        "            http",
        "        except K",
        "            print(\"\\nE",
        "            ht",
        "            http",
        "if __name__ =",
        "    run_",
        "import",
        "import ",
        "",
        "parser = argparse.ArgumentParser(des",
        "parser.add_argument(\"date\", type=str, h",
        "args = parser",
        "",
        "with open(\"lookup_ta",
        "    lookup_table",
        "",
        "threshold_mu",
        "",
        "target_date_s",
        "",
        "anomali",
        "",
        "for ticker, date_data i",
        "    if target_date",
        "        data = date_",
        "        trades ",
        "        avg_trades ",
        "        std_trades ",
        "        if avg_trades is not None and st",
        "            z_score = (trade",
        "            if z_score ",
        "                ",
        "          ",
        "                    ",
        "                        ",
        "                    ",
        "                        ",
        "                        ",
        "                     ",
        "                        \"clos",
        "                        \"pri",
        "          ",
        "        ",
        "",
        "anomalies.sort(key=lambda x",
        "",
        "print(f\"\\nAnomalies Found ",
        "pri",
        "    f\"{'Ticker':<10}{'Trades':>10}{'Avg Trades':>15}{'Std De",
        "",
        "print(\"",
        "for anomaly ",
        "    p",
        "        f\"{anomal",
        "        f\"{anomaly",
        "        f\"{anomaly['",
        "        f\"{anomaly['",
        "        f\"{anomaly[",
        "        f\"{anomaly['c",
        "        f\"{anomaly['",
        "  ",
        "from polygon im",
        "impor",
        "def get_relat",
        "    client = REST",
        "  ",
        "    main_tickers = [\"MSFT\", \"AMZN\", \"META",
        "  ",
        "    nod",
        "    edg",
        "    id_",
        "    curre",
        "  ",
        "    for ticker ",
        "        if ticke",
        "            id_map[",
        "            nodes.append({\"id\"",
        "            c",
        "        related_companies = clie",
        "        for company ",
        "            related_t",
        "            if related",
        "                id_map[re",
        "                nodes.append({\"id\": ",
        "               ",
        "            edges.append({\"from\": id_map",
        "  ",
        "    with open(\"dat",
        "        json.dump({\"nodes\":",
        "if __name__ =",
        "    get_rela",
        "impor",
        "import concu",
        "from polygon im",
        "",
        "client = R",
        "    tra",
        ")",
        "",
        "sic_code_g",
        "",
        "",
        "def sic_code_to_",
        "  ",
        "    sic_code =",
        "    if 100 <= s",
        "        return \"Agricultu",
        "    elif 1000 <= ",
        "        ret",
        "    elif 1500 <= ",
        "        return",
        "  ",
        "    elif 2000 <= ",
        "        return ",
        "    elif 4000 <= ",
        "        return \"Transporta",
        "    elif 5000 <= ",
        "        return \"",
        "    elif 5200 <= ",
        "        return",
        "    elif 6000 <= ",
        "        return \"Finance, ",
        "    elif 7000 <= ",
        "        retu",
        "    elif 9100 <= ",
        "        return \"Pub",
        "    elif 9900 <= ",
        "        return \"",
        "    ",
        "        r",
        "def process_ticker",
        "    ticker = tick",
        "    ",
        "        details = client.",
        "    ",
        "    ",
        "      ",
        "            getattr(detai",
        "            or getattr(detail",
        "     ",
        "         ",
        "        sic_code ",
        "        sic_descr",
        "            details, \"",
        "     ",
        "        market_cap = getattr",
        "    ",
        "    ",
        "        if",
        "            sic_group = s",
        "            if s",
        "           ",
        "      ",
        "      ",
        "      ",
        "            if sic_group",
        "                sic_cod",
        "                    \"sic",
        "                  ",
        "        ",
        "      ",
        "      ",
        "      ",
        "      ",
        "      ",
        "            sic_code_groups[s",
        "                {\"ticker\": tic",
        "      ",
        "    except Ex",
        "        print(f\"Error proce",
        "",
        "snapshot = client.get_",
        "",
        "with concurrent.futures.ThreadPoolEx",
        "    executor.map(proc",
        "",
        "for sic_code, group_data i",
        "    companies = gro",
        "    total_mar",
        "        company[\"market_cap\"] for compa",
        "  ",
        "  ",
        "    if total_m",
        "        ",
        "    for compan",
        "        i",
        "            ",
        "      ",
        "            company[\"weight\"] = comp",
        "      ",
        "            compa",
        "",
        "with open(\"sic_code_gr",
        "    json.dump(si",
        "print(\"Data collection complete an",
        "from polygon im",
        "from collections ",
        "import ht",
        "import so",
        "import t",
        "impor",
        "",
        "PORT ",
        "",
        "htm",
        "class handler(http.server.",
        "    def genera",
        "        c",
        "            ",
        "     ",
        "        snapshots = client",
        "        pct",
        "            snapshot.ticker: round",
        "            for sn",
        "    ",
        "        with open(\"sic_code",
        "            sic_code_g",
        "        data = defaultdict",
        "        for sic_code, group_da",
        "            parent = grou",
        "            for company i",
        "                ticke",
        "                weigh",
        "                pct_change =",
        "                data[p",
        "                    {\"name\": ticker, \"",
        "        ",
        "        data",
        "        output = {\"name\"",
        "        for parent, ch",
        "            parent_dict = {\"n",
        "            for child, com",
        "                total_change = sum(comp",
        "                avg_change = total_chan",
        "                avg_chan",
        "               ",
        "                 ",
        "                    ",
        "                    \"",
        "        ",
        "                parent_dict[\"",
        "            output[\"child",
        "        return j",
        "    def do",
        "        if self.",
        "            self.",
        "            self.send_header(\"Co",
        "            sel",
        "            json_data ",
        "            self.wfile.w",
        "      ",
        "            self.",
        "            self.send_header",
        "            sel",
        "            self.wfil",
        "tr",
        "    with socketserver.TCPServer",
        "        print(\"serv",
        "        httpd.",
        "except Keybo",
        "    print(\"\\nExiti",
        "from polygon impo",
        "from polygon.websocket.models imp",
        "from typing",
        "c = WebSocketClient(s",
        "class Mess",
        "    co",
        "    def handle_msg(self, ms",
        "        for",
        "            if type",
        "                pr",
        "               ",
        "h = Messag",
        "def handle_msg(msgs: L",
        "    h.handl",
        "c.run(ha",
        "from polygon impo",
        "from polygon.websocket.mod",
        "from typing",
        "import ",
        "c = WebSocketClient(s",
        "async def handle_msg(msgs",
        "    for m",
        "        ",
        "async def ",
        "    await asy",
        "    print(\"uns",
        "    c.unsub",
        "    await asy",
        "    print",
        "    await",
        "async de",
        "    await asyncio.gather(c.co",
        "asyncio.r",
        "from polygon impo",
        "from polygon.websocket.models ",
        "from typing",
        "client = WebSocketClien",
        "",
        "client.subscr",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "def handle_msg(msgs: L",
        "    for m",
        "        ",
        "client.run(",
        "from polygon impo",
        "from polygon.websocket.mod",
        "from typing",
        "",
        "import",
        "c = WebSocketClient(subscriptio",
        "def handle_msg(msgs: L",
        "    for m",
        "        ",
        "c.run(ha",
        "from polygon impo",
        "from polygon.websocket.models imp",
        "from typing",
        "client = WebSocketClient(feed=Feed.Busin",
        "",
        "client.subscr",
        "",
        "",
        "",
        "def handle_msg(msgs: L",
        "    for m",
        "        ",
        "client.run(",
        "from polygon impo",
        "from polygon.websocket.models ",
        "from typing",
        "client = WebSocketClie",
        "",
        "",
        "client.subscrib",
        "client.subscrib",
        "client.subscrib",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "def handle_msg(msgs: L",
        "    for m",
        "        ",
        "client.run(",
        "from polygon impo",
        "from polygon.websocket.models ",
        "from typing",
        "client = WebSocketClien",
        "",
        "",
        "client.subscrib",
        "client.subscrib",
        "client.subscrib",
        "client.subscrib",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "def handle_msg(msgs: L",
        "    for m",
        "        ",
        "client.run(",
        "from polygon impo",
        "from polygon.websocket.models imp",
        "from typing im",
        "impor",
        "c = WebSocketClient(su",
        "def handle_msg(msgs: L",
        "    for m",
        "        q: EquityQuote",
        "        if q.time",
        "            now = ",
        "            print(now, q.ti",
        "c.run(ha",
        "from polygon impo",
        "from polygon.websocket.models imp",
        "from typing",
        "client = Web",
        "    api_key=\"<POLYGON_API_KEY>\", feed",
        "",
        "client.subscr",
        "",
        "",
        "",
        "def handle_msg(msgs: L",
        "    for m",
        "        ",
        "",
        "client.run(",
        "from polygon impo",
        "from polygon.websocket.models ",
        "from typing",
        "",
        "",
        "",
        "",
        "client = Web",
        "    market=M",
        ")",
        "",
        "",
        "client.subsc",
        "",
        "",
        "",
        "",
        "",
        "def handle_msg(msgs: L",
        "    for m",
        "        ",
        "",
        "client.run(",
        "from polygon impo",
        "from typing ",
        "impor",
        "c = WebSocketClient(subscr",
        "def handle_msg(msgs:",
        "    print(jso",
        "c.run(ha",
        "from polygon impo",
        "from polygon.websocket.mod",
        "from typing",
        "c = WebSocketClient(s",
        "def handle_msg(msgs: L",
        "    for m",
        "        ",
        "c.run(ha",
        "from polygon impo",
        "from polygon.websocket.mod",
        "from typing",
        "",
        "client = WebSo",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "client.subsc",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "def handle_msg(msgs: L",
        "    for m",
        "        ",
        "",
        "client.run(",
        "from polygon impo",
        "from polygon.websocket.models imp",
        "from typing",
        "from typing",
        "from datetime ",
        "impor",
        "import t",
        "impo",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "app_start_time",
        "string_map: Dic",
        "cash_map_5s: Dict",
        "cash_traded",
        "",
        "total_ticke",
        "total_trad",
        "total_cash_",
        "",
        "total_string_map: ",
        "total_cash_map: Di",
        "def print_cen",
        "    term_width = os.get",
        "    print(s.cen",
        "def run_webso",
        "  ",
        "    client = Web",
        "    client.sub",
        "    client.ru",
        "def handle_msg(msgs: L",
        "    global ",
        "    global total_tickers_seen, to",
        "    for m",
        "        if isinstan",
        "      ",
        "            if isins",
        "                string_map[m.symbol",
        "                total_string_map[m.symbol",
        "      ",
        "            if isinstance(m.price, ",
        "                cash_v",
        "                cash",
        "                total_c",
        "                    total_cash_ma",
        "        ",
        "        ",
        "                cash_",
        "                    cash_map_5s",
        "         ",
        "        ",
        "                total_tickers",
        "                tot",
        "                total_c",
        "def top_f",
        "  ",
        "    start_time",
        "    global ",
        "  ",
        "    sorted_trades_5s = sorted(string_map.",
        "  ",
        "    print(\"\\0",
        "  ",
        "    p",
        "    print_centered(\"--",
        "    print_centered(f\"Tickers ",
        "    print_centered(f\"Trades seen ",
        "    print_centered(f\"Cash tra",
        "    p",
        "    print_centered(\"--",
        "    print_centered(f\"Total Tick",
        "    print_centered(f\"Total Tra",
        "    print_centered(f\"Total Cash t",
        "  ",
        "    p",
        "    print_centered",
        "  ",
        "    print",
        "        \"{:<15}{:<20}{:<",
        "            \"Ticker\", \"Trades (5s)\", \"C",
        "    ",
        "  ",
        "  ",
        "    for ticker, trades in sorted(string_map",
        "     ",
        "   ",
        "        cash_5s = cash",
        "        total_trades = ",
        "        total_cash = total",
        "        pri",
        "            \"{:<15}{:<20}{:<20",
        "                ticker, trades, ",
        "      ",
        "    ",
        "  ",
        "    end_time ",
        "    current_time",
        "  ",
        "    elapsed_time = time",
        "    hours, rem = divm",
        "    minutes, second",
        "  ",
        "    p",
        "    print",
        "        f\"Current Time: {current_time} | App Uptime: {int(hours):02}:{int(min",
        "  ",
        "  ",
        "    string_",
        "    cash_ma",
        "    cash_",
        "def run_function",
        "    whi",
        "        top",
        "        ti",
        "thread1 = threading.Thread(tar",
        "thread2 = threading.Thread(",
        "thread1",
        "thread2",
        "thread1",
        "thread2",
        "class AuthErr",
        "  ",
        "    ",
        "class BadRespo",
        "  ",
        "    ",
        "import ",
        "impor",
        "def get_logger(name: s",
        "    logger = loggi",
        "    handler = logging.S",
        "    formatter = logging.Formatter(\"%(ascti",
        "    handler.setFo",
        "    logger.addH",
        "    retu",
        "import ",
        "import",
        "from dataclasses",
        "_T = typing.",
        "def modelclass(cls: typing.T",
        "    cls = da",
        "    attri",
        "    ",
        "        for a in cls.__dict",
        "        if not a.startswith(\"__",
        "  ",
        "    def init(self,",
        "        for i, a i",
        "            if i ",
        "                self.__d",
        "        for k, v ",
        "            if ",
        "                se",
        "    cls.__in",
        "    ret",
        "from .rest imp",
        "from .rest.base",
        "from .websocket imp",
        "from .except",
        "__version_",
        "from .base imp",
        "from typing import Optional, A",
        "from .models import Agg, GroupedDailyAgg,",
        "from urllib3 imp",
        "from datetime imp",
        "from .models.request imp",
        "class AggsClie",
        "    def l",
        "      ",
        "        ti",
        "        mult",
        "        tim",
        "    ",
        "        from_: Union[st",
        "        to: Union[str,",
        "        adjusted: Op",
        "        sort: Optional[U",
        "        limit: Opt",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Iterato",
        "    ",
        "        if isinstan",
        "            from_ = int(from_.time",
        "        if isinsta",
        "            to = int(to.timesta",
        "        url = f\"/v2/aggs/ticker/{ticker}/r",
        "        return ",
        "          ",
        "            params=self._get_pa",
        "          ",
        "            deseria",
        "            op",
        "    ",
        "    def ",
        "      ",
        "        ti",
        "        mult",
        "        tim",
        "    ",
        "        from_: Union[st",
        "        to: Union[str,",
        "        adjusted: Op",
        "        sort: Optional[U",
        "        limit: Opt",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[List[",
        "    ",
        "        if isinstan",
        "            from_ = int(from_.time",
        "        if isinsta",
        "            to = int(to.timesta",
        "        url = f\"/v2/aggs/ticker/{ticker}/r",
        "        retu",
        "          ",
        "            params=self._get_p",
        "            resu",
        "            deseria",
        "          ",
        "            op",
        "    ",
        "  ",
        "  ",
        "    def get_gro",
        "      ",
        "        date: U",
        "        adjusted: Op",
        "        params: Optional",
        "        raw: ",
        "        local",
        "        market_typ",
        "        include_o",
        "        options: Optional[R",
        "    ) -> Union[List[Groupe",
        "    ",
        "        url = f\"/v2/aggs/grouped/local",
        "        retu",
        "          ",
        "            params=self._get_params(s",
        "            resu",
        "            deserializer=",
        "          ",
        "            op",
        "    ",
        "    def get_dail",
        "      ",
        "        ti",
        "        date: U",
        "        adjusted: Op",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[DailyOpen",
        "    ",
        "        url = f\"/v1/ope",
        "        retu",
        "          ",
        "            params=self._get_params(se",
        "            deserializer=D",
        "          ",
        "            op",
        "    ",
        "    def get_pre",
        "      ",
        "        ti",
        "        adjusted: Op",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Previous",
        "    ",
        "        url = f\"/v2/agg",
        "        retu",
        "          ",
        "            params=self._get_params(s",
        "            resu",
        "            deserializer=P",
        "          ",
        "            op",
        "    ",
        "import ",
        "impor",
        "import ",
        "import ",
        "from urllib3.util.",
        "from enum ",
        "from typing import ",
        "from datetime ",
        "from importlib.metadata import",
        "from .models.request imp",
        "from ..logging i",
        "import ",
        "from urllib.parse",
        "from ..exceptions impor",
        "logger = get_log",
        "version_numbe",
        "tr",
        "    version_number = vers",
        "except Package",
        "    ",
        "class Ba",
        "    def ",
        "      ",
        "        api_key",
        "        connect",
        "        read_t",
        "        num",
        "        re",
        "        b",
        "        ver",
        "        tr",
        "        custom_json: ",
        "   ",
        "        if ap",
        "            ra",
        "                f\"Must specify env var POLY",
        "      ",
        "        self.AP",
        "        self",
        "        self",
        "            \"Authorization\"",
        "            \"Accept",
        "            \"User-Agent\": f\"Polygon",
        "    ",
        "    ",
        "        self.re",
        "    ",
        "        retry_s",
        "            tot",
        "            sta",
        "          ",
        "          ",
        "          ",
        "          ",
        "          ",
        "          ",
        "          ",
        "        ",
        "            back",
        "    ",
        "    ",
        "    ",
        "        self.client =",
        "            num_",
        "            heade",
        "            ca_cer",
        "            cert_re",
        "            retrie",
        "    ",
        "        self.timeout = urllib3.Timeout(co",
        "        i",
        "            logger.se",
        "        self.",
        "        if ",
        "            self.",
        "      ",
        "            se",
        "    def _decod",
        "        return self.json.loa",
        "    de",
        "      ",
        "        p",
        "        params: Opt",
        "        result_key: ",
        "        deser",
        "        raw: ",
        "        options: Optional[R",
        "    ) ",
        "        option = options if options i",
        "        headers = self._con",
        "        if ",
        "            full_url ",
        "           ",
        "                full_url ",
        "            print_hea",
        "            if \"Authoriz",
        "                print_headers[\"Authorization",
        "                    se",
        "        ",
        "            print(f\"Re",
        "            print(f\"Request",
        "        resp = se",
        "         ",
        "            se",
        "            f",
        "            he",
        "    ",
        "        if ",
        "            resp_headers_dict",
        "            print(f\"Response ",
        "        if resp",
        "            raise BadRespons",
        "       ",
        "           ",
        "      ",
        "            obj = ",
        "        except ",
        "            print(f\"Error d",
        "          ",
        "        if ",
        "            if res",
        "            ",
        "            obj ",
        "        if d",
        "            if t",
        "                obj = [des",
        "        ",
        "                obj",
        "        r",
        "    @sta",
        "    def time_mult(time",
        "        if timesta",
        "            re",
        "        elif timest",
        "            r",
        "        elif timest",
        "           ",
        "        ",
        "    def _g",
        "        self, fn, caller_locals: Dict[",
        "   ",
        "        params = cal",
        "        if pa",
        "           ",
        "    ",
        "        for argname, v in inspect",
        "      ",
        "            if argname",
        "            ",
        "            if v.d",
        "        ",
        "                val = caller_",
        "                if i",
        "                 ",
        "                elif ",
        "                    v",
        "                elif is",
        "                    val = int(val.time",
        "                i",
        "                    for ext in [\"l",
        "                        if ",
        "              ",
        "              ",
        "              ",
        "                            argname = ",
        "                    if ar",
        "                     ",
        "                    ",
        "        re",
        "    def _concat_headers(self, headers: Op",
        "        if he",
        "            ret",
        "        return {**hea",
        "    def _pa",
        "      ",
        "        p",
        "        pa",
        "        de",
        "        result_key",
        "        options: Optional[R",
        "   ",
        "        w",
        "            re",
        "             ",
        "               ",
        "                deser",
        "                res",
        "            ",
        "                ",
        "      ",
        "        ",
        "                decode",
        "            excep",
        "                print(f\"Error",
        "            ",
        "            if resul",
        "            ",
        "            for t in",
        "                yi",
        "            if \"ne",
        "                path = decoded[\"",
        "             ",
        "        ",
        "           ",
        "    def _",
        "      ",
        "        p",
        "        pa",
        "        r",
        "        de",
        "        result_key",
        "        options: Optional[R",
        "   ",
        "       ",
        "            re",
        "             ",
        "               ",
        "                deser",
        "            ",
        "                ",
        "      ",
        "        return se",
        "           ",
        "            p",
        "            deseria",
        "            resul",
        "            op",
        "    ",
        "from polygon.rest.models",
        "from polygon.rest.mode",
        "    SMAIndic",
        "    EMAIndic",
        "    RSIIndic",
        "    MACDIndi",
        "",
        "from .base imp",
        "from typing import Option",
        "from .models",
        "from urllib3 imp",
        "from datetime imp",
        "from .models.request imp",
        "class IndicatorsC",
        "    def ",
        "      ",
        "        ti",
        "        timestamp: Optional[Union[",
        "        timestamp_lt: Optional[Unio",
        "        timestamp_lte: Optional[Unio",
        "        timestamp_gt: Optional[Unio",
        "        timestamp_gte: Optional[Unio",
        "        timespan: O",
        "        window: Op",
        "        adjusted: Op",
        "        expand_underlyin",
        "        order: Optional[U",
        "        limit: Opt",
        "        params: Optional",
        "        series_type: Optional[",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[SMAIndicat",
        "    ",
        "        url = f\"/v1/in",
        "        retu",
        "          ",
        "            params=self._get_p",
        "            resu",
        "            deserializer=SM",
        "          ",
        "            op",
        "    ",
        "    def ",
        "      ",
        "        ti",
        "        timestamp: Optional[Union[",
        "        timestamp_lt: Optional[Unio",
        "        timestamp_lte: Optional[Unio",
        "        timestamp_gt: Optional[Unio",
        "        timestamp_gte: Optional[Unio",
        "        timespan: O",
        "        window: Op",
        "        adjusted: Op",
        "        expand_underlyin",
        "        order: Optional[U",
        "        limit: Opt",
        "        params: Optional",
        "        series_type: Optional[",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[EMAIndicat",
        "    ",
        "        url = f\"/v1/in",
        "        retu",
        "          ",
        "            params=self._get_p",
        "            resu",
        "            deserializer=EM",
        "          ",
        "            op",
        "    ",
        "    def ",
        "      ",
        "        ti",
        "        timestamp: Optional[Union[",
        "        timestamp_lt: Optional[Unio",
        "        timestamp_lte: Optional[Unio",
        "        timestamp_gt: Optional[Unio",
        "        timestamp_gte: Optional[Unio",
        "        timespan: O",
        "        window: Op",
        "        adjusted: Op",
        "        expand_underlyin",
        "        order: Optional[U",
        "        limit: Opt",
        "        params: Optional",
        "        series_type: Optional[",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[RSIIndicat",
        "    ",
        "        url = f\"/v1/in",
        "        retu",
        "          ",
        "            params=self._get_p",
        "            resu",
        "            deserializer=RS",
        "          ",
        "            op",
        "    ",
        "    def ",
        "      ",
        "        ti",
        "        timestamp: Optional[Union[",
        "        timestamp_lt: Optional[Unio",
        "        timestamp_lte: Optional[Unio",
        "        timestamp_gt: Optional[Unio",
        "        timestamp_gte: Optional[Unio",
        "        timespan: O",
        "        short_window:",
        "        long_window: ",
        "        signal_window:",
        "        adjusted: Op",
        "        expand_underlyin",
        "        order: Optional[U",
        "        limit: Opt",
        "        params: Optional",
        "        series_type: Optional[",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[MACDIndica",
        "    ",
        "        url = f\"/v1/in",
        "        retu",
        "          ",
        "            params=self._get_p",
        "            resu",
        "            deserializer=MAC",
        "          ",
        "            op",
        "    ",
        "from .base imp",
        "from typing import Optional",
        "from .mode",
        "    Q",
        "    Las",
        "    LastF",
        "    RealTimeCur",
        "    ",
        "    O",
        "    Pre",
        "",
        "from urllib3 imp",
        "from datetime imp",
        "from .models.request imp",
        "",
        "class QuotesCli",
        "    def li",
        "      ",
        "        ti",
        "        timestamp: Optional[Union[",
        "        timestamp_lt: Optional[Unio",
        "        timestamp_lte: Optional[Unio",
        "        timestamp_gt: Optional[Unio",
        "        timestamp_gte: Optional[Unio",
        "        limit: Opt",
        "        sort: Optional[U",
        "        order: Optional[U",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Iterator",
        "    ",
        "        url = f\"/v",
        "        return ",
        "          ",
        "            params=self._get_par",
        "          ",
        "            deserial",
        "            op",
        "    ",
        "    def get",
        "      ",
        "        ti",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[LastQ",
        "    ",
        "        url = f\"/v2",
        "        retu",
        "          ",
        "            p",
        "            resu",
        "            deserializ",
        "          ",
        "            op",
        "    ",
        "    def get_la",
        "      ",
        "        f",
        "        ",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[LastFor",
        "    ",
        "        url = f\"/v1/last_qu",
        "        retu",
        "          ",
        "            p",
        "            deserializer=",
        "          ",
        "            op",
        "    ",
        "    def get_real_time",
        "      ",
        "        f",
        "        ",
        "        amount: Opt",
        "        precision: Uni",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[RealTimeCurre",
        "    ",
        "        url = f\"/v1/co",
        "        retu",
        "          ",
        "            params=self._get_params(self.ge",
        "            deserializer=RealTi",
        "          ",
        "            op",
        "    ",
        "from .base imp",
        "from typing import Optional, A",
        "from .mode",
        "    Marke",
        "    Mark",
        "    T",
        "    TickerCh",
        "    Ticke",
        "    Tic",
        "    Relat",
        "    Tick",
        "    ",
        "    O",
        "    Ass",
        "    L",
        "    S",
        "    Di",
        "    Divi",
        "    Fre",
        "    Con",
        "    Da",
        "    ",
        "    Ex",
        "    Option",
        "",
        "from urllib3 imp",
        "from datetim",
        "from .models.request imp",
        "class MarketsCli",
        "    def get_ma",
        "        self, params: Optional[Dict[",
        "    ) -> Union[List[Marke",
        "    ",
        "        url = \"/v1/m",
        "        retu",
        "          ",
        "            p",
        "            deserializer",
        "          ",
        "            r",
        "    ",
        "    def get_m",
        "        self, params: Optional[Dict[",
        "    ) -> Union[Market",
        "    ",
        "        url = \"/v1",
        "        retu",
        "            path=url, params=params, des",
        "    ",
        "class TickersCli",
        "    def li",
        "      ",
        "        ticker: Op",
        "        ticker_lt: O",
        "        ticker_lte: ",
        "        ticker_gt: O",
        "        ticker_gte: ",
        "        type: Opt",
        "        market: Op",
        "        exchange: O",
        "        cusip: Opt",
        "        cik: Opti",
        "        date: Opt",
        "        active: Opt",
        "        search: Op",
        "        limit: Op",
        "        sort: Optional[Uni",
        "        order: Optional[U",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Iterator",
        "    ",
        "        url = \"/v3",
        "        return ",
        "          ",
        "            params=self._get_par",
        "          ",
        "            deseriali",
        "            op",
        "    ",
        "    def get_t",
        "      ",
        "        ticker: Op",
        "        date: Opt",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[TickerD",
        "    ",
        "        url = f\"/v3/ref",
        "        retu",
        "          ",
        "            params=self._get_params",
        "            deserializer",
        "          ",
        "            resu",
        "            op",
        "    ",
        "    def get_t",
        "      ",
        "        ti",
        "        types: Opt",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[TickerChan",
        "    ",
        "        url = f\"/vX/referen",
        "        retu",
        "          ",
        "            params=self._get_params",
        "            deserializer=Ti",
        "            resu",
        "          ",
        "            op",
        "    ",
        "    def list",
        "      ",
        "        ticker: Op",
        "        ticker_lt: O",
        "        ticker_lte: ",
        "        ticker_gt: O",
        "        ticker_gte: ",
        "        published_utc:",
        "        published_utc_l",
        "        published_utc_lt",
        "        published_utc_g",
        "        published_utc_gt",
        "        limit: Opt",
        "        sort: Optional[U",
        "        order: Optional[U",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Iterator[T",
        "    ",
        "        url = \"/v",
        "        return ",
        "          ",
        "            params=self._get_param",
        "          ",
        "            deserialize",
        "            op",
        "    ",
        "    def get_",
        "      ",
        "        asset_class: Optional[",
        "        locale: Optional[U",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[List[Tick",
        "    ",
        "        url = \"/v3/re",
        "        retu",
        "          ",
        "            params=self._get_param",
        "            deserialize",
        "          ",
        "            resu",
        "            op",
        "    ",
        "    def get_rel",
        "      ",
        "        ticker: Op",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Related",
        "    ",
        "        url = f\"/v1/rel",
        "        retu",
        "          ",
        "            params=self._get_params(s",
        "            deserializer=",
        "          ",
        "            resu",
        "            op",
        "    ",
        "class SplitsCli",
        "    def li",
        "      ",
        "        ticker: Op",
        "        ticker_lt: O",
        "        ticker_lte: ",
        "        ticker_gt: O",
        "        ticker_gte: ",
        "        execution_date: Optio",
        "        execution_date_lt: Opt",
        "        execution_date_lte: Opt",
        "        execution_date_gt: Opt",
        "        execution_date_gte: Opt",
        "        reverse_split:",
        "        limit: Opt",
        "        sort: Optional[U",
        "        order: Optional[U",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Iterator",
        "    ",
        "        url = \"/v3",
        "        return ",
        "          ",
        "            params=self._get_par",
        "          ",
        "            deserial",
        "            op",
        "    ",
        "class DividendsCl",
        "    def lis",
        "      ",
        "        ticker: Op",
        "        ticker_lt: O",
        "        ticker_lte: ",
        "        ticker_gt: O",
        "        ticker_gte: ",
        "        ex_dividend_date: Opti",
        "        ex_dividend_date_lt: Op",
        "        ex_dividend_date_lte: Op",
        "        ex_dividend_date_gt: Op",
        "        ex_dividend_date_gte: Op",
        "        record_date: Option",
        "        record_date_lt: Optio",
        "        record_date_lte: Opti",
        "        record_date_gt: Optio",
        "        record_date_gte: Opti",
        "        declaration_date: Opti",
        "        declaration_date_lt: Op",
        "        declaration_date_lte: Op",
        "        declaration_date_gt: Op",
        "        declaration_date_gte: Op",
        "        pay_date: Optional",
        "        pay_date_lt: Option",
        "        pay_date_lte: Option",
        "        pay_date_gt: Option",
        "        pay_date_gte: Option",
        "        frequency: Optional[U",
        "        cash_amount: O",
        "        cash_amount_lt:",
        "        cash_amount_lte:",
        "        cash_amount_gt:",
        "        cash_amount_gte:",
        "        dividend_type: Optional[",
        "        limit: Opt",
        "        sort: Optional[U",
        "        order: Optional[U",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Iterator[",
        "    ",
        "        url = \"/v3/",
        "        return ",
        "          ",
        "            params=self._get_para",
        "          ",
        "            deserializ",
        "            op",
        "    ",
        "class ConditionsC",
        "    def list",
        "      ",
        "        asset_class: Optional[",
        "        data_type: Optional[",
        "        id: Opti",
        "        sip: Optional[U",
        "        limit: Opt",
        "        sort: Optional[U",
        "        order: Optional[U",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Iterator[C",
        "    ",
        "        url = \"/v3/r",
        "        return ",
        "          ",
        "            params=self._get_param",
        "          ",
        "            deserializ",
        "            op",
        "    ",
        "class ExchangesCl",
        "    def get",
        "      ",
        "        asset_class: Optional[",
        "        locale: Optional[U",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[List[Ex",
        "    ",
        "        url = \"/v3/",
        "        retu",
        "          ",
        "            params=self._get_para",
        "            deserializ",
        "          ",
        "            resu",
        "            op",
        "    ",
        "class ContractsCl",
        "    def get_op",
        "      ",
        "        ti",
        "        as_of: Optional[",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[OptionsC",
        "    ",
        "        url = f\"/v3/referenc",
        "        retu",
        "          ",
        "            params=self._get_params(",
        "            resu",
        "            deserializer=",
        "          ",
        "            op",
        "    ",
        "    def list_op",
        "      ",
        "        underlying_ticke",
        "        underlying_ticker",
        "        underlying_ticker_",
        "        underlying_ticker",
        "        underlying_ticker_",
        "        contract_type:",
        "        expiration_date: Opti",
        "        expiration_date_lt: Opt",
        "        expiration_date_lte: Op",
        "        expiration_date_gt: Opt",
        "        expiration_date_gte: Op",
        "        as_of: Optional[",
        "        strike_price: ",
        "        strike_price_lt:",
        "        strike_price_lte",
        "        strike_price_gt:",
        "        strike_price_gte",
        "        expired: Op",
        "        limit: Opt",
        "        sort: Optional[U",
        "        order: Optional[U",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Iterator[Opti",
        "    ",
        "        url = \"/v3/refe",
        "        return ",
        "          ",
        "            params=self._get_params(s",
        "          ",
        "            deserializer=",
        "            op",
        "    ",
        "from .base imp",
        "from typing import Optional, A",
        "from .mode",
        "    Ticke",
        "    Dir",
        "    OptionCon",
        "    Snapsho",
        "    SnapshotT",
        "    Univers",
        "    Indice",
        "    ",
        "    O",
        "",
        "from urllib3 imp",
        "from .models.request imp",
        "def get_locale(market_type: Un",
        "    if market_type == Snaps",
        "        r",
        "    retur",
        "class SnapshotCl",
        "    def list_uni",
        "      ",
        "        type: Optional[Union[st",
        "        ticker_any_of: Op",
        "        order: Optional[U",
        "        limit: Op",
        "        sort: Optional[U",
        "        ticker_lt: O",
        "        ticker_lte: ",
        "        ticker_gt: O",
        "        ticker_gte: ",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Iterator[Unive",
        "    ",
        "        url = ",
        "        return ",
        "          ",
        "            params=self._get_params(se",
        "            resu",
        "            deserializer=U",
        "          ",
        "            op",
        "    ",
        "    def get_",
        "      ",
        "        market_type: Union",
        "        tickers: Optional[Un",
        "        params: Optional",
        "        raw: ",
        "        include_otc: O",
        "        options: Optional[R",
        "    ) -> Union[List[Ticke",
        "    ",
        "        locale = get",
        "        url = f\"/v2/snapshot/locale/{",
        "        if type(",
        "            tickers",
        "        retu",
        "          ",
        "            params=self._get_param",
        "            deserializer=",
        "          ",
        "            resu",
        "            op",
        "    ",
        "    def get_sna",
        "      ",
        "        market_type: Union",
        "        direction: U",
        "        params: Optional",
        "        include_otc: O",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[List[Ticke",
        "    ",
        "        locale = get",
        "        url = f\"/v2/snapshot/locale/{lo",
        "        retu",
        "          ",
        "            params=self._get_params(s",
        "            resu",
        "            deserializer=",
        "          ",
        "            op",
        "    ",
        "    def get_sn",
        "      ",
        "        market_type: Union",
        "        ti",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[TickerS",
        "    ",
        "        locale = get",
        "        url = f\"/v2/snapshot/locale/{local",
        "        retu",
        "          ",
        "            params=self._get_params(",
        "            resu",
        "            deserializer=",
        "          ",
        "            op",
        "    ",
        "    def get_sn",
        "      ",
        "        underly",
        "        option",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[OptionContr",
        "    ",
        "        url = f\"/v3/snapshot/options/",
        "        retu",
        "          ",
        "            params=self._get_params(",
        "            resu",
        "            deserializer=Opti",
        "          ",
        "            op",
        "    ",
        "    def list_snaps",
        "      ",
        "        underly",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Iterator[OptionC",
        "    ",
        "        url = f\"/v3/snapshot",
        "        return ",
        "          ",
        "            params=self._get_params(self",
        "            resu",
        "            deserializer=Opti",
        "          ",
        "            op",
        "    ",
        "    def get_snap",
        "      ",
        "        ti",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[SnapshotTic",
        "    ",
        "        url = f\"/v2/snapshot/locale/glob",
        "        retu",
        "          ",
        "            params=self._get_params(se",
        "            res",
        "            deserializer=Snap",
        "          ",
        "            op",
        "    ",
        "    def get_sn",
        "      ",
        "        ticker_any_of: Optional",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[List[Indice",
        "        url = f\"/v",
        "        retu",
        "          ",
        "            params=self._get_params(",
        "            deserializer=",
        "          ",
        "            resu",
        "            op",
        "    ",
        "from polygon.rest.models.su",
        "from .base imp",
        "from typing import Option",
        "from urllib3 imp",
        "from .models.request imp",
        "class SummariesCl",
        "    def get",
        "      ",
        "        ticker_any_of: Op",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[List[Summa",
        "    ",
        "        url = f",
        "        retu",
        "          ",
        "            params=self._get_para",
        "            resu",
        "            deserializer",
        "          ",
        "            op",
        "    ",
        "from .base imp",
        "from typing import Optional",
        "from .models import Trade, Last",
        "from urllib3 imp",
        "from datetime imp",
        "from .models.request imp",
        "class TradesCli",
        "    def li",
        "      ",
        "        ti",
        "        timestamp: Optional[Union[",
        "        timestamp_lt: Optional[Unio",
        "        timestamp_lte: Optional[Unio",
        "        timestamp_gt: Optional[Unio",
        "        timestamp_gte: Optional[Unio",
        "        limit: Opt",
        "        sort: Optional[U",
        "        order: Optional[U",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Iterator",
        "    ",
        "        url = f\"/v",
        "        return ",
        "          ",
        "            params=self._get_par",
        "          ",
        "            deserial",
        "            op",
        "    ",
        "    def get",
        "      ",
        "        ti",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[LastT",
        "    ",
        "        url = f\"/v2/",
        "        retu",
        "          ",
        "            params=self._get_para",
        "            resu",
        "            deserializ",
        "          ",
        "            op",
        "    ",
        "    def get_las",
        "      ",
        "        f",
        "        ",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Crypto",
        "    ",
        "        url = f\"/v1/la",
        "        retu",
        "          ",
        "            params=self._get_params(s",
        "            res",
        "            deserialize",
        "          ",
        "            op",
        "    ",
        "from .base imp",
        "from typing import Optional, A",
        "from .models import StockFinancial,",
        "from urllib3 imp",
        "from datetime imp",
        "from .models.request imp",
        "class VXClien",
        "    def list_st",
        "      ",
        "        ticker: Op",
        "        cik: Opti",
        "        company_name:",
        "        company_name_sear",
        "        sic: Opti",
        "        filing_date: Optional[Union",
        "        filing_date_lt: Optional[Uni",
        "        filing_date_lte: Optional[Uni",
        "        filing_date_gt: Optional[Uni",
        "        filing_date_gte: Optional[Uni",
        "        period_of_report_date: Optional[",
        "        period_of_report_date_lt: Optiona",
        "        period_of_report_date_lte: Optiona",
        "        period_of_report_date_gt: Optiona",
        "        period_of_report_date_gte: Optiona",
        "        timeframe: Optional[U",
        "        include_sources",
        "        limit: Opt",
        "        sort: Optional[U",
        "        order: Optional[U",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[Iterator[Sto",
        "    ",
        "        url = \"/vX/r",
        "        return ",
        "          ",
        "            params=self._get_params(s",
        "          ",
        "            deserializer=",
        "            op",
        "    ",
        "    def l",
        "      ",
        "        ticker: Op",
        "        us_code: Op",
        "        isin: Opt",
        "        listing_date:",
        "        ipo_status: ",
        "        limit: Opt",
        "        sort: Optional[U",
        "        order: Optional[U",
        "        params: Optional",
        "        raw: ",
        "        options: Optional[R",
        "    ) -> Union[List[IPO",
        "    ",
        "        url = \"/v",
        "        return ",
        "          ",
        "            params=self._get_pa",
        "            deserialize",
        "          ",
        "            resu",
        "            op",
        "    ",
        "from .aggs imp",
        "from .trades imp",
        "from .quotes imp",
        "from .snapshot imp",
        "from .indicators imp",
        "from .summaries imp",
        "from .refere",
        "    Marke",
        "    Ticke",
        "    Spli",
        "    Divide",
        "    Condit",
        "    Exchan",
        "    Contra",
        "",
        "from .vX imp",
        "from typing impo",
        "impo",
        "BASE = \"https:/",
        "ENV_KEY = \"PO",
        "class RE",
        "    Agg",
        "    Trad",
        "    Quot",
        "    Snaps",
        "    Marke",
        "    Ticke",
        "    Spli",
        "    Divide",
        "    Condit",
        "    Exchan",
        "    Contra",
        "    Indica",
        "    Summar",
        ")",
        "    def ",
        "      ",
        "        api_key: Optional[",
        "        connect_tim",
        "        read_time",
        "        num_po",
        "        retr",
        "        base",
        "        verbose",
        "        trace:",
        "        custom_json: ",
        "   ",
        "        supe",
        "            ap",
        "            connect_ti",
        "            read_ti",
        "            num_",
        "            re",
        "           ",
        "            ve",
        "            ",
        "            custom",
        "    ",
        "        self.",
        "            ap",
        "            connect_ti",
        "            read_ti",
        "            num_",
        "            re",
        "           ",
        "            ve",
        "            ",
        "            custom",
        "    ",
        "from typing i",
        "from ...modelclass",
        "@mode",
        "class",
        "    \"Contains aggregate data for a given ticker symbol",
        "    open: Option",
        "    high: Option",
        "    low: Option",
        "    close: Optio",
        "    volume: Optio",
        "    vwap: Option",
        "    timestamp: Op",
        "    transactions: O",
        "    otc: Option",
        "    @sta",
        "    def fr",
        "        r",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.g",
        "            d.",
        "            d.",
        "            d.g",
        "    ",
        "@mode",
        "class Group",
        "    \"Contains daily open, high, low, a",
        "    ticker: Opti",
        "    open: Option",
        "    high: Option",
        "    low: Option",
        "    close: Optio",
        "    volume: Optio",
        "    vwap: Option",
        "    timestamp: Op",
        "    transactions: O",
        "    otc: Option",
        "    @sta",
        "    def fr",
        "        return ",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.g",
        "            d.",
        "            d.",
        "            d.g",
        "    ",
        "@mode",
        "class DailyO",
        "    \"Contains data for open, close and afterhour",
        "    after_hours: Op",
        "    close: Optio",
        "    from_: Opti",
        "    high: Option",
        "    low: Option",
        "    open: Option",
        "    pre_market: Opt",
        "    status: Opti",
        "    symbol: Opti",
        "    volume: Optio",
        "    otc: Option",
        "    @sta",
        "    def fr",
        "        return D",
        "            d.get(\"",
        "            d.ge",
        "            d.ge",
        "            d.ge",
        "            d.g",
        "            d.ge",
        "            d.get(",
        "            d.get",
        "            d.get",
        "            d.get",
        "            d.g",
        "    ",
        "@mode",
        "class Previ",
        "    \"Contains data for the previous day's open, high,",
        "    ticker: Opti",
        "    close: Optio",
        "    high: Option",
        "    low: Option",
        "    open: Option",
        "    timestamp: Opt",
        "    volume: Optio",
        "    vwap: Option",
        "    @sta",
        "    def fr",
        "        return P",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.g",
        "    ",
        "from enum ",
        "class So",
        "    ASC",
        "    DESC",
        "class Ord",
        "    ASC",
        "    DESC",
        "class Loc",
        "    US",
        "    GLOBAL",
        "class Mar",
        "    STOCKS",
        "    CRYPTO",
        "    FX",
        "    OTC",
        "    INDICES",
        "class Asset",
        "    STOCKS",
        "    OPTIONS",
        "    CRYPTO",
        "    FX",
        "    INDICES",
        "class Divide",
        "    CD",
        "    SC",
        "    LT",
        "    ST",
        "class Frequ",
        "    ONE_",
        "    ANU",
        "    BIAN",
        "    QUAR",
        "    MONT",
        "class Data",
        "    DATA_TRA",
        "    DATA_B",
        "    DATA_NB",
        "class SI",
        "    CTA",
        "    UTP",
        "    OPRA",
        "class Exchan",
        "    EXCHANGE",
        "    TRF",
        "    SIP",
        "class Direc",
        "    GAINERS",
        "    LOSERS",
        "class SnapshotM",
        "    STOCKS",
        "    FOREX",
        "    CRYPTO",
        "    INDICES",
        "class Timef",
        "    ANNUAL",
        "    QUARTERLY",
        "class Preci",
        "    ZE",
        "    O",
        "    T",
        "    TH",
        "    FO",
        "class Serie",
        "    OPEN",
        "    CLOSE",
        "    HIGH",
        "    LOW",
        "class LaunchPa",
        "    X_POLYGON_EDGE_ID",
        "    X_POLYGON_IP_ADDRESS = ",
        "    X_POLYGON_EDGE_USER_AGENT",
        "from typing impo",
        "from ...modelclass",
        "@mode",
        "class Si",
        "    \"Contains data for a mapping to a symbo",
        "    CTA: Optio",
        "    OPRA: Optio",
        "    UTP: Optio",
        "    @sta",
        "    def fr",
        "        return ",
        "@mode",
        "class Con",
        "    \"Contains data for aggregation rules ",
        "    updates_high_low:",
        "    updates_open_close",
        "    updates_volume: ",
        "    @sta",
        "    def fr",
        "        return C",
        "@mode",
        "class Mar",
        "    \"Contains data for aggregation ",
        "    updates_high_low:",
        "    updates_open_close",
        "    updates_volume: ",
        "    @sta",
        "    def fr",
        "        return M",
        "@mode",
        "class Upd",
        "    \"Contains data for a l",
        "    consolidated: Optio",
        "    market_center: Optio",
        "    @sta",
        "    def fr",
        "        retur",
        "            c",
        "          ",
        "                if \"c",
        "                else Consolidat",
        "       ",
        "            m",
        "          ",
        "                if \"m",
        "                else MarketCent",
        "       ",
        "    ",
        "@mode",
        "class Co",
        "    \"Condition contains data for ",
        "    abbreviation: O",
        "    asset_class: O",
        "    data_types: Optio",
        "    description: O",
        "    exchange: Opt",
        "    id: Option",
        "    legacy: Opti",
        "    name: Optio",
        "    sip_mapping: Optio",
        "    type: Optio",
        "    update_rules: Optio",
        "    @sta",
        "    def fr",
        "        retu",
        "            abbreviation=d",
        "            asset_class=d",
        "            data_types=d",
        "            description=d",
        "            exchange=d",
        "            id=d",
        "            legacy=d",
        "            name=d",
        "            ",
        "          ",
        "                if \"",
        "                else SipMappi",
        "       ",
        "            type=d",
        "            u",
        "          ",
        "                if \"u",
        "                else UpdateRul",
        "       ",
        "    ",
        "from typing impo",
        "from ...modelclass",
        "@mode",
        "class Un",
        "    \"Underlying contains data for an underlying o",
        "    amount: Optio",
        "    type: Optio",
        "    underlying: Op",
        "    @sta",
        "    def fr",
        "        return ",
        "@mode",
        "class Optio",
        "    \"OptionsContract contains dat",
        "    additional_underlyings: Op",
        "    cfi: Optio",
        "    contract_type: ",
        "    correction: Op",
        "    exercise_style: ",
        "    expiration_date:",
        "    primary_exchange:",
        "    shares_per_contract",
        "    strike_price: Op",
        "    ticker: Opti",
        "    underlying_ticker",
        "    @sta",
        "    def fr",
        "        return ",
        "            additi",
        "          ",
        "                if \"additi",
        "                else [Underlying.from_dic",
        "       ",
        "            cfi=d",
        "            contract_type=d",
        "            correction=d",
        "            exercise_style=d",
        "            expiration_date=d",
        "            primary_exchange=d",
        "            shares_per_contract=d",
        "            strike_price=d",
        "            size=d",
        "            ticker=d",
        "            underlying_ticker=d",
        "    ",
        "from typing i",
        "from ...modelclass",
        "@mode",
        "class D",
        "    \"Dividend contains data for a historical cash dividend, including the ticker symb",
        "    id: Option",
        "    cash_amount: Op",
        "    currency: Opt",
        "    declaration_date:",
        "    dividend_type: ",
        "    ex_dividend_date:",
        "    frequency: Op",
        "    pay_date: Opt",
        "    record_date: O",
        "    ticker: Opti",
        "    @sta",
        "    def fr",
        "        return",
        "from typing i",
        "from ...modelclass",
        "@mode",
        "class E",
        "    \"Exchange contains data for a",
        "    acronym: Opt",
        "    asset_class: O",
        "    id: Option",
        "    locale: Opti",
        "    mic: Optio",
        "    name: Optio",
        "    operating_mic: ",
        "    participant_id: ",
        "    type: Optio",
        "    url: Optio",
        "    @sta",
        "    def fr",
        "        return",
        "from dataclasses",
        "from typing import Any",
        "from ...modelclass",
        "@mode",
        "@data",
        "class Da",
        "  ",
        "    label: Opti",
        "    order: Opti",
        "    unit: Optio",
        "    value: Optio",
        "    derived_from: Opti",
        "    formula: Opt",
        "    source: Optional[",
        "    xpath: Opti",
        "    @sta",
        "    def from_dict(d: Optional[D",
        "        ",
        "            ret",
        "        retu",
        "            labe",
        "            orde",
        "            uni",
        "            valu",
        "            derived_fro",
        "            formul",
        "            sourc",
        "            xpat",
        "    ",
        "@data",
        "@mode",
        "class Bal",
        "    assets: Optiona",
        "    current_assets: Opt",
        "    cash: Optional",
        "    accounts_receivable: ",
        "    inventory: Optio",
        "    prepaid_expenses: Op",
        "    other_current_assets: ",
        "    noncurrent_assets: O",
        "    long_term_investments:",
        "    fixed_assets: Opti",
        "    intangible_assets: O",
        "    noncurrent_prepaid_expens",
        "    other_noncurrent_assets",
        "    liabilities: Opti",
        "    current_liabilities: ",
        "    accounts_payable: Op",
        "    interest_payable: Op",
        "    wages: Optiona",
        "    other_current_liabilitie",
        "    noncurrent_liabilities:",
        "    long_term_debt: Opt",
        "    other_noncurrent_liabiliti",
        "    commitments_and_contingenc",
        "    redeemable_noncontrolling_int",
        "    redeemable_noncontrolling_intere",
        "    redeemable_noncontrolling_intere",
        "    redeemable_noncontrolling_interest",
        "    equity: Optiona",
        "    equity_attributable_to_noncontrolli",
        "    equity_attributable_to_par",
        "    temporary_equity: Op",
        "    temporary_equity_attributable_t",
        "    liabilities_and_equity:",
        "    @sta",
        "    def from_dict(d: Optional[Di",
        "        ",
        "            retu",
        "        return",
        "            assets=DataPoint",
        "            current_assets=DataPoint",
        "            cash=DataPoint",
        "            accounts_receivable=DataPoint",
        "            inventory=DataPoint",
        "            prepaid_expenses=DataPoint",
        "            other_current_assets=DataPoint",
        "            noncurrent_assets=DataPoint",
        "            long_term_investments=DataPoint",
        "            fixed_assets=DataPoint",
        "            intangible_assets=DataPoint",
        "            noncurrent_prepai",
        "                d.get(\"no",
        "       ",
        "            other_noncurrent",
        "                d.get(\"o",
        "       ",
        "            liabilities=DataPoint",
        "            current_liabilities=DataPoint",
        "            accounts_payable=DataPoint",
        "            interest_payable=DataPoint",
        "            wages=DataPoint",
        "            other_current_lia",
        "                d.get(\"ot",
        "       ",
        "            noncurrent_liabilities=DataPoint",
        "            long_term_debt=DataPoint",
        "            other_noncurrent_l",
        "                d.get(\"oth",
        "       ",
        "            commitments_and_con",
        "                d.get(\"comm",
        "       ",
        "            redeemable_noncontrol",
        "                d.get(\"redeem",
        "       ",
        "            redeemable_noncontrolling",
        "                d.get(\"redeemable",
        "       ",
        "            redeemable_noncontrollin",
        "                d.get(\"redeemabl",
        "       ",
        "            redeemable_noncontrolling_",
        "                d.get(\"redeemable_",
        "       ",
        "            equity=DataPoint",
        "            equity_attributable_to_nonc",
        "                d.get(\"equity_attri",
        "       ",
        "            equity_attributable",
        "                d.get(\"equi",
        "       ",
        "            temporary_equity=DataPoint",
        "            temporary_equity_attribu",
        "                d.get(\"temporary",
        "       ",
        "            liabilities_and_equity=DataPoint",
        "    ",
        "@data",
        "@mode",
        "class CashFl",
        "    net_cash_flow_from_operating_ac",
        "    net_cash_flow_from_operating_activiti",
        "    net_cash_flow_from_operating_activitie",
        "    net_cash_flow_from_investing_ac",
        "    net_cash_flow_from_investing_activiti",
        "    net_cash_flow_from_investing_activitie",
        "    net_cash_flow_from_financing_ac",
        "    net_cash_flow_from_financing_activiti",
        "    net_cash_flow_from_financing_activitie",
        "    exchange_gains_losses:",
        "    net_cash_flow: Opt",
        "    net_cash_flow_continuing",
        "    net_cash_flow_discontinue",
        "    @sta",
        "    def from_dict(d: Optional[Dict[",
        "        ",
        "            return ",
        "        return C",
        "            net_cash_flow_from_opera",
        "                d.get(\"net_cash_",
        "       ",
        "            net_cash_flow_from_operating_",
        "                d.get(\"net_cash_flow_",
        "       ",
        "            net_cash_flow_from_operating_a",
        "                d.get(\"net_cash_flow_f",
        "       ",
        "            net_cash_flow_from_inves",
        "                d.get(\"net_cash_",
        "       ",
        "            net_cash_flow_from_investing_",
        "                d.get(\"net_cash_flow_",
        "       ",
        "            net_cash_flow_from_investing_a",
        "                d.get(\"net_cash_flow_f",
        "       ",
        "            net_cash_flow_from_finan",
        "                d.get(\"net_cash_",
        "       ",
        "            net_cash_flow_from_financing_",
        "                d.get(\"net_cash_flow_",
        "       ",
        "            net_cash_flow_from_financing_a",
        "                d.get(\"net_cash_flow_f",
        "       ",
        "            exchange_gains_losses=DataPoint",
        "            net_cash_flow=DataPoint",
        "            net_cash_flow_co",
        "                d.get(\"n",
        "       ",
        "            net_cash_flow_dis",
        "                d.get(\"ne",
        "       ",
        "    ",
        "@data",
        "@mode",
        "class Compreh",
        "    comprehensive_income_los",
        "    comprehensive_income_loss_attributab",
        "        ",
        "    ] ",
        "    comprehensive_income_loss_attributab",
        "    other_comprehensive_income_",
        "    other_comprehensive_income_loss_attribu",
        "        ",
        "    ] ",
        "    other_comprehensive_income_loss_attribu",
        "    @sta",
        "    def from_dict(d: Optional[Dict[s",
        "        ",
        "            return C",
        "        return Co",
        "            comprehensive_inc",
        "                d.get(\"co",
        "       ",
        "            comprehensive_income_loss_attributabl",
        "           ",
        "                    \"comprehensive_income_l",
        "        ",
        "       ",
        "            comprehensive_income_loss_at",
        "                d.get(\"comprehensive",
        "       ",
        "            other_comprehensive_",
        "                d.get(\"other",
        "       ",
        "            other_comprehensive_income_loss_attribut",
        "           ",
        "                    \"other_comprehensive_incom",
        "        ",
        "       ",
        "            other_comprehensive_income_loss",
        "                d.get(\"other_comprehens",
        "       ",
        "    ",
        "@data",
        "@mode",
        "class Incom",
        "    revenues: Option",
        "    benefits_costs_expenses",
        "    cost_of_revenue: Op",
        "    cost_of_revenue_goods:",
        "    cost_of_revenue_services",
        "    costs_and_expenses: O",
        "    gross_profit: Opti",
        "    gain_loss_on_sale_properties_n",
        "    nonoperating_income_loss",
        "    operating_expenses: O",
        "    selling_general_and_administrativ",
        "    depreciation_and_amortizat",
        "    research_and_development",
        "    other_operating_expenses",
        "    operating_income_loss:",
        "    other_operating_income_expe",
        "    income_loss_before_equity_method_i",
        "    income_loss_from_continuing_operatio",
        "    income_loss_from_continuing_operatio",
        "    income_loss_from_discontinued_operati",
        "    income_loss_from_discontinued_operations_net_of_tax_",
        "        ",
        "    ] ",
        "    income_loss_from_discontinued_operati",
        "        ",
        "    ] ",
        "    income_loss_from_discontinued_operations",
        "        ",
        "    ] ",
        "    income_loss_from_discontinued_operations_net_of",
        "        ",
        "    ] ",
        "    income_loss_from_equity_method_in",
        "    income_tax_expense_benefi",
        "    income_tax_expense_benefit_cu",
        "    income_tax_expense_benefit_de",
        "    interest_and_debt_expens",
        "    interest_and_dividend_income_op",
        "    interest_expense_operatin",
        "    interest_income_expense_after_provisi",
        "    interest_income_expense_operat",
        "    noninterest_expense: ",
        "    noninterest_income: O",
        "    provision_for_loan_lease_and_oth",
        "    net_income_loss: Op",
        "    net_income_loss_attributable_to_noncont",
        "    net_income_loss_attributable_to_nonred",
        "        ",
        "    ] ",
        "    net_income_loss_attributable_to",
        "    net_income_loss_attributable_to_rede",
        "        ",
        "    ] ",
        "    net_income_loss_available_to_common_sto",
        "    participating_securities_distributed",
        "        Optio",
        "    ) =",
        "    undistributed_earnings_loss_allocated_t",
        "        ",
        "    ] ",
        "    preferred_stock_dividends_and_other",
        "    basic_earnings_per_share",
        "    diluted_earnings_per_shar",
        "    basic_average_shares: ",
        "    diluted_average_shares:",
        "    common_stock_dividends:",
        "    @sta",
        "    def from_dict(d: Optional[Dict",
        "        ",
        "            return",
        "        return ",
        "            revenues=DataPoint",
        "            benefits_costs_e",
        "                d.get(\"b",
        "       ",
        "            cost_of_revenue=DataPoint",
        "            cost_of_revenue_goods=DataPoint",
        "            cost_of_revenue_",
        "                d.get(\"c",
        "       ",
        "            costs_and_expenses=DataPoint",
        "            gross_profit=DataPoint",
        "            gain_loss_on_sale_prop",
        "                d.get(\"gain_lo",
        "       ",
        "            nonoperating_inc",
        "                d.get(\"n",
        "       ",
        "            operating_expenses=DataPoint",
        "            selling_general_and_admini",
        "                d.get(\"selling_gen",
        "       ",
        "            depreciation_and_am",
        "                d.get(\"depr",
        "       ",
        "            research_and_dev",
        "                d.get(\"r",
        "       ",
        "            other_operating_",
        "                d.get(\"o",
        "       ",
        "            operating_income_loss=DataPoint",
        "            other_operating_inco",
        "                d.get(\"other",
        "       ",
        "            income_loss_before_equity_",
        "                d.get(\"income_loss",
        "       ",
        "            income_loss_from_continuing_",
        "                d.get(\"income_loss_f",
        "       ",
        "            income_loss_from_continuing_o",
        "                d.get(\"income_loss_fr",
        "       ",
        "            income_loss_from_discontinued_",
        "                d.get(\"income_loss_fro",
        "       ",
        "            income_loss_from_discontinued_operations_net_of_tax_a",
        "           ",
        "                    \"income_loss_from_discontinued_operation",
        "        ",
        "       ",
        "            income_loss_from_discontinued_operatio",
        "           ",
        "                    \"income_loss_from_discont",
        "        ",
        "       ",
        "            income_loss_from_discontinued_operations_",
        "           ",
        "                    \"income_loss_from_discontin",
        "        ",
        "       ",
        "            income_loss_from_discontinued_operations_net_of_",
        "           ",
        "                    \"income_loss_from_discontinued_ope",
        "        ",
        "       ",
        "            income_loss_from_equity_m",
        "                d.get(\"income_los",
        "       ",
        "            income_tax_expens",
        "                d.get(\"in",
        "       ",
        "            income_tax_expense_be",
        "                d.get(\"income",
        "       ",
        "            income_tax_expense_ben",
        "                d.get(\"income_",
        "       ",
        "            interest_and_debt",
        "                d.get(\"in",
        "       ",
        "            interest_and_dividend_i",
        "                d.get(\"interest",
        "       ",
        "            interest_expense_",
        "                d.get(\"in",
        "       ",
        "            interest_income_expense_after",
        "                d.get(\"interest_incom",
        "       ",
        "            interest_income_expense",
        "                d.get(\"interest",
        "       ",
        "            noninterest_expense=DataPoint",
        "            noninterest_income=DataPoint",
        "            provision_for_loan_lease_",
        "                d.get(\"provision_",
        "       ",
        "            net_income_loss=DataPoint",
        "            net_income_loss_attributable_to_",
        "                d.get(\"net_income_loss_a",
        "       ",
        "            net_income_loss_attributable_to_nonrede",
        "           ",
        "                    \"net_income_loss_attribut",
        "        ",
        "       ",
        "            net_income_loss_attribu",
        "                d.get(\"net_inco",
        "       ",
        "            net_income_loss_attributable_to_redee",
        "           ",
        "                    \"net_income_loss_attribu",
        "        ",
        "       ",
        "            net_income_loss_available_to_co",
        "                d.get(\"net_income_loss_",
        "       ",
        "            participating_securities_distributed_and_",
        "           ",
        "                    \"participating_securities_di",
        "        ",
        "       ",
        "            undistributed_earnings_loss_allocated_to",
        "           ",
        "                    \"undistributed_earnings_lo",
        "        ",
        "       ",
        "            preferred_stock_dividends_an",
        "                d.get(\"preferred_sto",
        "       ",
        "            basic_earnings_p",
        "                d.get(\"b",
        "       ",
        "            diluted_earnings_",
        "                d.get(\"di",
        "       ",
        "            basic_average_shares=DataPoint",
        "            diluted_average_shares=DataPoint",
        "            common_stock_dividends=DataPoint",
        "    ",
        "@data",
        "@mode",
        "class Fi",
        "  ",
        "    balance_sheet: Optio",
        "    cash_flow_statement: Opti",
        "    comprehensive_income: Optio",
        "    income_statement: Optio",
        "    @sta",
        "    def from_dict(d: Optional[D",
        "        ",
        "            ret",
        "        retur",
        "            balance_sheet=BalanceShe",
        "            cash_flow_statemen",
        "                d.get(",
        "       ",
        "            comprehensive_incom",
        "                d.get(",
        "       ",
        "            income_statement=IncomeStatem",
        "    ",
        "@data",
        "@mode",
        "class Stoc",
        "  ",
        "    cik: Optio",
        "    company_name: O",
        "    end_date: Opt",
        "    filing_date: O",
        "    financials: Optio",
        "    fiscal_period: ",
        "    fiscal_year: O",
        "    source_filing_file_u",
        "    source_filing_url",
        "    start_date: Op",
        "    @sta",
        "    def from_dict(d: Optional[Dic",
        "        ",
        "            retur",
        "        return ",
        "            ci",
        "            company_nam",
        "            end_dat",
        "            filing_dat",
        "            financials=Financials.",
        "            fiscal_perio",
        "            fiscal_yea",
        "            source_filing_file_ur",
        "            source_filing_ur",
        "            start_dat",
        "    ",
        "from sqlite3 i",
        "from typing import Option",
        "from ...modelclass",
        "from .aggs",
        "@mode",
        "class Indi",
        "    \"Contains one datum for in",
        "    timestamp: Op",
        "    value: Optio",
        "    @sta",
        "    def fr",
        "        return ",
        "            timestamp=d",
        "            value=d",
        "    ",
        "@mode",
        "class MACDIn",
        "    \"Contains one datu",
        "    timestamp: Op",
        "    value: Optio",
        "    signal: Optio",
        "    histogram: Opt",
        "    @sta",
        "    def fr",
        "        return MA",
        "            timestamp=d",
        "            value=d",
        "            signal=d",
        "            histogram=d",
        "    ",
        "@mode",
        "class Indicat",
        "    \"Contains the URL to call to get th",
        "    url: Optio",
        "    aggregates: Optio",
        "    @sta",
        "    def fr",
        "        return In",
        "            url=d",
        "            aggregates=[Agg.from_dict",
        "    ",
        "@mode",
        "class SingleIn",
        "    \"Contains indicator",
        "    values: Optional[Lis",
        "    underlying: Optional[I",
        "    @sta",
        "    def fr",
        "        return Sing",
        "            values=[IndicatorValue.from_",
        "            underlying=IndicatorUnderlyi",
        "    ",
        "SMAIndicatorResults = ",
        "EMAIndicatorResults = ",
        "RSIIndicatorResults = ",
        "@mode",
        "class MACDInd",
        "    \"Contains indicator",
        "    values: Optional[List[",
        "    underlying: Optional[I",
        "    @sta",
        "    def fr",
        "        return MAC",
        "            values=[MACDIndicatorValue.fro",
        "            underlying=IndicatorUnderlyi",
        "    ",
        "from typing i",
        "from ...modelclass",
        "@mode",
        "class Marke",
        "    \"Contains currenc",
        "    crypto: Opti",
        "    fx: Option",
        "    @sta",
        "    def fr",
        "        return Mar",
        "@mode",
        "class Marke",
        "    \"Contains exchang",
        "    nasdaq: Opti",
        "    nyse: Optio",
        "    otc: Optio",
        "    @sta",
        "    def fr",
        "        return Ma",
        "@mode",
        "class Mark",
        "    \"Contains indices",
        "    s_and_p: Opt",
        "    societe_generale:",
        "    cgi: Optio",
        "    msci: Optio",
        "    ftse_russell: O",
        "    mstar: Opti",
        "    mstarc: Opti",
        "    cccy: Optio",
        "    nasdaq: Opti",
        "    dow_jones: Op",
        "    @sta",
        "    def fr",
        "        return M",
        "@mode",
        "class Mark",
        "    \"MarketHoliday contains data for upcoming",
        "    close: Opti",
        "    date: Optio",
        "    exchange: Opt",
        "    name: Optio",
        "    open: Optio",
        "    status: Opti",
        "    @sta",
        "    def fr",
        "        return M",
        "@mode",
        "class Mar",
        "    \"MarketStatus contains data for the current trading",
        "    after_hours: Op",
        "    currencies: Optional",
        "    early_hours: Op",
        "    exchanges: Optional",
        "    indicesGroups: Optio",
        "    market: Opti",
        "    server_time: O",
        "    @sta",
        "    def fr",
        "        return",
        "            after_hours=d",
        "            ",
        "          ",
        "                if \"",
        "                else MarketCurre",
        "       ",
        "            early_hours=d",
        "           ",
        "          ",
        "                if ",
        "                else MarketExch",
        "       ",
        "            i",
        "          ",
        "                if \"i",
        "                else MarketIndic",
        "       ",
        "            market=d",
        "            server_time=d",
        "    ",
        "from typing impo",
        "from ...modelclass",
        "@mode",
        "class ",
        "    \"Quote contains quote data ",
        "    ask_exchange: O",
        "    ask_price: Opt",
        "    ask_size: Opti",
        "    bid_exchange: O",
        "    bid_price: Opt",
        "    bid_size: Opti",
        "    conditions: Optio",
        "    indicators: Optio",
        "    participant_timesta",
        "    sequence_number:",
        "    sip_timestamp: ",
        "    tape: Optio",
        "    trf_timestamp: ",
        "    @sta",
        "    def fr",
        "        retu",
        "@mode",
        "class La",
        "    \"LastQuote contains data for the most r",
        "    ticker: Opti",
        "    trf_timestamp: ",
        "    sequence_number:",
        "    sip_timestamp: ",
        "    participant_timesta",
        "    ask_price: Opt",
        "    ask_size: Opt",
        "    ask_exchange: O",
        "    conditions: Optio",
        "    indicators: Optio",
        "    bid_price: Opt",
        "    bid_size: Opt",
        "    bid_exchange: O",
        "    tape: Optio",
        "    @sta",
        "    def fr",
        "        retu",
        "            ticker",
        "            trf_times",
        "            sequence_n",
        "            sip_times",
        "            participant_t",
        "            ask_pri",
        "            ask_siz",
        "            ask_excha",
        "            conditio",
        "            indicato",
        "            bid_pri",
        "            bid_siz",
        "            bid_excha",
        "            tape=",
        "    ",
        "@mode",
        "class Fo",
        "    \"Contains data ",
        "    ask: Option",
        "    bid: Option",
        "    exchange: Opt",
        "    timestamp: Op",
        "    @sta",
        "    def fr",
        "        return ",
        "@mode",
        "class Last",
        "    \"ForexLastQuote contains data for the ",
        "    last: Optional",
        "    symbol: Opti",
        "    @sta",
        "    def fr",
        "        return ",
        "            last=None if \"last\" not in ",
        "            symbol=d",
        "    ",
        "@mode",
        "class RealTimeCu",
        "    \"RealTimeCurrencyConversion contains data for curren",
        "    converted: Opt",
        "    from_: Opti",
        "    initial_amount: O",
        "    last: Optional",
        "    to: Option",
        "    @sta",
        "    def fr",
        "        return RealTi",
        "            converted=d",
        "            from_=d",
        "            initial_amount=d",
        "            last=None if \"last\" not in ",
        "            to=d",
        "    ",
        "from typing impo",
        "X_POLYGON_EDGE_ID =",
        "X_POLYGON_EDGE_IP_ADDRESS =",
        "X_POLYGON_EDGE_USER_AGENT =",
        "HEADER =",
        "class Request",
        "    def ",
        "      ",
        "        edge_id: Op",
        "        edge_ip_address",
        "        edge_user: O",
        "   ",
        "    ",
        "        self.headers: Opti",
        "        if edge_id is not None ",
        "            sel",
        "                edge_id=edge_id, edge_ip_a",
        "      ",
        "    def ed",
        "      ",
        "        ed",
        "        edge_i",
        "        edge_user: O",
        "    ) -> \"Reques",
        "    ",
        "        edge_headers",
        "            X_POLYG",
        "            X_POLYGON_EDGE_",
        "    ",
        "        if edge_",
        "            edge_headers[X_POLY",
        "        self._add_to_edg",
        "        r",
        "    def updat",
        "      ",
        "        edge_id: Op",
        "        edge_ip_address",
        "        edge_user: O",
        "    ) -> \"Reques",
        "    ",
        "        if self.",
        "            raise ",
        "                \"must set required fi",
        "      ",
        "        edge_headers",
        "        if edge",
        "            edge_headers[X",
        "        if edge_ip_",
        "            edge_headers[X_POLYGON",
        "        if edge_",
        "            edge_headers[X_POLY",
        "        self._add_to_edg",
        "        r",
        "    def _add_to_edge_he",
        "        if self.",
        "            se",
        "        for k, v i",
        "            sel",
        "class RequestOptio",
        "from typing import ",
        "from .aggs",
        "from .quotes i",
        "from .trades i",
        "from ...modelclass",
        "@mode",
        "class Minu",
        "    \"Most rece",
        "    accumulated_volume:",
        "    open: Option",
        "    high: Option",
        "    low: Option",
        "    close: Optio",
        "    volume: Optio",
        "    vwap: Option",
        "    otc: Option",
        "    timestamp: Op",
        "    transactions: O",
        "    @sta",
        "    def fr",
        "        return ",
        "            d.g",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.g",
        "            d.g",
        "            d.",
        "            d.",
        "    ",
        "@mode",
        "class Indi",
        "    \"Contains data for the most rece",
        "    change: Optio",
        "    change_percent: O",
        "    close: Optio",
        "    high: Option",
        "    low: Option",
        "    open: Option",
        "    previous_close: O",
        "    @sta",
        "    def fr",
        "        return In",
        "@mode",
        "class Indic",
        "    value: Optio",
        "    name: Optio",
        "    type: Optio",
        "    ticker: Opti",
        "    market_status: ",
        "    session: Optional[",
        "    error: Opti",
        "    message: Opt",
        "    @sta",
        "    def fr",
        "        return ",
        "            value=d",
        "            name=d",
        "            type=d",
        "            ticker=d",
        "            market_status=d",
        "          ",
        "                None if \"session\" not in d ",
        "       ",
        "            error=d",
        "            message=d",
        "    ",
        "@mode",
        "class Tick",
        "    \"Contains the most up-to-date mark",
        "    day: Optio",
        "    last_quote: Optio",
        "    last_trade: Optio",
        "    min: Optional[Mi",
        "    prev_day: Opt",
        "    ticker: Opti",
        "    todays_change: O",
        "    todays_change_percen",
        "    updated: Opt",
        "    fair_market_value:",
        "    @sta",
        "    def fr",
        "        return ",
        "            day=None if \"day\" not ",
        "            ",
        "                None if \"lastQuote\" not in",
        "       ",
        "            ",
        "                None if \"lastTrade\" not in",
        "       ",
        "            min=None if \"min\" not in d ",
        "            prev_day=None if \"prevDay\" n",
        "            ticker=d",
        "            todays_change=d",
        "            todays_change_percent",
        "            updated=d",
        "            fair_market_",
        "    ",
        "@mode",
        "class DayOptionC",
        "    \"Contains data for the most rece",
        "    change: Optio",
        "    change_percent: O",
        "    close: Optio",
        "    high: Option",
        "    last_updated: O",
        "    low: Option",
        "    open: Option",
        "    previous_close: O",
        "    volume: Optio",
        "    vwap: Option",
        "    @sta",
        "    def fr",
        "        return DayOpti",
        "@mode",
        "class Opti",
        "    \"Contains details f",
        "    contract_type: ",
        "    exercise_style: ",
        "    expiration_date:",
        "    shares_per_contract",
        "    strike_price: Op",
        "    ticker: Opti",
        "    @sta",
        "    def fr",
        "        return O",
        "@mode",
        "class LastQuoteOpti",
        "    \"Contains data for the most re",
        "    ask: Option",
        "    ask_size: Opti",
        "    bid: Option",
        "    bid_size: Opti",
        "    last_updated: O",
        "    midpoint: Opti",
        "    timeframe: Op",
        "    @sta",
        "    def fr",
        "        return LastQuoteO",
        "@mode",
        "class LastTradeOpti",
        "    \"Contains data for the most rec",
        "    price: Optio",
        "    sip_timestamp: ",
        "    size: Optio",
        "    conditions: Optio",
        "    exchange: Opt",
        "    timeframe: Op",
        "    @sta",
        "    def fr",
        "        return LastTradeO",
        "@mode",
        "class ",
        "    \"Contains data for the gr",
        "    delta: Optio",
        "    gamma: Optio",
        "    theta: Optio",
        "    vega: Option",
        "    @sta",
        "    def fr",
        "        retur",
        "@mode",
        "class Under",
        "    \"Contains data for the underly",
        "    change_to_break_even",
        "    last_updated: O",
        "    price: Optio",
        "    value: Optio",
        "    ticker: Opti",
        "    timeframe: Op",
        "    @sta",
        "    def fr",
        "        return Un",
        "@mode",
        "class OptionCo",
        "    \"Contains data for the snapshot of",
        "    break_even_price: ",
        "    day: Optional[DayOpti",
        "    details: Optional",
        "    greeks: Optio",
        "    implied_volatility:",
        "    last_quote: Optional[LastQuo",
        "    last_trade: Optional[LastTra",
        "    open_interest: O",
        "    underlying_asset: Optio",
        "    fair_market_value:",
        "    @sta",
        "    def fr",
        "        return Opti",
        "            break_even_price=d",
        "        ",
        "          ",
        "                ",
        "                else DayOptionCon",
        "       ",
        "          ",
        "                None if \"details\" not in d",
        "       ",
        "            greeks=None if \"greeks\" not ",
        "            implied_volatility=d",
        "            ",
        "          ",
        "                if \"",
        "                else LastQuoteOptionCon",
        "       ",
        "            ",
        "          ",
        "                if \"",
        "                else LastTradeOptionCon",
        "       ",
        "            open_interest=d",
        "            und",
        "          ",
        "                if \"und",
        "                else UnderlyingAss",
        "       ",
        "            fair_market_",
        "    ",
        "@mode",
        "class Orde",
        "    \"Contains data fo",
        "    price: Optio",
        "    exchange_shares: Option",
        "    @sta",
        "    def fr",
        "        return ",
        "            d.",
        "            d.",
        "    ",
        "@mode",
        "class Snapshot",
        "    \"Contains the current level 2 book of a single ticke",
        "    ticker: Opti",
        "    bids: Optional[List",
        "    asks: Optional[List",
        "    bid_count: Opt",
        "    ask_count: Opt",
        "    spread: Optio",
        "    updated: Opt",
        "    @sta",
        "    def fr",
        "        return Snap",
        "            ticker=d",
        "         ",
        "          ",
        "                i",
        "                else [OrderBookQuo",
        "       ",
        "         ",
        "          ",
        "                i",
        "                else [OrderBookQuo",
        "       ",
        "            bid_count=d",
        "            ask_count=d",
        "            spread=d",
        "            updated=d",
        "    ",
        "@mode",
        "class Universal",
        "  ",
        "    price: Optio",
        "    change: Optio",
        "    change_percent: O",
        "    early_trading_change",
        "    early_trading_change_per",
        "    regular_trading_chang",
        "    regular_trading_change_pe",
        "    late_trading_change",
        "    late_trading_change_per",
        "    open: Option",
        "    close: Optio",
        "    high: Option",
        "    low: Option",
        "    previous_close: O",
        "    volume: Optio",
        "    @sta",
        "    def fr",
        "        return Univers",
        "@mode",
        "class UniversalS",
        "  ",
        "    ask: Option",
        "    ask_size: Opti",
        "    bid: Option",
        "    bid_size: Opti",
        "    midpoint: Opti",
        "    exchange: Opt",
        "    timeframe: Op",
        "    last_updated: O",
        "    @sta",
        "    def fr",
        "        return Universa",
        "@mode",
        "class UniversalS",
        "  ",
        "    id: Option",
        "    price: Optio",
        "    size: Optio",
        "    exchange: Opt",
        "    conditions: Optio",
        "    timeframe: Op",
        "    last_updated: O",
        "    participant_timesta",
        "    sip_timestamp: ",
        "    @sta",
        "    def fr",
        "        return Universa",
        "@mode",
        "class UniversalSnap",
        "  ",
        "    ticker: Opti",
        "    price: Optio",
        "    value: Optio",
        "    change_to_break_even",
        "    timeframe: Op",
        "    last_updated: O",
        "    @sta",
        "    def fr",
        "        return UniversalSn",
        "@mode",
        "class Universal",
        "  ",
        "    contract_type: ",
        "    exercise_style: ",
        "    expiration_date:",
        "    shares_per_contract",
        "    strike_price: Op",
        "    @sta",
        "    def fr",
        "        return Univers",
        "@mode",
        "class Univer",
        "  ",
        "    ticker: Opti",
        "    type: Optio",
        "    session: Optional[Unive",
        "    last_quote: Optional[Univ",
        "    last_trade: Optional[Univ",
        "    greeks: Optio",
        "    underlying_asset: Optional[Univ",
        "    details: Optional[Unive",
        "    break_even_price: ",
        "    implied_volatility:",
        "    open_interest: O",
        "    market_status: ",
        "    name: Optio",
        "    fair_market_value:",
        "    error: Opti",
        "    message: Opt",
        "    @sta",
        "    def fr",
        "        return U",
        "            ticker=d",
        "            type=d",
        "          ",
        "          ",
        "                if",
        "                else UniversalSnap",
        "       ",
        "            ",
        "          ",
        "                if \"",
        "                else UniversalSnapsho",
        "       ",
        "            ",
        "          ",
        "                if \"",
        "                else UniversalSnapsho",
        "       ",
        "            greeks=None if \"greeks\" not ",
        "            und",
        "          ",
        "                if \"und",
        "                else UniversalSnapshotUnder",
        "       ",
        "          ",
        "          ",
        "                if",
        "                else UniversalSnap",
        "       ",
        "            break_even_price=d",
        "            implied_volatility=d",
        "            open_interest=d",
        "            market_status=d",
        "            name=d",
        "            fair_market_",
        "            error=d",
        "            message=d",
        "    ",
        "from typing i",
        "from ...modelclass",
        "@mode",
        "class ",
        "    \"Split contains data for a historical stock split, including the t",
        "    id: Option",
        "    execution_date: ",
        "    split_from: Op",
        "    split_to: Opt",
        "    ticker: Opti",
        "    @sta",
        "    def fr",
        "        retu",
        "from sqlite3 i",
        "from typing i",
        "from ...modelclass",
        "from .tickers ",
        "@mode",
        "class S",
        "    \"Contains Session data ",
        "    change: Optio",
        "    change_percent: O",
        "    early_trading_change",
        "    early_trading_change_per",
        "    late_trading_change",
        "    late_trading_change_per",
        "    close: Optio",
        "    high: Option",
        "    low: Option",
        "    open: Option",
        "    previous_close: O",
        "    volume: Optio",
        "    @sta",
        "    def fr",
        "        retur",
        "@mode",
        "class O",
        "    \"Contains options data ",
        "    contract_type: ",
        "    exercise_style: ",
        "    expiration_date:",
        "    shares_per_contract",
        "    strike_price: Op",
        "    underlying_ticker:",
        "    @sta",
        "    def fr",
        "        retur",
        "@mode",
        "class Summ",
        "    \"Contains summary result",
        "    price: Optio",
        "    name: Optio",
        "    ticker: Opti",
        "    branding: Optio",
        "    market_status: ",
        "    last_updated: O",
        "    type: Optio",
        "    session: Optio",
        "    options: Optio",
        "    error: Opti",
        "    message: Opt",
        "    @sta",
        "    def fr",
        "        return",
        "            price=d",
        "            name=d",
        "            ticker=d",
        "            branding=None if \"branding\" not ",
        "            market_status=d",
        "            last_updated=d",
        "            type=d",
        "            session=None if \"session\" not ",
        "            options=None if \"options\" not ",
        "            error=d",
        "            message=d",
        "    ",
        "from typing impo",
        "from ...modelclass",
        "@mode",
        "class Comp",
        "    \"Contains address da",
        "    address1: Opt",
        "    address2: Opt",
        "    city: Optio",
        "    state: Opti",
        "    country: Opt",
        "    postal_code: O",
        "    @sta",
        "    def fr",
        "        return Co",
        "@mode",
        "class B",
        "    \"Contains branding d",
        "    icon_url: Opt",
        "    logo_url: Opt",
        "    accent_color: O",
        "    light_color: O",
        "    dark_color: Op",
        "    @sta",
        "    def fr",
        "        return",
        "@mode",
        "class I",
        "    \"Contains the insight",
        "    sentiment: Op",
        "    sentiment_reasonin",
        "    ticker: Opti",
        "    @sta",
        "    def fr",
        "        retur",
        "@mode",
        "class Pu",
        "    \"Contains publisher",
        "    favicon_url: O",
        "    homepage_url: O",
        "    logo_url: Opt",
        "    name: Optio",
        "    @sta",
        "    def fr",
        "        return",
        "@mode",
        "class ",
        "    \"Ticker contains data fo",
        "    active: Opti",
        "    cik: Optio",
        "    composite_figi: ",
        "    currency_name: ",
        "    currency_symbol:",
        "    base_currency_symbo",
        "    base_currency_name",
        "    delisted_utc: O",
        "    last_updated_utc:",
        "    locale: Opti",
        "    market: Opti",
        "    name: Optio",
        "    primary_exchange:",
        "    share_class_figi:",
        "    ticker: Opti",
        "    type: Optio",
        "    source_feed: O",
        "    @sta",
        "    def fr",
        "        retur",
        "@mode",
        "class Tick",
        "    \"TickerDetails contains data",
        "    active: Opti",
        "    address: Optional[",
        "    branding: Optio",
        "    cik: Optio",
        "    composite_figi: ",
        "    currency_name: ",
        "    currency_symbol:",
        "    base_currency_name",
        "    base_currency_symbo",
        "    delisted_utc: O",
        "    description: O",
        "    ticker_root: O",
        "    ticker_suffix: ",
        "    homepage_url: O",
        "    list_date: Op",
        "    locale: Opti",
        "    market: Opti",
        "    market_cap: Opt",
        "    name: Optio",
        "    phone_number: O",
        "    primary_exchange:",
        "    share_class_figi:",
        "    share_class_shares_outst",
        "    sic_code: Opt",
        "    sic_description:",
        "    ticker: Opti",
        "    total_employees:",
        "    type: Optio",
        "    weighted_shares_outsta",
        "    @sta",
        "    def fr",
        "        return",
        "            active=d",
        "          ",
        "                None if \"address\" not in d ",
        "       ",
        "            branding=None if \"branding\" not ",
        "            cik=d",
        "            composite_figi=d",
        "            currency_name=d",
        "            currency_symbol=d",
        "            base_currency_name=d",
        "            base_currency_symbol=d",
        "            delisted_utc=d",
        "            description=d",
        "            ticker_root=d",
        "            ticker_suffix=d",
        "            homepage_url=d",
        "            list_date=d",
        "            locale=d",
        "            market=d",
        "            market_cap=d",
        "            name=d",
        "            phone_number=d",
        "            primary_exchange=d",
        "            share_class_figi=d",
        "            share_class_",
        "                \"share_clas",
        "       ",
        "            sic_code=d",
        "            sic_description=d",
        "            ticker=d",
        "            total_employees=d",
        "            type=d",
        "            weighted_shares_outstanding=d",
        "    ",
        "@mode",
        "class Ti",
        "    \"TickerDetails contains data for news a",
        "    amp_url: Opt",
        "    article_url: O",
        "    author: Opti",
        "    description: O",
        "    id: Option",
        "    image_url: Op",
        "    insights: Optional",
        "    keywords: Option",
        "    published_utc: ",
        "    publisher: Optio",
        "    tickers: Option",
        "    title: Opti",
        "    @sta",
        "    def fr",
        "        retur",
        "            amp_url=d",
        "            article_url=d",
        "            author=d",
        "            description=d",
        "            id=d",
        "            image_url=d",
        "           ",
        "                [Insight.from_dict(i",
        "                i",
        "            ",
        "       ",
        "            keywords=d",
        "            published_utc=d",
        "           ",
        "                None if \"publisher\" not in",
        "       ",
        "            tickers=d",
        "            title=d",
        "    ",
        "@mode",
        "class Tic",
        "    \"TickerTypes contain",
        "    asset_class: O",
        "    code: Optio",
        "    description: O",
        "    locale: Opti",
        "    @sta",
        "    def fr",
        "        return ",
        "@mode",
        "class Rela",
        "  ",
        "    ticker: Opti",
        "    @sta",
        "    def fr",
        "        return ",
        "            ticker=d",
        "    ",
        "@mode",
        "class Tic",
        "    tic",
        "    @sta",
        "    def fr",
        "        return T",
        "@mode",
        "class Ticker",
        "    ty",
        "    da",
        "    ticker_chan",
        "    @sta",
        "    def fr",
        "        return Tic",
        "@mode",
        "class TickerC",
        "    na",
        "    composi",
        "    ci",
        "    events: Optional[List[",
        "    @sta",
        "    def fr",
        "        return Tick",
        "from typing i",
        "from ...modelclass",
        "@mode",
        "class IP",
        "  ",
        "    announced_date: ",
        "    currency_code: ",
        "    final_issue_price:",
        "    highest_offer_price",
        "    ipo_status: Op",
        "    isin: Optio",
        "    issuer_name: O",
        "    last_updated: O",
        "    listing_date: O",
        "    lot_size: Opt",
        "    lowest_offer_price:",
        "    max_shares_offered",
        "    min_shares_offered",
        "    primary_exchange:",
        "    security_descriptio",
        "    security_type: ",
        "    shares_outstanding",
        "    ticker: Opti",
        "    total_offer_size: ",
        "    us_code: Opt",
        "    @sta",
        "    def fr",
        "        retur",
        "            announced_dat",
        "            currency_cod",
        "            final_issue_pric",
        "            highest_offer_pric",
        "            ipo_statu",
        "            isi",
        "            issuer_nam",
        "            last_update",
        "            listing_dat",
        "            lot_siz",
        "            lowest_offer_pric",
        "            max_shares_offere",
        "            min_shares_offere",
        "            primary_exchang",
        "            security_descriptio",
        "            security_typ",
        "            shares_outstandin",
        "            ticke",
        "            total_offer_siz",
        "            us_cod",
        "    ",
        "from typing impo",
        "from ...modelclass",
        "@mode",
        "class ",
        "    \"Trade contains trade data ",
        "    conditions: Optio",
        "    correction: Op",
        "    exchange: Opt",
        "    id: Option",
        "    participant_timesta",
        "    price: Optio",
        "    sequence_number:",
        "    sip_timestamp: ",
        "    size: Option",
        "    tape: Optio",
        "    trf_id: Opti",
        "    trf_timestamp: ",
        "    @sta",
        "    def fr",
        "        retu",
        "@mode",
        "class La",
        "    \"Contains data for the most rece",
        "    ticker: Opti",
        "    trf_timestamp: ",
        "    sequence_number: ",
        "    sip_timestamp: ",
        "    participant_timesta",
        "    conditions: Optio",
        "    correction: Op",
        "    id: Option",
        "    price: Optio",
        "    trf_id: Opti",
        "    size: Option",
        "    exchange: Opt",
        "    tape: Optio",
        "    @sta",
        "    def fr",
        "        retu",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "    ",
        "@mode",
        "class Cry",
        "    \"Contains data ",
        "    conditions: Optio",
        "    exchange: Opt",
        "    price: Optio",
        "    size: Option",
        "    timestamp: Op",
        "    @sta",
        "    def fr",
        "        return ",
        "from .agg",
        "from .comm",
        "from .condit",
        "from .contra",
        "from .divide",
        "from .exchan",
        "from .financ",
        "from .indica",
        "from .marke",
        "from .quot",
        "from .snaps",
        "from .spli",
        "from .ticke",
        "from .trad",
        "from .summar",
        "impo",
        "from enum ",
        "from typing import Optional, Union,",
        "import ",
        "impor",
        "import ",
        "impor",
        "import ",
        "from .mode",
        "from websockets.client import c",
        "from websockets.exceptions import Con",
        "from ..logging i",
        "import ",
        "from ..exceptions",
        "env_key = \"PO",
        "logger = get_logger",
        "class WebSo",
        "    def ",
        "      ",
        "        api_key: Optional[",
        "        feed: Union[str",
        "        market: Union[str",
        "        raw: ",
        "        verbose",
        "        subscriptions: Op",
        "        max_reconnect",
        "        secure",
        "        custom_json: ",
        "        ",
        "   ",
        "    ",
        "        if ap",
        "            ra",
        "                f\"Must specify env var {",
        "      ",
        "        self.ap",
        "        self",
        "        self.m",
        "        sel",
        "        i",
        "            logger.se",
        "        self.webs",
        "        if isinst",
        "            fe",
        "        if isinsta",
        "            mark",
        "        self.url = f\"ws{'s' if s",
        "        self.su",
        "        self.subs",
        "        self.max_recon",
        "        self.websocket: Optional",
        "        if subsc",
        "            sub",
        "        self.scheduled_subs: ",
        "        self.sche",
        "        if ",
        "            self.",
        "      ",
        "            se",
        "  ",
        "    async d",
        "      ",
        "        proc",
        "            Callable[[List[We",
        "            Callable[[Unio",
        "     ",
        "        close_t",
        "        ",
        "   ",
        "    ",
        "        rec",
        "        logger.debug(\"",
        "    ",
        "        ssl_c",
        "        if self.url.",
        "            ssl_context = ssl.SS",
        "            ssl_context.load_ve",
        "        async f",
        "            self.url, close_timeout=cl",
        "     ",
        "            sel",
        "        ",
        "                ms",
        "                logger.de",
        "                logge",
        "              ",
        "                    self.json.dumps({\"a",
        "        ",
        "                auth",
        "                auth_msg_pars",
        "                logger.deb",
        "                if auth_msg_pars",
        "                    raise AuthErr",
        "             ",
        "                    i",
        "                  ",
        "                            \"reconciling",
        "            ",
        "                        new_subs = sel",
        "                        awa",
        "                        old_subs = sel",
        "                        awai",
        "                        sel",
        "                        self.s",
        "                        s",
        "            ",
        "                        cmsg: Union[List[",
        "                            await a",
        "            ",
        "                    exce",
        "                ",
        "                  ",
        "            ",
        "                        msgJ",
        "                    ",
        "                         ",
        "                                logg",
        "                    ",
        "                        cm",
        "                  ",
        "                       ",
        "            except Co",
        "                logger.debug(\"",
        "           ",
        "            except Conn",
        "                logger.debug(\"c",
        "               ",
        "                self.sched",
        "                ",
        "                self.",
        "                if self.max_reconnects is no",
        "             ",
        "            ",
        "    de",
        "      ",
        "        handl",
        "            Callable[[List",
        "            Callable[[Un",
        "     ",
        "        close_t",
        "        ",
        "   ",
        "    ",
        "        async def han",
        "            ha",
        "        asyncio.run(self.connect(handle",
        "    async def _subscribe(self, to",
        "        if self.websocket i",
        "         ",
        "        subs = ",
        "        logger.debug",
        "        await sel",
        "            self.json.dumps({\"acti",
        "    ",
        "    async def _unsubscribe(self, t",
        "        if self.websocket i",
        "         ",
        "        subs = ",
        "        logger.debug(",
        "        await sel",
        "            self.json.dumps({\"actio",
        "    ",
        "    @sta",
        "    def _parse_sub",
        "        s ",
        "        split = ",
        "        if le",
        "            logger.warning(",
        "            ret",
        "        re",
        "    def subscribe(self",
        "    ",
        "        for s i",
        "            topic, sym = s",
        "            if",
        "            ",
        "            logger.debu",
        "            self.sc",
        "      ",
        "            i",
        "                for ",
        "                    i",
        "                        sel",
        "        self.sche",
        "    def unsubscribe(sel",
        "    ",
        "        for s i",
        "            topic, sym = s",
        "            if",
        "            ",
        "            logger.debug",
        "            self.sche",
        "      ",
        "            i",
        "                for ",
        "                    i",
        "                        sel",
        "        self.sche",
        "    def unsubsc",
        "    ",
        "        self.sche",
        "        self.sche",
        "    async def",
        "    ",
        "        logger.",
        "        if se",
        "            await se",
        "            self",
        "      ",
        "            logger.warning(\"",
        "from enum ",
        "class Fe",
        "    Delayed = \"de",
        "    RealTime = \"s",
        "    Nasdaq = \"nasd",
        "    PolyFeed = \"po",
        "    PolyFeedPlus = \"po",
        "    StarterFeed = \"st",
        "    Launchpad = \"la",
        "    Business = \"bu",
        "    EdgxBusiness = \"ed",
        "    DelayedBusiness = \"de",
        "    DelayedEdgxBusiness = \"del",
        "    DelayedNasdaqLastSaleBusiness = \"dela",
        "    DelayedNasdaqBasic = \"delayed",
        "    DelayedFullMarketBusiness = \"del",
        "    FullMarketBusiness = \"fu",
        "    NasdaqLastSaleBusiness = \"nas",
        "    NasdaqBasicBusiness = \"nas",
        "class Mar",
        "    Stocks",
        "    Options",
        "    Forex",
        "    Crypto",
        "    Indices",
        "class Event",
        "    Equit",
        "    EquityA",
        "    Crypto",
        "    CryptoAg",
        "    Forex",
        "    ForexAg",
        "    Equity",
        "    CryptoT",
        "    Equity",
        "    ForexQ",
        "    CryptoQ",
        "    Imbalan",
        "    LimitUpLim",
        "    Crypto",
        "    Val",
        "  ",
        "    Launchpa",
        "    Launchpad",
        "  ",
        "    BusinessFairM",
        "from typing import Optio",
        "from .common i",
        "from ...modelclass",
        "@mode",
        "class Eq",
        "  ",
        "    event_type: Optional[Un",
        "    symbol: Opti",
        "    volume: Optio",
        "    accumulated_volume:",
        "    official_open_price",
        "    vwap: Option",
        "    open: Option",
        "    close: Optio",
        "    high: Option",
        "    low: Option",
        "    aggregate_vwap: O",
        "    average_size: Op",
        "    start_timestamp:",
        "    end_timestamp: ",
        "    otc: Option",
        "    @sta",
        "    def fr",
        "        retu",
        "            d.g",
        "            d.g",
        "            d.",
        "            d.g",
        "            d.g",
        "            d.g",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.g",
        "    ",
        "@mode",
        "class Cur",
        "    \"CurrencyAgg contains aggregate data for ",
        "    event_type: Optional[Un",
        "    pair: Optio",
        "    open: Option",
        "    close: Optio",
        "    high: Option",
        "    low: Option",
        "    volume: Optio",
        "    vwap: Option",
        "    start_timestamp:",
        "    end_timestamp: ",
        "    avg_trade_size: O",
        "    @sta",
        "    def fr",
        "        retur",
        "            d.g",
        "            d.ge",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.g",
        "            d.",
        "            d.",
        "            d.",
        "    ",
        "@mode",
        "class Equ",
        "    \"EquityTrade contains trade data for ",
        "    event_type: Optional[Un",
        "    symbol: Opti",
        "    exchange: Opt",
        "    id: Option",
        "    tape: Optio",
        "    price: Optio",
        "    size: Optio",
        "    conditions: Optio",
        "    timestamp: Op",
        "    sequence_number:",
        "    trf_id: Opti",
        "    trf_timestamp: ",
        "    @sta",
        "    def fr",
        "        retur",
        "            d.g",
        "            d.g",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.ge",
        "            d.ge",
        "    ",
        "@mode",
        "class Cry",
        "    \"CryptoTrade contains tr",
        "    event_type: Optional[Un",
        "    pair: Optio",
        "    exchange: Opt",
        "    id: Option",
        "    price: Optio",
        "    size: Option",
        "    conditions: Optio",
        "    timestamp: Op",
        "    received_timestamp",
        "    @sta",
        "    def fr",
        "        retur",
        "            d.g",
        "            d.ge",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "    ",
        "@mode",
        "class Equ",
        "    \"EquityQuote contains quote data for ",
        "    event_type: Optional[Un",
        "    symbol: Opti",
        "    bid_exchange_id:",
        "    bid_price: Opt",
        "    bid_size: Opt",
        "    ask_exchange_id:",
        "    ask_price: Opt",
        "    ask_size: Opt",
        "    condition: Op",
        "    indicators: Optio",
        "    timestamp: Op",
        "    tape: Optio",
        "    sequence_number:",
        "    trf_id: Opti",
        "    trf_timestamp: ",
        "    @sta",
        "    def fr",
        "        retur",
        "            d.g",
        "            d.g",
        "            d.g",
        "            d.g",
        "            d.g",
        "            d.g",
        "            d.g",
        "            d.g",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.ge",
        "            d.ge",
        "    ",
        "@mode",
        "class Fo",
        "    \"ForexQuote contains quote ",
        "    event_type: Optional[Un",
        "    pair: Optio",
        "    exchange_id: O",
        "    ask_price: Opt",
        "    bid_price: Opt",
        "    timestamp: Op",
        "    @sta",
        "    def fr",
        "        retur",
        "            d.g",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "    ",
        "@mode",
        "class Cry",
        "    \"CryptoQuote contains qu",
        "    event_type: Optional[Un",
        "    pair: Optio",
        "    bid_price: Op",
        "    bid_size: Opti",
        "    ask_price: Op",
        "    ask_size: Opt",
        "    timestamp: Opt",
        "    exchange_id: O",
        "    received_timestamp",
        "    @sta",
        "    def fr",
        "        retur",
        "            d.g",
        "            d.ge",
        "            d.g",
        "            d.g",
        "            d.g",
        "            d.g",
        "            d.",
        "            d.",
        "            d.",
        "    ",
        "@mode",
        "class Im",
        "    \"Imbalance contains imbalance event",
        "    event_type: Optional[Un",
        "    symbol: Opti",
        "    time_stamp: Op",
        "    auction_time: O",
        "    auction_type: O",
        "    symbol_sequence:",
        "    exchange_id: O",
        "    imbalance_quantity",
        "    paired_quantity:",
        "    book_clearing_price",
        "    @sta",
        "    def fr",
        "        retu",
        "            d.g",
        "            d.",
        "            d.",
        "            d.g",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "    ",
        "@mode",
        "class Limit",
        "    \"LimitUpLimitDown contains LULD even",
        "    event_type: Optional[Un",
        "    symbol: Opti",
        "    high_price: Opt",
        "    low_price: Opt",
        "    indicators: Optio",
        "    tape: Optio",
        "    timestamp: Op",
        "    sequence_number:",
        "    @sta",
        "    def fr",
        "        return L",
        "            d.g",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "    ",
        "@mode",
        "class Le",
        "    \"Level2Book contains level 2 b",
        "    event_type: Optional[Un",
        "    pair: Optio",
        "    bid_prices: Opt",
        "    ask_prices: Opt",
        "    timestamp: Op",
        "    exchange_id: O",
        "    received_timestamp",
        "    @sta",
        "    def fr",
        "        retur",
        "            d.g",
        "            d.ge",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "            d.",
        "    ",
        "@mode",
        "class In",
        "    event_type: Optional[Un",
        "    value: Optio",
        "    ticker: Opti",
        "    timestamp: Op",
        "    @sta",
        "    def fr",
        "        retur",
        "            d.g",
        "            d.g",
        "            d.",
        "            d.",
        "    ",
        "@mode",
        "class Laun",
        "    event_type: Optional[Un",
        "    value: Optio",
        "    symbol: Opti",
        "    timestamp: Op",
        "    @sta",
        "    def fr",
        "        return ",
        "            event_ty",
        "            value=",
        "            symbol=",
        "            timesta",
        "    ",
        "@mode",
        "class FairM",
        "    event_type: Optional[Un",
        "    fmv: Option",
        "    ticker: Opti",
        "    timestamp: Op",
        "    @sta",
        "    def fr",
        "        return ",
        "            event_ty",
        "            fmv=d",
        "            ticker=",
        "            timesta",
        "    ",
        "WebSocketMess",
        "    \"WebSoc",
        "    ",
        "       ",
        "           ",
        "            ",
        "            ",
        "            ",
        "            ",
        "           ",
        "            ",
        "           ",
        "            Li",
        "           ",
        "           ",
        "            L",
        "            Fa",
        "    ",
        "   ",
        "",
        "from typing impor",
        "from .comm",
        "from .mode",
        "import ",
        "def parse_single(da",
        "    event_typ",
        "    if event_type in [EventType.EquityA",
        "        return Equit",
        "    elif eve",
        "        EventType",
        "        EventType.",
        "        EventTyp",
        "        EventType.",
        "   ",
        "        return Curren",
        "    elif event_type == Ev",
        "        return Equity",
        "    elif event_type == Ev",
        "        return Crypto",
        "    elif event_type == Ev",
        "        return Equity",
        "    elif event_type == Ev",
        "        return Forex",
        "    elif event_type == Ev",
        "        return Crypto",
        "    elif event_type == Ev",
        "        return Imbal",
        "    elif event_type == Event",
        "        return LimitUpL",
        "    elif event_type == E",
        "        return Level",
        "    elif event_type ==",
        "        return Index",
        "    elif event_type == Even",
        "        return Launchp",
        "    elif event_type == EventTyp",
        "        return FairMark",
        "    ret",
        "def parse(msg: List[Dict[str, Any]], logger",
        "    re",
        "    for ",
        "        parsed =",
        "        if pa",
        "            if m[",
        "                logger.warning(",
        "      ",
        "            res",
        "    ret",
        "import ",
        "import ",
        "from mock_server im",
        "from typing",
        "from polygon.websocket ",
        "unittest.util._MA",
        "",
        "class BaseTest(unittest.",
        "    expected: List[W",
        "    co",
        "    def expectPro",
        "        self.assertEqual(msg",
        "        sel",
        "    def expectRes",
        "        self.exp",
        "    async def a",
        "        self.",
        "        loop = asyn",
        "        self.task = loop.cr",
        "    async def asy",
        "        self.",
        "from websockets",
        "import ",
        "impor",
        "port ",
        "subs =",
        "async def mock_s",
        "    await we",
        "        '[{\"ev\":\"status\",\"status\":\"connec",
        "  ",
        "    async for mes",
        "        message = ",
        "        if \"actio",
        "          ",
        "        if message[",
        "            awai",
        "                '[{\"ev\":\"status\",\"status\":",
        "      ",
        "        elif message[\"a",
        "            for p in mess",
        "             ",
        "                aw",
        "               ",
        "            ",
        "              ",
        "                       ",
        "                          ",
        "                                ",
        "              ",
        "            ",
        "          ",
        "        ",
        "                aw",
        "               ",
        "            ",
        "              ",
        "                     ",
        "                       ",
        "                      ",
        "                    ",
        "                      ",
        "                    ",
        "                       ",
        "                         ",
        "                      ",
        "                   ",
        "              ",
        "            ",
        "          ",
        "        ",
        "                aw",
        "               ",
        "            ",
        "              ",
        "                     ",
        "                       ",
        "                      ",
        "                    ",
        "                      ",
        "                   ",
        "                         ",
        "                         ",
        "                      ",
        "                   ",
        "               ",
        "              ",
        "                     ",
        "                       ",
        "                     ",
        "                   ",
        "                      ",
        "                    ",
        "                         ",
        "                      ",
        "                   ",
        "               ",
        "            ",
        "          ",
        "        ",
        "        elif message[\"ac",
        "            for p in mess",
        "               ",
        "                aw",
        "               ",
        "            ",
        "              ",
        "                       ",
        "                          ",
        "                                \"",
        "              ",
        "            ",
        "          ",
        "        ",
        "async def run_",
        "    async with serve(mock_",
        "        await as",
        "if __name__ =",
        "    asyncio.run(r",
        "from polygon impo",
        "from base_ws i",
        "from mock_server ",
        "import ",
        "from polygon.websock",
        "class WebSocket",
        "    async def t",
        "        c = We",
        "            api_key=\"\", feed=f\"localho",
        "    ",
        "        self.e",
        "      ",
        "              ",
        "                 ",
        "                 ",
        "                ",
        "               ",
        "             ",
        "                ",
        "              ",
        "                    ",
        "                    ti",
        "                    se",
        "        ",
        "      ",
        "    ",
        "        c.subs",
        "        def ",
        "            self.e",
        "        asyncio.get_event_loop(",
        "        self.e",
        "      ",
        "              ",
        "                 ",
        "                 ",
        "                ",
        "               ",
        "             ",
        "                ",
        "             ",
        "                    co",
        "                    ti",
        "                    se",
        "         ",
        "              ",
        "                 ",
        "                 ",
        "               ",
        "              ",
        "             ",
        "                ",
        "              ",
        "                  ",
        "                    ti",
        "                    se",
        "         ",
        "      ",
        "    ",
        "        c.subs",
        "        self.assert",
        "        c.uns",
        "        self.asser",
        "        c.sub",
        "        self.assert",
        "        c.unsu",
        "        self.asser",
        "        awa"
    ],
    "output": [
        "lib.request",
        "t json",
        "tps://api.polygon.io/openapi\").read()",
        "loads(contents)",
        "ps(parsed, indent=2)",
        "est.json\", \"w\") as f:",
        "(formatted)",
        "rt os",
        "t sys",
        "path.abspath(\"../..\"))",
        "h\", sys.path[0])",
        "KEY\"] = \"POLYGON_API_KEY\"",
        "",
        "gon-api-client\"",
        "22, Polygon.io\"",
        "Polygon.io\"",
        "",
        "= \"0.3.0\"",
        "",
        "",
        "",
        "",
        "ons = [",
        "ext.autodoc\",",
        "odoc_typehints\",",
        "_rtd_theme\",",
        "]",
        "",
        "= [\"_templates\"]",
        "",
        "",
        "",
        "tterns = []",
        "",
        "",
        "",
        "",
        "phinx_rtd_theme\"",
        "",
        "",
        "",
        "h = [\"_static\"]",
        "port RESTClient",
        "st import RequestOptionBuilder",
        "des_launchpad():",
        " RESTClient()",
        "  ",
        "onBuilder().edge_headers(",
        "s=\"EDGE_ID_ADDRESS\", edge_user=\"EDGE_USER\"",
        "  )",
        "des = []",
        "\"2022-04-04\", limit=5, options=options):",
        "es.append(t)",
        "t(trades)",
        "ain():",
        "ades_launchpad()",
        "= \"__main__\":",
        "ain()",
        "datetime",
        "rrent.futures",
        "logging",
        "port RESTClient",
        " signal",
        "t sys",
        " pickle",
        "4.frame  ",
        "",
        "",
        "O, format=\"%(asctime)s - %(message)s\")",
        "ler(sig, frame):",
        "ressed Ctrl+C!\")",
        ".exit(0)",
        "IGINT, signal_handler)",
        "nd_date(symbol_date_pair):",
        "  ",
        "= symbol_date_pair",
        "gs = []",
        "lient(trace=True)  ",
        "ient.list_aggs(",
        " symbol,",
        "   1,",
        "\"minute\",",
        "  date,",
        "  date,",
        "mit=50000,",
        " ):",
        "s.append(a)",
        "len(aggs))",
        "}-aggs-{date}.pickle.lz4\"",
        "ame, \"wb\") as file:",
        "  try:",
        "frame.compress(pickle.dumps(aggs))",
        "ite(compressed_data)",
        "TypeError as e:",
        "ialization Error: {e}\")",
        "for {date} and saved to {filename}\")",
        "start_date, end_date):",
        "  ",
        "start_date",
        " <= end_date:",
        "weekday() < 5:  ",
        "  yield day",
        "ime.timedelta(days=1)",
        "ain():",
        "time.date(2023, 8, 1)",
        "ime.date(2023, 8, 31)",
        "\"AAPL\", \"HCP\", \"GOOG\"]  ",
        "tween(start_date, end_date))",
        "  ",
        "for symbol in symbols for date in dates]",
        "  ",
        "lExecutor(max_workers=50) as executor:",
        "symbol_and_date, symbol_date_pairs)",
        "= \"__main__\":",
        "ain()",
        "4.frame  ",
        " pickle",
        "datetime",
        "",
        "_date(symbol, date):",
        "  ",
        "  ",
        "}-aggs-{date}.pickle.lz4\"",
        "try:",
        "ename, \"rb\") as file:",
        "ed_data = file.read()",
        "4.frame.decompress(compressed_data))",
        "print(trades)",
        "return trades",
        "eNotFoundError:",
        "le found for {date}\")",
        "ception as e:",
        "rror occurred: {e}\")",
        "ain():",
        "time.date(2023, 8, 1)",
        "ime.date(2023, 8, 31)",
        "l = \"HCP\"",
        "  ",
        "start_date",
        " <= end_date:",
        "weekday() < 5:  ",
        "s_for_date(symbol, day)",
        "ime.timedelta(days=1)",
        "= \"__main__\":",
        "ain()",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "STClient()  ",
        " = []",
        "nt.list_aggs(",
        "BTCUSD\",",
        " 1,",
        "day\",",
        "3-01-30\",",
        "3-02-03\",",
        "t=50000,",
        ":",
        "append(a)",
        "(aggs)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "ons = []",
        "ions(\"crypto\", limit=1000):",
        "ns.append(c)",
        "nditions)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "",
        "daily_open_close_agg(",
        "BTCUSD\",",
        "3-01-09\",",
        ")",
        "equest)",
        "port RESTClient",
        "t.models import (",
        "change,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "t_exchanges(\"crypto\")",
        "changes)",
        "",
        "in exchanges:",
        "  ",
        "xchange, Exchange):",
        "    ",
        " print(",
        "5}{} ({})\".format(",
        " exchange.name, exchange.operating_mic",
        "      )",
        "    )",
        "port RESTClient",
        " pprint",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "_grouped_daily_aggs(",
        "lobal\", market_type=\"crypto\"",
        ")",
        "",
        "",
        "",
        "yPrinter(indent=2)",
        "(grouped)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "rypto_trade(\"BTC\", \"USD\")",
        "trade)",
        "port RESTClient",
        "t.models import (",
        "tHoliday,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "et_market_holidays()",
        "",
        "",
        "in holidays:",
        "  ",
        "iday, MarketHoliday):",
        "liday.date, holiday.name, holiday.exchange))",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "et_market_status()",
        "result)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "previous_close_agg(",
        "BTCUSD\",",
        ")",
        "(aggs)",
        "port RESTClient",
        "t.models import (",
        "rSnapshot,",
        "Agg,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "napshot_all(\"crypto\")  ",
        "",
        "napshot)",
        "",
        "n snapshot:",
        "  ",
        "em, TickerSnapshot):",
        "    ",
        "(item.prev_day, Agg):",
        "      ",
        "v_day.open, float) and isinstance(",
        "prev_day.close, float",
        "     ):",
        "ercent_change = (",
        "day.close - item.prev_day.open)",
        "/ item.prev_day.open",
        "        * 100",
        "        )",
        "     print(",
        ":<15}{:<15}{:.2f} %\".format(",
        "      item.ticker,",
        "   item.prev_day.open,",
        "  item.prev_day.close,",
        "     percent_change,",
        "          )",
        "        )",
        "port RESTClient",
        "t.models import (",
        "rSnapshot,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "",
        "direction(\"crypto\", \"gainers\")",
        "",
        "",
        "in gainers:",
        "  ",
        "ner, TickerSnapshot):",
        "    ",
        "todays_change_percent, float):",
        "ainer.ticker, gainer.todays_change_percent))",
        "nt()",
        "",
        "direction(\"crypto\", \"losers\")",
        "",
        "",
        "in losers:",
        "  ",
        "ser, TickerSnapshot):",
        "    ",
        "odays_change_percent, float):",
        "loser.ticker, loser.todays_change_percent))",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "_ticker(\"crypto\", \"X:BTCUSD\")",
        "ticker)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "hot_crypto_book(\"X:BTCUSD\")",
        "",
        "napshot)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_ema(",
        "\"X:BTCUSD\",",
        "pan=\"day\",",
        "dow=50,",
        "ype=\"close\",",
        ")",
        "(ema)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_macd(",
        "\"X:BTCUSD\",",
        "pan=\"day\",",
        "window=12,",
        "window=26,",
        "_window=9,",
        "ype=\"close\",",
        ")",
        "(macd)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_rsi(",
        "\"X:BTCUSD\",",
        "pan=\"day\",",
        "dow=14,",
        "ype=\"close\",",
        ")",
        "(rsi)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_sma(",
        "\"X:BTCUSD\",",
        "pan=\"day\",",
        "dow=50,",
        "ype=\"close\",",
        ")",
        "(sma)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "s = []",
        "market=\"crypto\", limit=1000):",
        "s.append(t)",
        "ickers)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "s = []",
        "-USD\", \"2023-02-01\", limit=50000):",
        ".append(t)",
        "",
        "trades)",
        "port RESTClient",
        "",
        " orjson",
        "(custom_json=orjson)",
        "\"day\", \"2022-04-04\", \"2022-04-04\")",
        "(aggs)",
        "das as pd  ",
        "py as np  ",
        "orn as sns  ",
        "b.pyplot as plt  ",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "QCOM\", \"MU\", \"AVGO\", \"ADI\", \"MCHP\", \"NXPI\"]",
        "",
        " \"2022-04-01\"",
        "\"2023-05-10\"",
        "ls, start_date, end_date):",
        "cks = []",
        "  ",
        "RESTClient()  ",
        "try:",
        "bol in symbols:",
        "= client.get_aggs(",
        "     symbol,",
        "       1,",
        "     \"day\",",
        "   start_date,",
        "    end_date,",
        "      )",
        "s, columns=[\"timestamp\", \"close\"])",
        "      ",
        "df[\"timestamp\"] > 0]",
        "datetime(df[\"timestamp\"], unit=\"ms\")",
        "\"timestamp\", inplace=True)",
        "\"close\": symbol}, inplace=True)",
        "ocks.append(df)",
        "nally:",
        "  pass",
        ".concat(stocks, axis=1)",
        "erged_stocks",
        "returns(stock_data):",
        "data.pct_change().dropna()",
        "aily_returns",
        "_matrix(daily_returns):",
        " = daily_returns.corr()",
        "relation_matrix",
        "tmap(correlation_matrix):",
        "figsize=(8, 8))",
        "ns.heatmap(",
        "lation_matrix,",
        "nnot=True,",
        "=\"coolwarm\",",
        "vmin=-1,",
        " vmax=1,",
        "uare=True,",
        "ewidths=0.5,",
        "={\"shrink\": 0.8},",
        "  )",
        "s.tick_top()",
        "bel_position(\"top\")",
        "n Matrix Heatmap\", y=1.08)",
        ".show()",
        "ain():",
        "a(symbols, start_date, end_date)",
        "te_daily_returns(stock_data)",
        "correlation_matrix(daily_returns)",
        "lation Matrix:\")",
        "elation_matrix)",
        "tmap(correlation_matrix)",
        "= \"__main__\":",
        "ain()",
        "port RESTClient",
        "ESTClient()",
        "_ticker_details(\"NFLX\")",
        "nancials)",
        "t_ticker_news(\"INTC\", limit=5)):",
        "nt(i, n)",
        "i == 5:",
        "  break",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "STClient()  ",
        " = []",
        "nt.list_aggs(",
        "EURUSD\",",
        " 1,",
        "day\",",
        "3-01-30\",",
        "3-02-03\",",
        "t=50000,",
        ":",
        "append(a)",
        "(aggs)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "ons = []",
        "itions(\"fx\", limit=1000):",
        "ns.append(c)",
        "nditions)",
        "port RESTClient",
        "t.models import (",
        "change,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "get_exchanges(\"fx\")",
        "changes)",
        "",
        "in exchanges:",
        "  ",
        "xchange, Exchange):",
        "    ",
        " print(",
        "5}{} ({})\".format(",
        " exchange.name, exchange.operating_mic",
        "      )",
        "    )",
        "port RESTClient",
        " pprint",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "_grouped_daily_aggs(",
        "3-03-27\",",
        "=\"global\",",
        "_type=\"fx\",",
        ")",
        "",
        "",
        "",
        "yPrinter(indent=2)",
        "(grouped)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "_last_forex_quote(",
        "AUD\",",
        "USD\",",
        ")",
        "quote)",
        "port RESTClient",
        "t.models import (",
        "tHoliday,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "et_market_holidays()",
        "",
        "",
        "in holidays:",
        "  ",
        "iday, MarketHoliday):",
        "liday.date, holiday.name, holiday.exchange))",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "et_market_status()",
        "result)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "previous_close_agg(",
        "EURUSD\",",
        ")",
        "(aggs)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "s = []",
        "-USD\", \"2023-02-01\", limit=50000):",
        ".append(t)",
        "quotes)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "ime_currency_conversion(",
        "AUD\",",
        "USD\",",
        ")",
        "(rate)",
        "port RESTClient",
        "t.models import (",
        "rSnapshot,",
        "Agg,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "snapshot_all(\"forex\")  ",
        "",
        "napshot)",
        "",
        "n snapshot:",
        "  ",
        "em, TickerSnapshot):",
        "    ",
        "(item.prev_day, Agg):",
        "      ",
        "v_day.open, float) and isinstance(",
        "prev_day.close, float",
        "     ):",
        "ercent_change = (",
        "day.close - item.prev_day.open)",
        "/ item.prev_day.open",
        "        * 100",
        "        )",
        "     print(",
        ":<15}{:<15}{:.2f} %\".format(",
        "      item.ticker,",
        "   item.prev_day.open,",
        "  item.prev_day.close,",
        "     percent_change,",
        "          )",
        "        )",
        "port RESTClient",
        "t.models import (",
        "rSnapshot,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "",
        "_direction(\"forex\", \"gainers\")",
        "",
        "",
        "in gainers:",
        "  ",
        "ner, TickerSnapshot):",
        "    ",
        "todays_change_percent, float):",
        "ainer.ticker, gainer.todays_change_percent))",
        "nt()",
        "",
        "_direction(\"forex\", \"losers\")",
        "",
        "",
        "in losers:",
        "  ",
        "ser, TickerSnapshot):",
        "    ",
        "odays_change_percent, float):",
        "loser.ticker, loser.todays_change_percent))",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "_ticker(\"forex\", \"C:EURUSD\")",
        "ticker)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_ema(",
        "\"C:EURUSD\",",
        "pan=\"day\",",
        "dow=50,",
        "ype=\"close\",",
        ")",
        "(ema)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_macd(",
        "\"C:EURUSD\",",
        "pan=\"day\",",
        "window=12,",
        "window=26,",
        "_window=9,",
        "ype=\"close\",",
        ")",
        "(macd)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_rsi(",
        "\"C:EURUSD\",",
        "pan=\"day\",",
        "dow=14,",
        "ype=\"close\",",
        ")",
        "(rsi)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_sma(",
        "\"C:EURUSD\",",
        "pan=\"day\",",
        "dow=50,",
        "ype=\"close\",",
        ")",
        "(sma)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "s = []",
        "s(market=\"fx\", limit=1000):",
        "s.append(t)",
        "ickers)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "STClient()  ",
        " = []",
        "nt.list_aggs(",
        ":SPX\",",
        " 1,",
        "day\",",
        "3-03-10\",",
        "3-05-12\",",
        "t=50000,",
        ":",
        "append(a)",
        "(aggs)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "",
        "daily_open_close_agg(",
        ":SPX\",",
        "3-03-28\",",
        ")",
        "equest)",
        "port RESTClient",
        "t.models import (",
        "tHoliday,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "et_market_holidays()",
        "",
        "",
        "in holidays:",
        "  ",
        "iday, MarketHoliday):",
        "liday.date, holiday.name, holiday.exchange))",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "et_market_status()",
        "result)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "previous_close_agg(",
        ":SPX\",",
        ")",
        "(aggs)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        ", \"I:DJI\", \"I:VIX\"]",
        "napshot_indices(tickers)",
        "",
        "napshot)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_ema(",
        "r=\"I:SPX\",",
        "pan=\"day\",",
        "dow=50,",
        "ype=\"close\",",
        ")",
        "(ema)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_macd(",
        "r=\"I:SPX\",",
        "pan=\"day\",",
        "window=12,",
        "window=26,",
        "_window=9,",
        "ype=\"close\",",
        ")",
        "(macd)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_rsi(",
        "r=\"I:SPX\",",
        "pan=\"day\",",
        "dow=14,",
        "ype=\"close\",",
        ")",
        "(rsi)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_sma(",
        "r=\"I:SPX\",",
        "pan=\"day\",",
        "dow=50,",
        "ype=\"close\",",
        ")",
        "(sma)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "s = []",
        "market=\"indices\", limit=1000):",
        "s.append(t)",
        "ickers)",
        "ptional, Union, List",
        "ort HTTPResponse",
        "port RESTClient",
        "t.models import (",
        "erTypes,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "erTypes], HTTPResponse]] = None",
        "y:",
        "ticker_types(\"indices\")",
        "Error as e:",
        "Type\" in str(e):",
        "(\"None found\")",
        "pes = None",
        "else:",
        "  raise",
        "s not None:",
        "t(types)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "STClient()  ",
        " = []",
        "nt.list_aggs(",
        "219C00650000\",",
        " 1,",
        "day\",",
        "3-01-30\",",
        "3-02-03\",",
        "t=50000,",
        ":",
        "append(a)",
        "(aggs)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "ons = []",
        "ions(\"options\", limit=1000):",
        "ns.append(c)",
        "nditions)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "ontract(\"O:EVRI240119C00002500\")",
        "",
        "ontract)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "ts = []",
        "tions_contracts(\"HCP\"):",
        "ts.append(c)",
        "ntracts)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "",
        "daily_open_close_agg(",
        "219C00650000\",",
        "3-02-22\",",
        ")",
        "equest)",
        "port RESTClient",
        "t.models import (",
        "change,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "t_exchanges(\"options\")",
        "changes)",
        "",
        "in exchanges:",
        "  ",
        "xchange, Exchange):",
        "    ",
        " print(",
        "5}{} ({})\".format(",
        " exchange.name, exchange.operating_mic",
        "      )",
        "    )",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "get_last_trade(",
        "903C00700000\",",
        ")",
        "trade)",
        "port RESTClient",
        "t.models import (",
        "tHoliday,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "et_market_holidays()",
        "",
        "",
        "in holidays:",
        "  ",
        "iday, MarketHoliday):",
        "liday.date, holiday.name, holiday.exchange))",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "et_market_status()",
        "result)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "previous_close_agg(",
        "219C00650000\",",
        ")",
        "(aggs)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "s = []",
        "PY241220P00720000\", limit=50000):",
        ".append(t)",
        "quotes)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "hain = []",
        "napshot_options_chain(",
        "HCP\",",
        "rams={",
        "te.gte\": \"2024-03-16\",",
        "_price.gte\": 20,",
        " },",
        ":",
        "hain.append(o)",
        "ons_chain)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "on(\"AAPL\", \"O:AAPL230616C00150000\")",
        "",
        "napshot)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_ema(",
        "pan=\"day\", window=50, series_type=\"close\"",
        ")",
        "(ema)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_macd(",
        "241220P00720000\",",
        "pan=\"day\",",
        "window=12,",
        "window=26,",
        "_window=9,",
        "ype=\"close\",",
        ")",
        "(macd)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_rsi(",
        "pan=\"day\", window=14, series_type=\"close\"",
        ")",
        "(rsi)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_sma(",
        "pan=\"day\", window=50, series_type=\"close\"",
        ")",
        "(sma)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "s = []",
        "_tickers(limit=1000):",
        "s.append(t)",
        "ickers)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "ticker_details(\"TSLA\")",
        "etails)",
        "port RESTClient",
        "t.models import (",
        "kerNews,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        " = []",
        "\"AAPL\", order=\"desc\", limit=1000):",
        "append(n)",
        "",
        "n enumerate(news):",
        "  ",
        "item, TickerNews):",
        "t(item.published_utc, item.title))",
        "index == 20:",
        "    break",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "s = []",
        "LA210903C00700000\", limit=50000):",
        ".append(t)",
        "",
        "trades)",
        "port RESTClient",
        " import cast",
        "ort HTTPResponse",
        "ESTClient()",
        " cast(",
        "Response,",
        ".get_aggs(",
        " \"AAPL\",",
        "   1,",
        " \"day\",",
        "022-04-01\",",
        "022-04-04\",",
        "raw=True,",
        " ),",
        ")",
        ".geturl())",
        "",
        "s.status)",
        "",
        "gs.data)",
        "port RESTClient",
        " import cast",
        "ort HTTPResponse",
        "ESTClient()",
        "= cast(",
        "Response,",
        "\", \"2022-04-20\", raw=True),",
        ")",
        "des.data)",
        "port RESTClient",
        "st import models",
        "ESTClient()",
        "nt.get_aggs(",
        "AAPL\",",
        " 1,",
        "day\",",
        "2-04-04\",",
        "2-04-04\",",
        ")",
        "(aggs)",
        "port RESTClient",
        "ESTClient()",
        "s = []",
        "AAA\", \"2022-04-04\", limit=5):",
        ".append(t)",
        "trades)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "STClient()  ",
        " = []",
        "nt.list_aggs(",
        "AAPL\",",
        " 1,",
        "inute\",",
        "2-01-01\",",
        "3-02-03\",",
        "t=50000,",
        ":",
        "append(a)",
        "(aggs)",
        "port RESTClient",
        "t.models import (",
        "Agg,",
        ")",
        "t csv",
        "datetime",
        "rt io",
        "",
        "",
        "",
        "",
        "STClient()  ",
        " = []",
        "nt.list_aggs(",
        "AAPL\",",
        " 1,",
        "hour\",",
        "3-01-30\",",
        "3-02-03\",",
        "t=50000,",
        ":",
        "append(a)",
        "(aggs)",
        "",
        "rs = [",
        "estamp\",",
        "open\",",
        "high\",",
        "low\",",
        "lose\",",
        "olume\",",
        "vwap\",",
        "sactions\",",
        "otc\",",
        "]",
        "",
        "io.StringIO()",
        "_string, fieldnames=headers)",
        "",
        "teheader()",
        "",
        "in aggs:",
        "  ",
        "nce(agg, Agg):",
        "    ",
        "(agg.timestamp, int):",
        "iter.writerow(",
        "        {",
        "atetime.fromtimestamp(agg.timestamp / 1000),",
        "  \"open\": agg.open,",
        "  \"high\": agg.high,",
        "   \"low\": agg.low,",
        " \"close\": agg.close,",
        "\"volume\": agg.volume,",
        "  \"vwap\": agg.vwap,",
        "actions\": agg.transactions,",
        "   \"otc\": agg.otc,",
        "        }",
        "      )",
        "",
        "ng.getvalue())",
        "port RESTClient",
        "t.models import (",
        "Agg,",
        ")",
        "datetime",
        "tp.server",
        "cketserver",
        "raceback",
        "t json",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "= 8888",
        "",
        "",
        "l = ",
        "STClient()  ",
        " = []",
        "nt.list_aggs(",
        "AAPL\",",
        " 1,",
        "day\",",
        "9-01-01\",",
        "3-02-16\",",
        "t=50000,",
        ":",
        "append(a)",
        "",
        " = []",
        "",
        "in aggs:",
        "  ",
        "nce(agg, Agg):",
        "    ",
        "(agg.timestamp, int):",
        "ew_record = {",
        "te\": agg.timestamp,",
        "\"open\": agg.open,",
        "\"high\": agg.high,",
        " \"low\": agg.low,",
        "close\": agg.close,",
        "olume\": agg.volume,",
        "      }",
        "append(new_record)",
        "d.items()] for d in data]",
        "",
        "",
        "SimpleHTTPRequestHandler):",
        "_GET(self):",
        "path == \"/data\":",
        "send_response(200)",
        "ntent-type\", \"application/json\")",
        "f.end_headers()",
        " = json.dumps(values)",
        "rite(json_data.encode())",
        "  else:",
        "send_response(200)",
        "(\"Content-type\", \"text/html\")",
        "f.end_headers()",
        "e.write(html.encode())",
        "",
        "y:",
        "le True:",
        "    ",
        "er((\"\", PORT), handler) as httpd:",
        "rving at port\", PORT)",
        "d.serve_forever()",
        "  pass",
        "ardInterrupt:",
        "ng gracefully...\")",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "ons = []",
        "onditions(limit=1000):",
        "ns.append(c)",
        "nditions)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "",
        "daily_open_close_agg(",
        "AAPL\",",
        "3-02-07\",",
        ")",
        "equest)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "ds = []",
        "dends(\"MSFT\", limit=1000):",
        "ds.append(d)",
        "vidends)",
        "port RESTClient",
        "t.models import (",
        "change,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "t.get_exchanges()",
        "changes)",
        "",
        "in exchanges:",
        "  ",
        "xchange, Exchange):",
        "    ",
        " print(",
        "5}{} ({})\".format(",
        " exchange.name, exchange.operating_mic",
        "      )",
        "    )",
        "port RESTClient",
        " pprint",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "_grouped_daily_aggs(",
        "3-02-16\",",
        ")",
        "",
        "",
        "",
        "yPrinter(indent=2)",
        "(grouped)",
        "port RESTClient",
        "",
        "",
        "",
        "STClient()  ",
        " = []",
        "st_ipos(ticker=\"RDDT\"):",
        "ppend(ipo)",
        "(ipos)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "get_last_quote(",
        "AAPL\",",
        ")",
        "quote)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "get_last_trade(",
        "AAPL\",",
        ")",
        "trade)",
        "port RESTClient",
        "t.models import (",
        "tHoliday,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "et_market_holidays()",
        "",
        "",
        "in holidays:",
        "  ",
        "iday, MarketHoliday):",
        "liday.date, holiday.name, holiday.exchange))",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "et_market_status()",
        "result)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "previous_close_agg(",
        "AAPL\",",
        ")",
        "(aggs)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "s = []",
        "IO\", \"2023-02-01\", limit=50000):",
        ".append(t)",
        "quotes)",
        "port RESTClient",
        "",
        "",
        "",
        "STClient()  ",
        "et_related_companies(\"AAPL\")",
        "d_companies)",
        "port RESTClient",
        "t.models import (",
        "rSnapshot,",
        "Agg,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "",
        "APL\", \"MSFT\", \"META\"]",
        "",
        "shot_all(\"stocks\", tickers)",
        "",
        "napshot)",
        "",
        "n snapshot:",
        "  ",
        "em, TickerSnapshot):",
        "    ",
        "(item.prev_day, Agg):",
        "      ",
        "v_day.open, float) and isinstance(",
        "prev_day.close, float",
        "     ):",
        "ercent_change = (",
        "day.close - item.prev_day.open)",
        "/ item.prev_day.open",
        "        * 100",
        "        )",
        "     print(",
        ":<15}{:<15}{:.2f} %\".format(",
        "      item.ticker,",
        "   item.prev_day.open,",
        "  item.prev_day.close,",
        "     percent_change,",
        "          )",
        "        )",
        "port RESTClient",
        "t.models import (",
        "rSnapshot,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "",
        "direction(\"stocks\", \"gainers\")",
        "",
        "",
        "in gainers:",
        "  ",
        "ner, TickerSnapshot):",
        "    ",
        "todays_change_percent, float):",
        "ainer.ticker, gainer.todays_change_percent))",
        "nt()",
        "",
        "direction(\"stocks\", \"losers\")",
        "",
        "",
        "in losers:",
        "  ",
        "ser, TickerSnapshot):",
        "    ",
        "odays_change_percent, float):",
        "loser.ticker, loser.todays_change_percent))",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "ot_ticker(\"stocks\", \"AAPL\")",
        "ticker)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "als = []",
        "als(\"AAPL\", filing_date=\"2024-11-01\"):",
        "ls.append(f)",
        "  ",
        "  ",
        "  ",
        "  ",
        "nancials)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "s = []",
        "its(\"TSLA\", limit=1000):",
        ".append(s)",
        "splits)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_ema(",
        "r=\"AAPL\",",
        "pan=\"day\",",
        "dow=50,",
        "ype=\"close\",",
        ")",
        "(ema)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_macd(",
        "r=\"AAPL\",",
        "pan=\"day\",",
        "window=12,",
        "window=26,",
        "_window=9,",
        "ype=\"close\",",
        ")",
        "(macd)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_rsi(",
        "r=\"AAPL\",",
        "pan=\"day\",",
        "dow=14,",
        "ype=\"close\",",
        ")",
        "(rsi)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "nt.get_sma(",
        "r=\"AAPL\",",
        "pan=\"day\",",
        "dow=50,",
        "ype=\"close\",",
        ")",
        "(sma)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "s = []",
        "ks\", type=\"CS\", active=True, limit=1000):",
        "s.append(t)",
        "ickers)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "ticker_details(\"AAPL\")",
        "etails)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "ticker_events(\"META\")",
        "events)",
        "port RESTClient",
        "t.models import (",
        "kerNews,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        " = []",
        "\"BBBY\", order=\"desc\", limit=1000):",
        "append(n)",
        "",
        "",
        "n enumerate(news):",
        "  ",
        "item, TickerNews):",
        "t(item.published_utc, item.title))",
        "index == 20:",
        "    break",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "et_ticker_types()",
        "types)",
        "port RESTClient",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "s = []",
        "IO\", \"2023-02-01\", limit=50000):",
        ".append(t)",
        "",
        "trades)",
        "port RESTClient",
        "t.models import (",
        "rade,",
        ")",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "",
        "float(0)",
        "",
        "S\", \"2023-02-07\", limit=50000):",
        "  ",
        "nce(t, Trade):",
        "    ",
        "oat) and isinstance(t.size, int):",
        "+= t.price * t.size",
        "",
        ":,.2f}\".format(money)",
        " changed hands for DIS on 2023-02-07.\")",
        "ast, Iterator, Union",
        "ort HTTPResponse",
        "port RESTClient",
        "iversalSnapshot, SnapshotMarketType",
        "",
        "",
        "",
        "",
        "STClient()  ",
        "ator[UniversalSnapshot], HTTPResponse]):",
        " for s in iterator]",
        " {len(snapshots)}\")",
        "in snapshots:",
        "rint(item)",
        "",
        "niversal_snapshots(",
        "r_any_of=[",
        " \"AAPL\",",
        "30519C00055000\",",
        "S_NOT_EXIST\",",
        ":1INCHUSD\",",
        "C:AEDAUD\",",
        "  ]",
        ")",
        "pshots(it)",
        "\"stocks\", ticker_gt=\"A\", ticker_lt=\"AAPL\")",
        "pshots(it)",
        "tocks\", ticker_gte=\"AAPL\", ticker_lte=\"ABB\")",
        "pshots(it)",
        "niversal_snapshots(",
        "\"options\",",
        "APL230804C00050000\",",
        "APL230804C00070000\",",
        ")",
        "pshots(it)",
        "asyncio",
        "logging",
        "rt os",
        "rt re",
        "import ThreadPoolExecutor",
        "t Optional, Union",
        "TClient, WebSocketClient",
        "odels import Market, Feed",
        "allHandler:",
        "nit__(self):",
        "queue = asyncio.Queue()",
        " ThreadPoolExecutor()  ",
        "t = RESTClient()  ",
        "call(self, options_ticker):",
        "l_queue.put(options_ticker)",
        "cessing_api_calls(self):",
        "hile True:",
        "wait self.api_call_queue.get()",
        "    try:",
        "        ",
        "        ",
        "        ",
        "io.get_running_loop().run_in_executor(",
        "f.get_options_contract, options_ticker",
        "        )",
        "print(contract)  ",
        "t Exception as e:",
        "essing API call for {options_ticker}: {e}\")",
        "  finally:",
        "i_call_queue.task_done()",
        "act(self, options_ticker):",
        "options_contract(options_ticker)",
        "ageHandler:",
        "f, api_call_handler):",
        "ueue = asyncio.Queue()",
        "ndler = api_call_handler",
        "e: Optional[Union[str, bytes]]) -> None:",
        "queue.put(message_response)",
        "andling(self) -> None:",
        "hile True:",
        " await self.handler_queue.get()",
        "ved message: {message_response}\")",
        "    try:",
        "        ",
        "        ",
        "        ",
        "        ",
        "de in message_response:",
        "lf.extract_symbol(trade.symbol)",
        "if ticker == \"NVDA\":",
        "  asyncio.create_task(",
        "l_handler.enqueue_api_call(trade.symbol)",
        "            )",
        "t Exception as e:",
        "f\"Error handling message: {e}\")",
        "  finally:",
        "ndler_queue.task_done()",
        "l(self, input_string):",
        "\"O:([A-Z]+)\", input_string)",
        "if match:",
        "rn match.group(1)",
        "  else:",
        " return None",
        "yClient:",
        "d, market, subscriptions):",
        "tenv(\"POLYGON_API_KEY\")",
        "et_client = WebSocketClient(",
        "i_key=api_key,",
        " feed=feed,",
        "arket=market,",
        "verbose=True,",
        "tions=subscriptions,",
        "    )",
        "ndler = ApiCallHandler()",
        "sageHandler(self.api_call_handler)",
        "_event_stream(self):",
        "  try:",
        "t asyncio.gather(",
        "lient.connect(self.message_handler.add),",
        "e_handler.start_handling(),",
        "dler.start_processing_api_calls(),",
        "      )",
        "Exception as e:",
        "Error in event stream: {e}\")",
        "f main():",
        "ig(level=logging.INFO)",
        "t = MyClient(",
        "arket.Options, subscriptions=[\"T.*\"]",
        "  )",
        "start_event_stream()",
        "",
        "un(main())",
        "port RESTClient",
        "",
        "",
        "",
        "STClient()  ",
        " = []",
        "nt.list_aggs(",
        "AAPL\",",
        " 1,",
        "hour\",",
        "4-01-30\",",
        "4-01-30\",",
        "t=50000,",
        ":",
        "append(a)",
        "(aggs)",
        "das as pd  ",
        "orn as sns  ",
        "b.pyplot as plt  ",
        "py as np  ",
        " pytz  ",
        "",
        "024-04-05.csv\"",
        "",
        "csv(file_path)",
        "",
        "amp\"] = pd.to_datetime(",
        "amp\"], unit=\"ns\", utc=True",
        ")",
        "",
        "rticipant_timestamp\"].dt.tz_convert(",
        "a/New_York\"",
        ")",
        "",
        "t_timestamp\"].dt.floor(\"30T\").dt.time",
        "",
        "00:00\", end=\"23:59\", freq=\"30T\").time",
        "\"exchange\"].unique()",
        "iIndex.from_product(",
        " names=[\"exchange\", \"time_interval\"]",
        ")",
        "",
        "ed = (",
        "nge\", \"time_interval\"])",
        "size()",
        "ndex, fill_value=0)",
        "ame=\"trade_count\")",
        ")",
        "",
        "\"time_interval\", \"trade_count\").fillna(0)",
        "",
        "g1p(pivot_table.values)",
        "",
        "size=(20, 10))",
        "atmap(",
        "cale_data,",
        "t=False,",
        "=\"Reds\",",
        "idths=0.5,",
        "r=False,",
        "H:%M\") for t in all_intervals],",
        "ivot_table.index,",
        ")",
        "nge and Time Interval (Log Scale, ET)\")",
        "\"Exchange\")",
        " Interval (ET)\")",
        "rotation=45)",
        "layout()  ",
        "how()",
        "das as pd  ",
        "",
        "024-04-05.csv\"",
        "",
        "csv(file_path)",
        "",
        "xchange\"].value_counts()",
        "",
        "hange_counts.sum()",
        "",
        "exchange_counts.items():",
        "t / total_trades) * 100",
        "rades, {percentage:.2f}% of total trades\")",
        "das as pd  ",
        "",
        "024-04-05.csv\"",
        "",
        "csv(file_path)",
        "",
        "cker\"].value_counts()",
        "",
        "rade_counts.sum()",
        "",
        "ade_counts.head(10)",
        "",
        "top_10_traded.items():",
        "t / total_trades) * 100",
        ", {percentage:.2f}% of total trades\")",
        "das as pd  ",
        "b.pyplot as plt  ",
        "",
        "024-04-05.csv\"",
        "",
        "csv(file_path)",
        "",
        "amp\"] = pd.to_datetime(",
        "amp\"], unit=\"ns\", utc=True",
        ")",
        "",
        "rticipant_timestamp\"].dt.tz_convert(",
        "a/New_York\"",
        ")",
        "",
        "ipant_timestamp\"].dt.floor(\"30T\")",
        "",
        "groupby(\"time_interval\").size()",
        "",
        "gsize=(15, 7))",
        "",
        "plt.bar(",
        "de_counts_per_interval.values, width=0.02",
        ")",
        "",
        "in bars:",
        "ar.get_height()",
        "annotate(",
        "nt(height)}\",",
        "ar.get_width() / 2, height),",
        "xt=(0, 3),  ",
        "s=\"offset points\",",
        "=\"center\",",
        "=\"bottom\",",
        "  )",
        "ed by 30-Minute Intervals (ET)\")",
        " Interval (ET)\")",
        "ber of Trades\")",
        "on=45, ha=\"right\")",
        "",
        "_xticklabels(",
        "rade_counts_per_interval.index], rotation=90",
        ")",
        "_layout()",
        "how()",
        "rt os",
        "das as pd  ",
        "import defaultdict",
        " pickle",
        "t json",
        "tDict, Dict, Any, BinaryIO",
        "",
        "ggregates_day/\"",
        "",
        "efaultdict(list)",
        "",
        "ir(data_dir) if f.endswith(\".csv\")])",
        " process files...\")",
        "",
        "in files:",
        "cessing {file}\")",
        "h.join(data_dir, file)",
        "d_csv(file_path)",
        "  ",
        "n df.iterrows():",
        "= row[\"ticker\"]",
        "\"window_start\"], unit=\"ns\").date()",
        "ow[\"transactions\"]",
        "e = row[\"close\"]  ",
        "ta[ticker].append(",
        " trades, \"close_price\": close_price}",
        "    )",
        "rocessing files.\")",
        "lookup table...\")",
        "",
        " Dict[str, Any]] = defaultdict(",
        "dict",
        "  ",
        "n trades_data.items():",
        "  ",
        ".DataFrame(records)",
        "  ",
        "es(\"date\", inplace=True)",
        "x(\"date\", inplace=True)",
        "  ",
        "price_diff\"] = (",
        "price\"].pct_change() * 100",
        " )  ",
        "  ",
        " = df_ticker[\"trades\"].shift(1)",
        "  ",
        "trades_shifted\"].rolling(window=5).mean()",
        "\"trades_shifted\"].rolling(window=5).std()",
        "  ",
        "df_ticker.iterrows():",
        "    ",
        "e.strftime(\"%Y-%m-%d\")",
        "    ",
        "\"]) and pd.notnull(row[\"std_trades\"]):",
        "e[ticker][date_str] = {",
        "des\": row[\"trades\"],",
        "ice\": row[\"close_price\"],",
        "iff\": row[\"price_diff\"],",
        "des\": row[\"avg_trades\"],",
        "des\": row[\"std_trades\"],",
        "      }",
        "  else:",
        "      ",
        "e[ticker][date_str] = {",
        "des\": row[\"trades\"],",
        "ice\": row[\"close_price\"],",
        "iff\": row[\"price_diff\"],",
        "avg_trades\": None,",
        "std_trades\": None,",
        "      }",
        "built successfully.\")",
        "",
        " k, v in lookup_table.items()}",
        "",
        "le.pkl\", \"wb\") as f:  ",
        "okup_table_dict, f)",
        " to 'lookup_table.pkl'.\")",
        "rt os",
        " pickle",
        "t json",
        "import datetime",
        "port RESTClient",
        ".models import Agg",
        "tp.server",
        "cketserver",
        "raceback",
        "ort urlparse, parse_qs",
        "= 8888",
        "",
        "ble.pkl\", \"rb\") as f:",
        " = pickle.load(f)",
        "SimpleHTTPRequestHandler):",
        "_GET(self):",
        "    ",
        "= urlparse(self.path)",
        "parsed_path.path",
        "rse_qs(parsed_path.query)",
        "path == \"/\":",
        "      ",
        "      ",
        "_params.get(\"date\", [None])[0]",
        "      ",
        "l_dates = set()",
        "a in lookup_table.values():",
        "update(ticker_data.keys())",
        "s = sorted(all_dates)",
        "      ",
        "te_param is None:",
        "  if all_dates:",
        "st_date = max(all_dates)",
        "      else:",
        "elf.send_response(200)",
        "ader(\"Content-type\", \"text/html\")",
        " self.end_headers()",
        "  html_content = (",
        "1>No data available.</h1></body></html>\"",
        "          )",
        "e.write(html_content.encode())",
        "       return",
        "    else:",
        "st_date = date_param",
        "      ",
        "date not in all_dates:",
        "        ",
        "f.send_response(400)",
        "er(\"Content-type\", \"text/html\")",
        "elf.end_headers()",
        "data available for date {latest_date}</h1></body></html>\"",
        ".write(error_html.encode())",
        "     return",
        "      ",
        "nomalies = []",
        "data in lookup_table.items():",
        "est_date in date_data:",
        " = date_data[latest_date]",
        "rades = data[\"trades\"]",
        "rades = data[\"avg_trades\"]",
        "rades = data[\"std_trades\"]",
        "        if (",
        " avg_trades is not None",
        "nd std_trades is not None",
        "   and std_trades > 0",
        "         ):",
        "(trades - avg_trades) / std_trades",
        "hreshold_multiplier = 3  ",
        "score > threshold_multiplier:",
        "      anomalies.append(",
        "                {",
        "          \"ticker\": ticker,",
        "        \"date\": latest_date,",
        "          \"trades\": trades,",
        "      \"avg_trades\": avg_trades,",
        "      \"std_trades\": std_trades,",
        "         \"z_score\": z_score,",
        " \"close_price\": data[\"close_price\"],",
        "  \"price_diff\": data[\"price_diff\"],",
        "                }",
        "              )",
        "      ",
        "mbda x: x[\"trades\"], reverse=True)",
        "      ",
        "send_response(200)",
        "(\"Content-type\", \"text/html\")",
        "f.end_headers()",
        "      ",
        "fmFj7I3r6ReQDUidHelA==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/tablesort/5.2.1/sorts/tablesort.number.min.js\" integrity=\"sha512-dRD755QRxlybm0h3LXXIGrFcjNakuxW3reZqnPtUkMv6YsSWoJf+slPjY5v4lZvx2ss+wBZQFegepmA7a2W9eA==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script><head><title>Anomalies for {}</title></head><body>'.format(",
        "   latest_date",
        "      )",
        "le=\"padding:4px;\"><h1>Anomalies for {}</h1>'.format(",
        "   latest_date",
        "      )",
        "      ",
        "all_dates.index(latest_date)",
        "_index - 1] if current_index > 0 else None",
        "next_date = (",
        "tes[current_index + 1]",
        "_index < len(all_dates) - 1",
        "    else None",
        "      )",
        "_content += \"<p>\"",
        "if prev_date:",
        "=\"/?date={}\">Previous Date</a> '.format(",
        "      prev_date",
        "        )",
        "if next_date:",
        "?date={}\">Next Date</a> '.format(next_date)",
        "content += \"</p>\"",
        "      ",
        "ml_content += (",
        "lass=\"table table-striped table-hover\">'",
        "      )",
        "tent += \"<thead><tr>\"",
        "nt += \"<th>Ticker</th>\"",
        "nt += \"<th>Trades</th>\"",
        " += \"<th>Avg Trades</th>\"",
        "t += \"<th>Std Dev</th>\"",
        "t += \"<th>Z-score</th>\"",
        "+= \"<th>Close Price</th>\"",
        " += \"<th>Price Diff</th>\"",
        "nt += \"<th>Chart</th>\"",
        "+= \"</tr></thead><tbody>\"",
        "omaly in anomalies:",
        "l_content += \"<tr>\"",
        "d>{}</td>\".format(anomaly[\"ticker\"])",
        "d>{}</td>\".format(anomaly[\"trades\"])",
        ".2f}</td>\".format(anomaly[\"avg_trades\"])",
        ".2f}</td>\".format(anomaly[\"std_trades\"])",
        ":.2f}</td>\".format(anomaly[\"z_score\"])",
        "2f}</td>\".format(anomaly[\"close_price\"])",
        ".2f}</td>\".format(anomaly[\"price_diff\"])",
        "        ",
        "html_content += (",
        "ker={}&date={}\">View Chart</a></td>'.format(",
        "maly[\"ticker\"], latest_date",
        "          )",
        "        )",
        "l_content += \"</tr>\"",
        "Tablesort(document.getElementById(\"anomalies\"));</script>'",
        "+= \"</div></body></html>\"",
        "ite(html_content.encode())",
        "th == \"/chart\":",
        "      ",
        "      ",
        "rams.get(\"ticker\", [None])[0]",
        "rams.get(\"date\", [None])[0]",
        "s None or date is None:",
        "        ",
        "f.send_response(400)",
        "er(\"Content-type\", \"text/html\")",
        "elf.end_headers()",
        " Missing ticker or date parameter</h1></body></html>\"",
        ".write(error_html.encode())",
        "    else:",
        "        ",
        "ient = RESTClient(",
        "     trace=True",
        "       )  ",
        "      try:",
        "      aggs = []",
        "  date_from = date",
        "   date_to = date",
        " a in client.list_aggs(",
        "         ticker,",
        "           1,",
        "        \"minute\",",
        "       date_from,",
        "        date_to,",
        "      limit=50000,",
        "         ):",
        "     aggs.append(a)",
        "          ",
        "      data = []",
        "  for agg in aggs:",
        ", Agg) and isinstance(agg.timestamp, int):",
        "       new_record = [",
        "         agg.timestamp,",
        "            agg.open,",
        "            agg.high,",
        "            agg.low,",
        "           agg.close,",
        "              ]",
        "   data.append(new_record)",
        "          ",
        "  chart_html =  % (",
        "    json.dumps(data),",
        "         ticker,",
        "          date,",
        "         ticker,",
        "          )",
        "elf.send_response(200)",
        "ader(\"Content-type\", \"text/html\")",
        "(\"Access-Control-Allow-Origin\", \"*\")",
        " self.end_headers()",
        "le.write(chart_html.encode())",
        "ept Exception as e:",
        "          ",
        "elf.send_response(500)",
        "ader(\"Content-type\", \"text/html\")",
        " self.end_headers()",
        "Error fetching data: {}</h1></body></html>\".format(",
        "         str(e)",
        "          )",
        "le.write(error_html.encode())",
        "  else:",
        "      ",
        "per().do_GET()",
        "server():",
        "((\"\", PORT), handler) as httpd:",
        "ing at port\", PORT)",
        "  try:",
        "d.serve_forever()",
        "eyboardInterrupt:",
        "xiting gracefully...\")",
        "tpd.shutdown()",
        "d.server_close()",
        "= \"__main__\":",
        "server()",
        " pickle",
        "argparse",
        "",
        "cription=\"Anomaly Detection Script\")",
        "elp=\"Target date in YYYY-MM-DD format\")",
        ".parse_args()",
        "",
        "ble.pkl\", \"rb\") as f:",
        " = pickle.load(f)",
        "",
        "ltiplier = 3",
        "",
        "tr = args.date",
        "",
        "es = []",
        "",
        "n lookup_table.items():",
        "_str in date_data:",
        "data[target_date_str]",
        "= data[\"trades\"]",
        "= data[\"avg_trades\"]",
        "= data[\"std_trades\"]",
        "d_trades is not None and std_trades > 0:",
        "s - avg_trades) / std_trades",
        "> threshold_multiplier:",
        "anomalies.append(",
        "          {",
        "    \"ticker\": ticker,",
        "\"date\": target_date_str,",
        "    \"trades\": trades,",
        "\"avg_trades\": avg_trades,",
        "\"std_trades\": std_trades,",
        "   \"z_score\": z_score,",
        "e_price\": data[\"close_price\"],",
        "ce_diff\": data[\"price_diff\"],",
        "          }",
        "        )",
        "",
        ": x[\"trades\"], reverse=True)",
        "",
        "for {target_date_str}:\\n\")",
        "nt(",
        "v':>10}{'Z-score':>10}{'Close Price':>12}{'Price Diff':>12}\"",
        ")",
        "-\" * 91)",
        "in anomalies:",
        "rint(",
        "y['ticker']:<10}\"",
        "['trades']:>10.0f}\"",
        "avg_trades']:>15.2f}\"",
        "std_trades']:>10.2f}\"",
        "'z_score']:>10.2f}\"",
        "lose_price']:>12.2f}\"",
        "price_diff']:>12.2f}\"",
        "  )",
        "port RESTClient",
        "t json",
        "ed_tickers():",
        "Client(trace=True)",
        "  ",
        "\", \"AAPL\", \"GOOG\", \"NVDA\", \"TSLA\", \"DIS\"]",
        "  ",
        "es = []",
        "es = []",
        "map = {}",
        "nt_id = 1",
        "  ",
        "in main_tickers:",
        "r not in id_map:",
        "ticker] = current_id",
        ": current_id, \"label\": ticker})",
        "urrent_id += 1",
        "nt.get_related_companies(ticker)",
        "in related_companies:",
        "icker = company.ticker",
        "_ticker not in id_map:",
        "lated_ticker] = current_id",
        "current_id, \"label\": related_ticker})",
        " current_id += 1",
        "[ticker], \"to\": id_map[related_ticker]})",
        "  ",
        "a.json\", \"w\") as f:",
        " nodes, \"edges\": edges}, f)",
        "= \"__main__\":",
        "ted_tickers()",
        "t json",
        "rrent.futures",
        "port RESTClient",
        "",
        "ESTClient(",
        "ce=True",
        "  ",
        "",
        "roups = {}",
        "",
        "",
        "group(sic_code):",
        "  ",
        " int(sic_code)",
        "ic_code <= 999:",
        "re, Forestry and Fishing\"",
        "sic_code <= 1499:",
        "urn \"Mining\"",
        "sic_code <= 1799:",
        " \"Construction\"",
        "  ",
        "sic_code <= 3999:",
        "\"Manufacturing\"",
        "sic_code <= 4999:",
        "tion and Public Utilities\"",
        "sic_code <= 5199:",
        "Wholesale Trade\"",
        "sic_code <= 5999:",
        " \"Retail Trade\"",
        "sic_code <= 6799:",
        "Insurance and Real Estate\"",
        "sic_code <= 8999:",
        "rn \"Services\"",
        "sic_code <= 9729:",
        "lic Administration\"",
        "sic_code <= 9999:",
        "Nonclassifiable\"",
        "else:",
        "eturn None",
        "(ticker_snapshot):",
        "er_snapshot.ticker",
        "try:",
        "get_ticker_details(ticker)",
        "    ",
        "    ",
        "  if (",
        "ls, \"type\", None) != \"CS\"",
        "s, \"market_cap\", None) is None",
        "   ):",
        "   return",
        "= details.sic_code",
        "iption = getattr(",
        "sic_description\", None",
        "   )  ",
        "(details, \"market_cap\", None)",
        "    ",
        "    ",
        " sic_code:",
        "ic_code_to_group(sic_code)",
        "ic_group is None:",
        "     return",
        "      ",
        "      ",
        "      ",
        " not in sic_code_groups:",
        "e_groups[sic_group] = {",
        "_description\": sic_group,",
        "  \"companies\": [],",
        "        }",
        "      ",
        "      ",
        "      ",
        "      ",
        "      ",
        "ic_group][\"companies\"].append(",
        "ker, \"market_cap\": market_cap}",
        "      )",
        "ception as e:",
        "ssing ticker {ticker}: {e}\")",
        "",
        "snapshot_all(\"stocks\")",
        "",
        "ecutor(max_workers=100) as executor:",
        "ess_ticker, snapshot)",
        "",
        "n sic_code_groups.items():",
        "up_data[\"companies\"]",
        "ket_cap = sum(",
        "ny in companies if company[\"market_cap\"]",
        "  )",
        "  ",
        "arket_cap == 0:",
        "continue",
        "y in companies:",
        "f company[",
        "\"market_cap\"",
        "  ]:  ",
        "any[\"market_cap\"] / total_market_cap",
        "  else:",
        "ny[\"weight\"] = 0  ",
        "",
        "oups.json\", \"w\") as f:",
        "c_code_groups, f)",
        "d saved to 'sic_code_groups.json'\")",
        "port RESTClient",
        "import defaultdict",
        "tp.server",
        "cketserver",
        "raceback",
        "t json",
        "",
        "= 8889",
        "",
        "l = ",
        "SimpleHTTPRequestHandler):",
        "te_data(self):",
        "lient = (",
        "RESTClient()",
        "   )  ",
        ".get_snapshot_all(\"stocks\")",
        "_changes = {",
        "(snapshot.todays_change_percent, 2)",
        "apshot in snapshots",
        "    }",
        "_groups.json\", \"r\") as file:",
        "roups = json.load(file)",
        "(lambda: defaultdict(list))",
        "ta in sic_code_groups.items():",
        "p_data[\"sic_description\"]",
        "n group_data[\"companies\"]:",
        "r = company[\"ticker\"]",
        "t = company[\"weight\"]",
        " pct_changes.get(ticker, 0.0)",
        "arent][ticker].append(",
        "weight\": weight, \"change\": pct_change}",
        "        )",
        " = dict(data)",
        ": \"root\", \"children\": []}",
        "ildren in data.items():",
        "ame\": parent, \"children\": []}",
        "panies in children.items():",
        "any[\"change\"] for company in companies)",
        "ge / len(companies) if companies else 0",
        "ge = round(avg_change, 2)",
        " child_dict = {",
        "   \"name\": child,",
        "\"change\": avg_change,",
        "children\": companies,",
        "        }",
        "children\"].append(child_dict)",
        "ren\"].append(parent_dict)",
        "son.dumps(output)",
        "_GET(self):",
        "path == \"/data\":",
        "send_response(200)",
        "ntent-type\", \"application/json\")",
        "f.end_headers()",
        "= self.generate_data()",
        "rite(json_data.encode())",
        "  else:",
        "send_response(200)",
        "(\"Content-type\", \"text/html\")",
        "f.end_headers()",
        "e.write(html.encode())",
        "y:",
        "((\"\", PORT), handler) as httpd:",
        "ing at port\", PORT)",
        "serve_forever()",
        "ardInterrupt:",
        "ng gracefully...\")",
        "rt WebSocketClient",
        "ort WebSocketMessage, EquityTrade",
        " import List",
        "ubscriptions=[\"T.*\"])",
        "ageHandler:",
        "unt = 0",
        "gs: List[WebSocketMessage]):",
        " m in msgs:",
        "(m) == EquityTrade:",
        "int(self.count, m)",
        " self.count += 1",
        "eHandler()",
        "ist[WebSocketMessage]):",
        "e_msg(msgs)",
        "ndle_msg)",
        "rt WebSocketClient",
        "els import WebSocketMessage",
        " import List",
        "asyncio",
        "ubscriptions=[\"T.*\"])",
        ": List[WebSocketMessage]):",
        " in msgs:",
        "print(m)",
        "timeout():",
        "ncio.sleep(1)",
        "ubscribe_all\")",
        "scribe_all()",
        "ncio.sleep(1)",
        "(\"close\")",
        " c.close()",
        "f main():",
        "nnect(handle_msg), timeout())",
        "un(main())",
        "rt WebSocketClient",
        "import WebSocketMessage, Market",
        " import List",
        "t(market=Market.Crypto)",
        "",
        "ibe(\"XA.*\")  ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ist[WebSocketMessage]):",
        " in msgs:",
        "print(m)",
        "handle_msg)",
        "rt WebSocketClient",
        "els import WebSocketMessage",
        " import List",
        "",
        " orjson",
        "ns=[\"T.*\"], custom_json=orjson)",
        "ist[WebSocketMessage]):",
        " in msgs:",
        "print(m)",
        "ndle_msg)",
        "rt WebSocketClient",
        "ort WebSocketMessage, Feed, Market",
        " import List",
        "ess, market=Market.Stocks, verbose=True)",
        "",
        "ibe(\"FMV.*\")  ",
        "",
        "",
        "",
        "ist[WebSocketMessage]):",
        " in msgs:",
        "print(m)",
        "handle_msg)",
        "rt WebSocketClient",
        "import WebSocketMessage, Market",
        " import List",
        "nt(market=Market.Forex)",
        "",
        "",
        "e(\"CA.USD/CAD\")",
        "e(\"CA.USD/EUR\")",
        "e(\"CA.USD/AUD\")",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ist[WebSocketMessage]):",
        " in msgs:",
        "print(m)",
        "handle_msg)",
        "rt WebSocketClient",
        "import WebSocketMessage, Market",
        " import List",
        "t(market=Market.Indices)",
        "",
        "",
        "e(\"AM.I:SPX\")  ",
        "e(\"AM.I:DJI\")  ",
        "e(\"AM.I:NDX\")  ",
        "e(\"AM.I:VIX\")  ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ist[WebSocketMessage]):",
        " in msgs:",
        "print(m)",
        "handle_msg)",
        "rt WebSocketClient",
        "ort WebSocketMessage, EquityQuote",
        "port List, cast",
        "t time",
        "bscriptions=[\"Q.SPY\"])",
        "ist[WebSocketMessage]):",
        " in msgs:",
        " = cast(EquityQuote, m)",
        "stamp is not None:",
        "time.time() * 1000",
        "mestamp, now - q.timestamp)",
        "ndle_msg)",
        "rt WebSocketClient",
        "ort WebSocketMessage, Feed, Market",
        " import List",
        "SocketClient(",
        "=Feed.Launchpad, market=Market.Stocks",
        ")",
        "ibe(\"AM.*\")  ",
        "",
        "",
        "",
        "ist[WebSocketMessage]):",
        " in msgs:",
        "print(m)",
        "",
        "handle_msg)",
        "rt WebSocketClient",
        "import WebSocketMessage, Market",
        " import List",
        "",
        "",
        "",
        "",
        "SocketClient(",
        "arket.Options",
        "  ",
        "",
        "",
        "ribe(\"A.*\")  ",
        "",
        "",
        "",
        "",
        "",
        "ist[WebSocketMessage]):",
        " in msgs:",
        "print(m)",
        "",
        "handle_msg)",
        "rt WebSocketClient",
        "import Union",
        "t json",
        "iptions=[\"T.*\"], raw=True)",
        " Union[str, bytes]):",
        "n.loads(msgs))",
        "ndle_msg)",
        "rt WebSocketClient",
        "els import WebSocketMessage",
        " import List",
        "ubscriptions=[\"T.*\"])",
        "ist[WebSocketMessage]):",
        " in msgs:",
        "print(m)",
        "ndle_msg)",
        "rt WebSocketClient",
        "els import WebSocketMessage",
        " import List",
        "",
        "cketClient()  ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ribe(\"A.*\")  ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "ist[WebSocketMessage]):",
        " in msgs:",
        "print(m)",
        "",
        "handle_msg)",
        "rt WebSocketClient",
        "ort WebSocketMessage, EquityTrade",
        " import List",
        " import Dict",
        "import datetime",
        "t time",
        "hreading",
        "rt os",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        " = time.time()",
        "t[str, int] = {}",
        "[str, float] = {}",
        " = float(0)",
        "",
        "rs_seen = 0",
        "es_seen = 0",
        "traded = 0.0",
        "",
        "Dict[str, int] = {}",
        "ct[str, float] = {}",
        "tered(s: str):",
        "_terminal_size().columns",
        "ter(term_width))",
        "cket_client():",
        "  ",
        "SocketClient()  ",
        "scribe(\"T.*\")  ",
        "n(handle_msg)",
        "ist[WebSocketMessage]):",
        "cash_traded",
        "tal_trades_seen, total_cash_traded",
        " in msgs:",
        "ce(m, EquityTrade):",
        "      ",
        "tance(m.symbol, str):",
        "] = string_map.get(m.symbol, 0) + 1",
        "] = total_string_map.get(m.symbol, 0) + 1",
        "      ",
        "float) and isinstance(m.size, int):",
        "alue = m.price * m.size",
        "_traded += cash_value",
        "ash_map[m.symbol] = (  ",
        "p.get(m.symbol, 0) + cash_value  ",
        "        )",
        "        ",
        "map_5s[m.symbol] = (  ",
        ".get(m.symbol, 0) + cash_value  ",
        "       )  ",
        "        ",
        "_seen = len(total_string_map)",
        "al_trades_seen += 1",
        "ash_traded += cash_value",
        "unction():",
        "  ",
        " = time.time()",
        "cash_traded",
        "  ",
        "items(), key=lambda x: x[1], reverse=True)",
        "  ",
        "33c\", end=\"\")",
        "  ",
        "rint()",
        "- Past 5 seconds ---\")",
        "seen (5s): {len(string_map)}\")",
        "(5s): {sum(string_map.values())}\")",
        "ded (5s): {cash_traded:,.2f}\")",
        "rint()",
        "- Running Totals ---\")",
        "ers seen: {total_tickers_seen}\")",
        "des seen: {total_trades_seen}\")",
        "raded: {total_cash_traded:,.2f}\")",
        "  ",
        "rint()",
        "(\"-\" * 100 + \"\\n\")",
        "  ",
        "_centered(",
        "20}{:<20}{:<20}\".format(",
        "ash (5s)\", \"Total Trades\", \"Total Cash\"",
        "    )",
        "  )",
        "  ",
        ".items(), key=lambda x: x[1], reverse=True)[",
        "   :25",
        " ]:",
        "_map_5s.get(ticker, 0)",
        "total_string_map[ticker]",
        "_cash_map.get(ticker, 0.0)",
        "nt_centered(",
        ",.2f}{:<20}{:<20,.2f}\".format(",
        "cash_5s, total_trades, total_cash",
        "      )",
        "    )",
        "  ",
        "= time.time()",
        " = datetime.now()",
        "  ",
        ".time() - app_start_time",
        "od(elapsed_time, 3600)",
        "s = divmod(rem, 60)",
        "  ",
        "rint()",
        "_centered(",
        "utes):02}:{int(seconds):02} | Time taken: {end_time - start_time:.6f} seconds\"",
        "  )",
        "  ",
        "map.clear()",
        "p_5s.clear()",
        "traded = 0",
        "_periodically():",
        "le True:",
        "_function()",
        "me.sleep(5)",
        "get=run_function_periodically)",
        "target=run_websocket_client)",
        ".start()",
        ".start()",
        ".join()",
        ".join()",
        "or(Exception):",
        "  ",
        "pass",
        "nse(Exception):",
        "  ",
        "pass",
        "logging",
        "t sys",
        "tr) -> logging.Logger:",
        "ng.getLogger(name)",
        "treamHandler(sys.stdout)",
        "me)s %(name)s %(levelname)s: %(message)s\")",
        "rmatter(formatter)",
        "andler(handler)",
        "rn logger",
        "inspect",
        " typing",
        " import dataclass",
        "TypeVar(\"_T\")",
        "ype[_T]) -> typing.Type[_T]:",
        "taclass(cls)",
        "butes = [",
        "    a",
        "__[\"__annotations__\"].keys()",
        "\") and not inspect.isroutine(a)",
        "  ]",
        " *args, **kwargs):",
        "n enumerate(args):",
        "< len(attributes):",
        "ict__[attributes[i]] = a",
        "in kwargs.items():",
        "k in attributes:",
        "lf.__dict__[k] = v",
        "it__ = init  ",
        "urn cls",
        "ort RESTClient",
        " import version",
        "ort WebSocketClient",
        "ions import *",
        "_ = version",
        "ort BaseClient",
        "ny, Dict, List, Union, Iterator",
        " DailyOpenCloseAgg, PreviousCloseAgg, Sort",
        "ort HTTPResponse",
        "ort datetime, date",
        "ort RequestOptionBuilder",
        "nt(BaseClient):",
        "ist_aggs(",
        "  self,",
        "cker: str,",
        "iplier: int,",
        "espan: str,",
        "    ",
        "r, int, datetime, date],",
        " int, datetime, date],",
        "tional[bool] = None,",
        "nion[str, Sort]] = None,",
        "ional[int] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "r[Agg], HTTPResponse]:",
        "    ",
        "ce(from_, datetime):",
        "stamp() * self.time_mult(\"millis\"))",
        "nce(to, datetime):",
        "mp() * self.time_mult(\"millis\"))",
        "ange/{multiplier}/{timespan}/{from_}/{to}\"",
        "self._paginate(",
        "  path=url,",
        "rams(self.list_aggs, locals()),",
        "  raw=raw,",
        "lizer=Agg.from_dict,",
        "tions=options,",
        "    )",
        "get_aggs(",
        "  self,",
        "cker: str,",
        "iplier: int,",
        "espan: str,",
        "    ",
        "r, int, datetime, date],",
        " int, datetime, date],",
        "tional[bool] = None,",
        "nion[str, Sort]] = None,",
        "ional[int] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "Agg], HTTPResponse]:",
        "    ",
        "ce(from_, datetime):",
        "stamp() * self.time_mult(\"millis\"))",
        "nce(to, datetime):",
        "mp() * self.time_mult(\"millis\"))",
        "ange/{multiplier}/{timespan}/{from_}/{to}\"",
        "rn self._get(",
        "  path=url,",
        "arams(self.get_aggs, locals()),",
        "lt_key=\"results\",",
        "lizer=Agg.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "  ",
        "  ",
        "uped_daily_aggs(",
        "  self,",
        "nion[str, date],",
        "tional[bool] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "e: str = \"us\",",
        "e: str = \"stocks\",",
        "tc: bool = False,",
        "equestOptionBuilder] = None,",
        "dDailyAgg], HTTPResponse]:",
        "    ",
        "e/{locale}/market/{market_type}/{date}\"",
        "rn self._get(",
        "  path=url,",
        "elf.get_grouped_daily_aggs, locals()),",
        "lt_key=\"results\",",
        "GroupedDailyAgg.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "y_open_close_agg(",
        "  self,",
        "cker: str,",
        "nion[str, date],",
        "tional[bool] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "CloseAgg, HTTPResponse]:",
        "    ",
        "n-close/{ticker}/{date}\"",
        "rn self._get(",
        "  path=url,",
        "lf.get_daily_open_close_agg, locals()),",
        "ailyOpenCloseAgg.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "vious_close_agg(",
        "  self,",
        "cker: str,",
        "tional[bool] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "CloseAgg, HTTPResponse]:",
        "    ",
        "s/ticker/{ticker}/prev\"",
        "rn self._get(",
        "  path=url,",
        "elf.get_previous_close_agg, locals()),",
        "lt_key=\"results\",",
        "reviousCloseAgg.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "certifi",
        "t json",
        "urllib3",
        "inspect",
        "retry import Retry",
        "import Enum",
        "Optional, Any, Dict",
        "import datetime",
        " version, PackageNotFoundError",
        "ort RequestOptionBuilder",
        "mport get_logger",
        "logging",
        " import urlencode",
        "t AuthError, BadResponse",
        "ger(\"RESTClient\")",
        "r = \"unknown\"",
        "y:",
        "ion(\"polygon-api-client\")",
        "NotFoundError:",
        "pass",
        "seClient:",
        "__init__(",
        "  self,",
        ": Optional[str],",
        "_timeout: float,",
        "imeout: float,",
        "_pools: int,",
        "tries: int,",
        "ase: str,",
        "bose: bool,",
        "ace: bool,",
        "Optional[Any] = None,",
        " ):",
        "i_key is None:",
        "ise AuthError(",
        "GON_API_KEY or pass api_key in constructor\"",
        "      )",
        "I_KEY = api_key",
        ".BASE = base",
        ".headers = {",
        ": \"Bearer \" + self.API_KEY,",
        "-Encoding\": \"gzip\",",
        ".io PythonClient/{version_number}\",",
        "    }",
        "    ",
        "tries = retries",
        "    ",
        "trategy = Retry(",
        "al=self.retries,",
        "tus_forcelist=[",
        "      413,",
        "      429,",
        "      499,",
        "      500,",
        "      502,",
        "      503,",
        "      504,",
        "    ],  ",
        "off_factor=0.1,  ",
        "    )",
        "    ",
        "    ",
        " urllib3.PoolManager(",
        "pools=num_pools,",
        "rs=self.headers,  ",
        "ts=certifi.where(),",
        "qs=\"CERT_REQUIRED\",",
        "s=retry_strategy,  ",
        "    )",
        "nnect=connect_timeout, read=read_timeout)",
        "f verbose:",
        "tLevel(logging.DEBUG)",
        "trace = trace",
        "custom_json:",
        "json = custom_json",
        "  else:",
        "lf.json = json",
        "e(self, resp):",
        "ds(resp.data.decode(\"utf-8\"))",
        "f _get(",
        "  self,",
        "ath: str,",
        "ional[dict] = None,",
        "Optional[str] = None,",
        "ializer=None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "-> Any:",
        "s not None else RequestOptionBuilder()",
        "cat_headers(option.headers)",
        "self.trace:",
        "= f\"{self.BASE}{path}\"",
        " if params:",
        "+= f\"?{urlencode(params)}\"",
        "ders = headers.copy()",
        "ation\" in print_headers:",
        "\"] = print_headers[\"Authorization\"].replace(",
        "lf.API_KEY, \"REDACTED\"",
        "        )",
        "quest URL: {full_url}\")",
        " Headers: {print_headers}\")",
        "lf.client.request(",
        "   \"GET\",",
        "lf.BASE + path,",
        "ields=params,",
        "aders=headers,",
        "    )",
        "self.trace:",
        " = dict(resp.headers.items())",
        "Headers: {resp_headers_dict}\")",
        ".status != 200:",
        "e(resp.data.decode(\"utf-8\"))",
        " if raw:",
        " return resp",
        "  try:",
        "self._decode(resp)",
        "ValueError as e:",
        "ecoding json response: {e}\")",
        "  return []",
        "result_key:",
        "ult_key not in obj:",
        "    return []",
        "= obj[result_key]",
        "eserializer:",
        "ype(obj) == list:",
        "erializer(o) for o in obj]",
        "    else:",
        " = deserializer(obj)",
        "eturn obj",
        "ticmethod",
        "stamp_res: str) -> int:",
        "mp_res == \"nanos\":",
        "turn 1000000000",
        "amp_res == \"micros\":",
        "eturn 1000000",
        "amp_res == \"millis\":",
        " return 1000",
        "return 1",
        "et_params(",
        "str, Any], datetime_res: str = \"nanos\"",
        " ):",
        "ler_locals[\"params\"]",
        "rams is None:",
        " params = {}",
        "    ",
        ".signature(fn).parameters.items():",
        "      ",
        " in [\"params\", \"raw\"]:",
        "    continue",
        "efault != v.empty:",
        "        ",
        "locals.get(argname, v.default)",
        "sinstance(val, Enum):",
        "   val = val.value",
        "isinstance(val, bool):",
        "al = str(val).lower()",
        "instance(val, datetime):",
        "stamp() * self.time_mult(datetime_res))",
        "f val is not None:",
        "t\", \"lte\", \"gt\", \"gte\", \"any_of\"]:",
        "argname.endswith(f\"_{ext}\"):",
        "              ",
        "              ",
        "              ",
        "argname[: -len(f\"_{ext}\")] + f\".{ext}\"",
        "gname.endswith(\"any_of\"):",
        "   val = \",\".join(val)",
        "params[argname] = val",
        "turn params",
        "tional[Dict[str, str]]) -> Dict[str, str]:",
        "aders is None:",
        "urn self.headers",
        "ders, **self.headers}",
        "ginate_iter(",
        "  self,",
        "ath: str,",
        "rams: dict,",
        "serializer,",
        ": str = \"results\",",
        "equestOptionBuilder] = None,",
        " ):",
        "hile True:",
        "sp = self._get(",
        "   path=path,",
        " params=params,",
        "ializer=deserializer,",
        "ult_key=result_key,",
        "    raw=True,",
        "options=options,",
        "      )",
        "    try:",
        "d = self._decode(resp)",
        "t ValueError as e:",
        " decoding json response: {e}\")",
        "    return []",
        "t_key not in decoded:",
        "    return []",
        " decoded[result_key]:",
        "eld deserializer(t)",
        "xt_url\" in decoded:",
        "next_url\"].replace(self.BASE, \"\")",
        "   params = {}",
        "    else:",
        "     return",
        "paginate(",
        "  self,",
        "ath: str,",
        "rams: dict,",
        "aw: bool,",
        "serializer,",
        ": str = \"results\",",
        "equestOptionBuilder] = None,",
        " ):",
        " if raw:",
        "turn self._get(",
        "   path=path,",
        " params=params,",
        "ializer=deserializer,",
        "    raw=True,",
        "options=options,",
        "      )",
        "lf._paginate_iter(",
        " path=path,",
        "arams=params,",
        "lizer=deserializer,",
        "t_key=result_key,",
        "tions=options,",
        "    )",
        ".common import SeriesType",
        "ls.indicators import (",
        "atorResults,",
        "atorResults,",
        "atorResults,",
        "catorResults,",
        ")",
        "ort BaseClient",
        "al, Any, Dict, List, Union",
        " import Order",
        "ort HTTPResponse",
        "ort datetime, date",
        "ort RequestOptionBuilder",
        "lient(BaseClient):",
        "get_sma(",
        "  self,",
        "cker: str,",
        "str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "ptional[str] = None,",
        "tional[int] = None,",
        "tional[bool] = None,",
        "g: Optional[bool] = None,",
        "nion[str, Order]] = None,",
        "ional[int] = None,",
        "[Dict[str, Any]] = None,",
        "Union[str, SeriesType]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "orResults, HTTPResponse]:",
        "    ",
        "dicators/sma/{ticker}\"",
        "rn self._get(",
        "  path=url,",
        "arams(self.get_sma, locals()),",
        "lt_key=\"results\",",
        "AIndicatorResults.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "get_ema(",
        "  self,",
        "cker: str,",
        "str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "ptional[str] = None,",
        "tional[int] = None,",
        "tional[bool] = None,",
        "g: Optional[bool] = None,",
        "nion[str, Order]] = None,",
        "ional[int] = None,",
        "[Dict[str, Any]] = None,",
        "Union[str, SeriesType]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "orResults, HTTPResponse]:",
        "    ",
        "dicators/ema/{ticker}\"",
        "rn self._get(",
        "  path=url,",
        "arams(self.get_ema, locals()),",
        "lt_key=\"results\",",
        "AIndicatorResults.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "get_rsi(",
        "  self,",
        "cker: str,",
        "str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "ptional[str] = None,",
        "tional[int] = None,",
        "tional[bool] = None,",
        "g: Optional[bool] = None,",
        "nion[str, Order]] = None,",
        "ional[int] = None,",
        "[Dict[str, Any]] = None,",
        "Union[str, SeriesType]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "orResults, HTTPResponse]:",
        "    ",
        "dicators/rsi/{ticker}\"",
        "rn self._get(",
        "  path=url,",
        "arams(self.get_rsi, locals()),",
        "lt_key=\"results\",",
        "IIndicatorResults.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "get_macd(",
        "  self,",
        "cker: str,",
        "str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "ptional[str] = None,",
        " Optional[int] = None,",
        "Optional[int] = None,",
        " Optional[int] = None,",
        "tional[bool] = None,",
        "g: Optional[bool] = None,",
        "nion[str, Order]] = None,",
        "ional[int] = None,",
        "[Dict[str, Any]] = None,",
        "Union[str, SeriesType]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "torResults, HTTPResponse]:",
        "    ",
        "dicators/macd/{ticker}\"",
        "rn self._get(",
        "  path=url,",
        "arams(self.get_macd, locals()),",
        "lt_key=\"results\",",
        "DIndicatorResults.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "ort BaseClient",
        ", Any, Dict, Union, Iterator",
        "ls import (",
        "uote,",
        "tQuote,",
        "orexQuote,",
        "rencyConversion,",
        "Sort,",
        "rder,",
        "cision,",
        ")",
        "ort HTTPResponse",
        "ort datetime, date",
        "ort RequestOptionBuilder",
        "",
        "ent(BaseClient):",
        "st_quotes(",
        "  self,",
        "cker: str,",
        "str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "ional[int] = None,",
        "nion[str, Sort]] = None,",
        "nion[str, Order]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "[Quote], HTTPResponse]:",
        "    ",
        "3/quotes/{ticker}\"",
        "self._paginate(",
        "  path=url,",
        "ams(self.list_quotes, locals()),",
        "  raw=raw,",
        "izer=Quote.from_dict,",
        "tions=options,",
        "    )",
        "_last_quote(",
        "  self,",
        "cker: str,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "uote, HTTPResponse]:",
        "    ",
        "/last/nbbo/{ticker}\"",
        "rn self._get(",
        "  path=url,",
        "arams=params,",
        "lt_key=\"results\",",
        "er=LastQuote.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "st_forex_quote(",
        "  self,",
        "rom_: str,",
        "to: str,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "exQuote, HTTPResponse]:",
        "    ",
        "ote/currencies/{from_}/{to}\"",
        "rn self._get(",
        "  path=url,",
        "arams=params,",
        "LastForexQuote.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "_currency_conversion(",
        "  self,",
        "rom_: str,",
        "to: str,",
        "ional[float] = None,",
        "on[int, Precision] = 2,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "ncyConversion, HTTPResponse]:",
        "    ",
        "nversion/{from_}/{to}\"",
        "rn self._get(",
        "  path=url,",
        "t_real_time_currency_conversion, locals()),",
        "meCurrencyConversion.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "ort BaseClient",
        "ny, Dict, List, Union, Iterator",
        "ls import (",
        "tHoliday,",
        "etStatus,",
        "icker,",
        "angeResults,",
        "rDetails,",
        "kerNews,",
        "edCompany,",
        "erTypes,",
        "Sort,",
        "rder,",
        "etClass,",
        "ocale,",
        "plit,",
        "vidend,",
        "dendType,",
        "quency,",
        "dition,",
        "taType,",
        "SIP,",
        "change,",
        "sContract,",
        ")",
        "ort HTTPResponse",
        "e import date",
        "ort RequestOptionBuilder",
        "ent(BaseClient):",
        "rket_holidays(",
        "str, Any]] = None, raw: bool = False",
        "tHoliday], HTTPResponse]:",
        "    ",
        "arketstatus/upcoming\"",
        "rn self._get(",
        "  path=url,",
        "arams=params,",
        "=MarketHoliday.from_dict,",
        "  raw=raw,",
        "esult_key=\"\",",
        "    )",
        "arket_status(",
        "str, Any]] = None, raw: bool = False",
        "Status, HTTPResponse]:",
        "    ",
        "/marketstatus/now\"",
        "rn self._get(",
        "erializer=MarketStatus.from_dict, raw=raw",
        "    )",
        "ent(BaseClient):",
        "st_tickers(",
        "  self,",
        "tional[str] = None,",
        "ptional[str] = None,",
        "Optional[str] = None,",
        "ptional[str] = None,",
        "Optional[str] = None,",
        "ional[str] = None,",
        "tional[str] = None,",
        "ptional[str] = None,",
        "ional[int] = None,",
        "onal[int] = None,",
        "ional[str] = None,",
        "ional[bool] = None,",
        "tional[str] = None,",
        "tional[int] = 10,",
        "on[str, Sort]] = \"ticker\",",
        "nion[str, Order]] = \"asc\",",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "[Ticker], HTTPResponse]:",
        "    ",
        "/reference/tickers\"",
        "self._paginate(",
        "  path=url,",
        "ams(self.list_tickers, locals()),",
        "  raw=raw,",
        "zer=Ticker.from_dict,",
        "tions=options,",
        "    )",
        "icker_details(",
        "  self,",
        "tional[str] = None,",
        "ional[str] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "etails, HTTPResponse]:",
        "    ",
        "erence/tickers/{ticker}\"",
        "rn self._get(",
        "  path=url,",
        "(self.get_ticker_details, locals()),",
        "=TickerDetails.from_dict,",
        "  raw=raw,",
        "lt_key=\"results\",",
        "tions=options,",
        "    )",
        "icker_events(",
        "  self,",
        "cker: str,",
        "ional[str] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "geResults, HTTPResponse]:",
        "    ",
        "ce/tickers/{ticker}/events\"",
        "rn self._get(",
        "  path=url,",
        "(self.get_ticker_events, locals()),",
        "ckerChangeResults.from_dict,",
        "lt_key=\"results\",",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "_ticker_news(",
        "  self,",
        "tional[str] = None,",
        "ptional[str] = None,",
        "Optional[str] = None,",
        "ptional[str] = None,",
        "Optional[str] = None,",
        " Optional[str] = None,",
        "t: Optional[str] = None,",
        "e: Optional[str] = None,",
        "t: Optional[str] = None,",
        "e: Optional[str] = None,",
        "ional[int] = None,",
        "nion[str, Sort]] = None,",
        "nion[str, Order]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "ickerNews], HTTPResponse]:",
        "    ",
        "2/reference/news\"",
        "self._paginate(",
        "  path=url,",
        "s(self.list_ticker_news, locals()),",
        "  raw=raw,",
        "r=TickerNews.from_dict,",
        "tions=options,",
        "    )",
        "ticker_types(",
        "  self,",
        "Union[str, AssetClass]] = None,",
        "nion[str, Locale]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "erTypes], HTTPResponse]:",
        "    ",
        "ference/tickers/types\"",
        "rn self._get(",
        "  path=url,",
        "s(self.get_ticker_types, locals()),",
        "r=TickerTypes.from_dict,",
        "  raw=raw,",
        "lt_key=\"results\",",
        "tions=options,",
        "    )",
        "ated_companies(",
        "  self,",
        "tional[str] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "Company, HTTPResponse]:",
        "    ",
        "ated-companies/{ticker}\"",
        "rn self._get(",
        "  path=url,",
        "elf.get_related_companies, locals()),",
        "RelatedCompany.from_dict,",
        "  raw=raw,",
        "lt_key=\"results\",",
        "tions=options,",
        "    )",
        "ent(BaseClient):",
        "st_splits(",
        "  self,",
        "tional[str] = None,",
        "ptional[str] = None,",
        "Optional[str] = None,",
        "ptional[str] = None,",
        "Optional[str] = None,",
        "nal[Union[str, date]] = None,",
        "ional[Union[str, date]] = None,",
        "ional[Union[str, date]] = None,",
        "ional[Union[str, date]] = None,",
        "ional[Union[str, date]] = None,",
        " Optional[bool] = None,",
        "ional[int] = None,",
        "nion[str, Sort]] = None,",
        "nion[str, Order]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "[Split], HTTPResponse]:",
        "    ",
        "/reference/splits\"",
        "self._paginate(",
        "  path=url,",
        "ams(self.list_splits, locals()),",
        "  raw=raw,",
        "izer=Split.from_dict,",
        "tions=options,",
        "    )",
        "ient(BaseClient):",
        "t_dividends(",
        "  self,",
        "tional[str] = None,",
        "ptional[str] = None,",
        "Optional[str] = None,",
        "ptional[str] = None,",
        "Optional[str] = None,",
        "onal[Union[str, date]] = None,",
        "tional[Union[str, date]] = None,",
        "tional[Union[str, date]] = None,",
        "tional[Union[str, date]] = None,",
        "tional[Union[str, date]] = None,",
        "al[Union[str, date]] = None,",
        "nal[Union[str, date]] = None,",
        "onal[Union[str, date]] = None,",
        "nal[Union[str, date]] = None,",
        "onal[Union[str, date]] = None,",
        "onal[Union[str, date]] = None,",
        "tional[Union[str, date]] = None,",
        "tional[Union[str, date]] = None,",
        "tional[Union[str, date]] = None,",
        "tional[Union[str, date]] = None,",
        "[Union[str, date]] = None,",
        "al[Union[str, date]] = None,",
        "al[Union[str, date]] = None,",
        "al[Union[str, date]] = None,",
        "al[Union[str, date]] = None,",
        "nion[int, Frequency]] = None,",
        "ptional[float] = None,",
        " Optional[float] = None,",
        " Optional[float] = None,",
        " Optional[float] = None,",
        " Optional[float] = None,",
        "Union[str, DividendType]] = None,",
        "ional[int] = None,",
        "nion[str, Sort]] = None,",
        "nion[str, Order]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "Dividend], HTTPResponse]:",
        "    ",
        "reference/dividends\"",
        "self._paginate(",
        "  path=url,",
        "ms(self.list_dividends, locals()),",
        "  raw=raw,",
        "er=Dividend.from_dict,",
        "tions=options,",
        "    )",
        "lient(BaseClient):",
        "_conditions(",
        "  self,",
        "Union[str, AssetClass]] = None,",
        "Union[str, DataType]] = None,",
        "onal[int] = None,",
        "nion[str, SIP]] = None,",
        "ional[int] = None,",
        "nion[str, Sort]] = None,",
        "nion[str, Order]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "ondition], HTTPResponse]:",
        "    ",
        "eference/conditions\"",
        "self._paginate(",
        "  path=url,",
        "s(self.list_conditions, locals()),",
        "  raw=raw,",
        "er=Condition.from_dict,",
        "tions=options,",
        "    )",
        "ient(BaseClient):",
        "_exchanges(",
        "  self,",
        "Union[str, AssetClass]] = None,",
        "nion[str, Locale]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "change], HTTPResponse]:",
        "    ",
        "reference/exchanges\"",
        "rn self._get(",
        "  path=url,",
        "ms(self.get_exchanges, locals()),",
        "er=Exchange.from_dict,",
        "  raw=raw,",
        "lt_key=\"results\",",
        "tions=options,",
        "    )",
        "ient(BaseClient):",
        "tions_contract(",
        "  self,",
        "cker: str,",
        "Union[str, date]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "ontract, HTTPResponse]:",
        "    ",
        "e/options/contracts/{ticker}\"",
        "rn self._get(",
        "  path=url,",
        "self.get_options_contract, locals()),",
        "lt_key=\"results\",",
        "OptionsContract.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "tions_contracts(",
        "  self,",
        "r: Optional[str] = None,",
        "_lt: Optional[str] = None,",
        "lte: Optional[str] = None,",
        "_gt: Optional[str] = None,",
        "gte: Optional[str] = None,",
        " Optional[str] = None,",
        "onal[Union[str, date]] = None,",
        "ional[Union[str, date]] = None,",
        "tional[Union[str, date]] = None,",
        "ional[Union[str, date]] = None,",
        "tional[Union[str, date]] = None,",
        "Union[str, date]] = None,",
        "Optional[float] = None,",
        " Optional[float] = None,",
        ": Optional[float] = None,",
        " Optional[float] = None,",
        ": Optional[float] = None,",
        "tional[bool] = None,",
        "ional[int] = None,",
        "nion[str, Sort]] = None,",
        "nion[str, Order]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "onsContract], HTTPResponse]:",
        "    ",
        "rence/options/contracts\"",
        "self._paginate(",
        "  path=url,",
        "elf.list_options_contracts, locals()),",
        "  raw=raw,",
        "OptionsContract.from_dict,",
        "tions=options,",
        "    )",
        "ort BaseClient",
        "ny, Dict, List, Union, Iterator",
        "ls import (",
        "rSnapshot,",
        "ection,",
        "tractSnapshot,",
        "tMarketType,",
        "ickerFullBook,",
        "alSnapshot,",
        "sSnapshot,",
        "Sort,",
        "rder,",
        ")",
        "ort HTTPResponse",
        "ort RequestOptionBuilder",
        "ion[SnapshotMarketType, str]):",
        "hotMarketType.STOCKS.value:",
        "eturn \"us\"",
        "n \"global\"",
        "ient(BaseClient):",
        "versal_snapshots(",
        "  self,",
        "r, SnapshotMarketType]] = None,",
        "tional[List[str]] = None,",
        "nion[str, Order]] = None,",
        "tional[int] = 10,",
        "nion[str, Sort]] = None,",
        "ptional[str] = None,",
        "Optional[str] = None,",
        "ptional[str] = None,",
        "Optional[str] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "rsalSnapshot], HTTPResponse]:",
        "    ",
        "f\"/v3/snapshot\"",
        "self._paginate(",
        "  path=url,",
        "lf.list_universal_snapshots, locals()),",
        "lt_key=\"results\",",
        "niversalSnapshot.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "snapshot_all(",
        "  self,",
        "[str, SnapshotMarketType],",
        "ion[str, List[str]]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "ptional[bool] = False,",
        "equestOptionBuilder] = None,",
        "rSnapshot], HTTPResponse]:",
        "    ",
        "_locale(market_type)",
        "locale}/markets/{market_type}/tickers\"",
        "tickers) is list:",
        " = \",\".join(tickers)",
        "rn self._get(",
        "  path=url,",
        "s(self.get_snapshot_all, locals()),",
        "TickerSnapshot.from_dict,",
        "  raw=raw,",
        "lt_key=\"tickers\",",
        "tions=options,",
        "    )",
        "pshot_direction(",
        "  self,",
        "[str, SnapshotMarketType],",
        "nion[str, Direction],",
        "[Dict[str, Any]] = None,",
        "ptional[bool] = False,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "rSnapshot], HTTPResponse]:",
        "    ",
        "_locale(market_type)",
        "cale}/markets/{market_type}/{direction}\"",
        "rn self._get(",
        "  path=url,",
        "elf.get_snapshot_direction, locals()),",
        "lt_key=\"tickers\",",
        "TickerSnapshot.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "apshot_ticker(",
        "  self,",
        "[str, SnapshotMarketType],",
        "cker: str,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "napshot, HTTPResponse]:",
        "    ",
        "_locale(market_type)",
        "e}/markets/{market_type}/tickers/{ticker}\"",
        "rn self._get(",
        "  path=url,",
        "self.get_snapshot_ticker, locals()),",
        "lt_key=\"ticker\",",
        "TickerSnapshot.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "apshot_option(",
        "  self,",
        "ing_asset: str,",
        "_contract: str,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "actSnapshot, HTTPResponse]:",
        "    ",
        "{underlying_asset}/{option_contract}\"",
        "rn self._get(",
        "  path=url,",
        "self.get_snapshot_option, locals()),",
        "lt_key=\"results\",",
        "onContractSnapshot.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "hot_options_chain(",
        "  self,",
        "ing_asset: str,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "ontractSnapshot], HTTPResponse]:",
        "    ",
        "/options/{underlying_asset}\"",
        "self._paginate(",
        "  path=url,",
        ".list_snapshot_options_chain, locals()),",
        "lt_key=\"results\",",
        "onContractSnapshot.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "shot_crypto_book(",
        "  self,",
        "cker: str,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "kerFullBook, HTTPResponse]:",
        "    ",
        "al/markets/crypto/tickers/{ticker}/book\"",
        "rn self._get(",
        "  path=url,",
        "lf.get_snapshot_crypto_book, locals()),",
        "ult_key=\"data\",",
        "shotTickerFullBook.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "apshot_indices(",
        "  self,",
        "[Union[str, List[str]]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "sSnapshot], HTTPResponse]:",
        "3/snapshot/indices\"",
        "rn self._get(",
        "  path=url,",
        "self.get_snapshot_indices, locals()),",
        "IndicesSnapshot.from_dict,",
        "  raw=raw,",
        "lt_key=\"results\",",
        "tions=options,",
        "    )",
        "mmaries import SummaryResult",
        "ort BaseClient",
        "al, Any, Dict, List, Union",
        "ort HTTPResponse",
        "ort RequestOptionBuilder",
        "ient(BaseClient):",
        "_summaries(",
        "  self,",
        "tional[List[str]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "ryResult], HTTPResponse]:",
        "    ",
        "\"/v1/summaries\"",
        "rn self._get(",
        "  path=url,",
        "ms(self.get_summaries, locals()),",
        "lt_key=\"results\",",
        "=SummaryResult.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "ort BaseClient",
        ", Any, Dict, Union, Iterator",
        "Trade, CryptoTrade, Sort, Order",
        "ort HTTPResponse",
        "ort datetime, date",
        "ort RequestOptionBuilder",
        "ent(BaseClient):",
        "st_trades(",
        "  self,",
        "cker: str,",
        "str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "n[str, int, datetime, date]] = None,",
        "ional[int] = None,",
        "nion[str, Sort]] = None,",
        "nion[str, Order]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "[Trade], HTTPResponse]:",
        "    ",
        "3/trades/{ticker}\"",
        "self._paginate(",
        "  path=url,",
        "ams(self.list_trades, locals()),",
        "  raw=raw,",
        "izer=Trade.from_dict,",
        "tions=options,",
        "    )",
        "_last_trade(",
        "  self,",
        "cker: str,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "rade, HTTPResponse]:",
        "    ",
        "last/trade/{ticker}\"",
        "rn self._get(",
        "  path=url,",
        "ms(self.get_last_trade, locals()),",
        "lt_key=\"results\",",
        "er=LastTrade.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "t_crypto_trade(",
        "  self,",
        "rom_: str,",
        "to: str,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "Trade, HTTPResponse]:",
        "    ",
        "st/crypto/{from_}/{to}\"",
        "rn self._get(",
        "  path=url,",
        "elf.get_last_crypto_trade, locals()),",
        "ult_key=\"last\",",
        "r=CryptoTrade.from_dict,",
        "  raw=raw,",
        "tions=options,",
        "    )",
        "ort BaseClient",
        "ny, Dict, List, Union, Iterator",
        " IPOListing, Timeframe, Sort, Order",
        "ort HTTPResponse",
        "ort datetime, date",
        "ort RequestOptionBuilder",
        "t(BaseClient):",
        "ock_financials(",
        "  self,",
        "tional[str] = None,",
        "onal[str] = None,",
        " Optional[str] = None,",
        "ch: Optional[str] = None,",
        "onal[str] = None,",
        "[str, int, datetime, date]] = None,",
        "on[str, int, datetime, date]] = None,",
        "on[str, int, datetime, date]] = None,",
        "on[str, int, datetime, date]] = None,",
        "on[str, int, datetime, date]] = None,",
        "Union[str, int, datetime, date]] = None,",
        "l[Union[str, int, datetime, date]] = None,",
        "l[Union[str, int, datetime, date]] = None,",
        "l[Union[str, int, datetime, date]] = None,",
        "l[Union[str, int, datetime, date]] = None,",
        "nion[str, Timeframe]] = None,",
        ": Optional[bool] = None,",
        "ional[int] = None,",
        "nion[str, Sort]] = None,",
        "nion[str, Order]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "ckFinancial], HTTPResponse]:",
        "    ",
        "eference/financials\"",
        "self._paginate(",
        "  path=url,",
        "elf.list_stock_financials, locals()),",
        "  raw=raw,",
        "StockFinancial.from_dict,",
        "tions=options,",
        "    )",
        "ist_ipos(",
        "  self,",
        "tional[str] = None,",
        "tional[str] = None,",
        "ional[str] = None,",
        " Optional[str] = None,",
        "Optional[str] = None,",
        "ional[int] = None,",
        "nion[str, Sort]] = None,",
        "nion[str, Order]] = None,",
        "[Dict[str, Any]] = None,",
        "bool = False,",
        "equestOptionBuilder] = None,",
        "Listing], HTTPResponse]:",
        "    ",
        "X/reference/ipos\"",
        "self._paginate(",
        "  path=url,",
        "rams(self.list_ipos, locals()),",
        "r=IPOListing.from_dict,",
        "  raw=raw,",
        "lt_key=\"results\",",
        "tions=options,",
        "    )",
        "ort AggsClient",
        "ort TradesClient",
        "ort QuotesClient",
        "ort SnapshotClient",
        "ort IndicatorsClient",
        "ort SummariesClient",
        "nce import (",
        "tsClient,",
        "rsClient,",
        "tsClient,",
        "ndsClient,",
        "ionsClient,",
        "gesClient,",
        "ctsClient,",
        ")",
        "ort VXClient",
        "rt Optional, Any",
        "rt os",
        "/api.polygon.io\"",
        "LYGON_API_KEY\"",
        "STClient(",
        "sClient,",
        "esClient,",
        "esClient,",
        "hotClient,",
        "tsClient,",
        "rsClient,",
        "tsClient,",
        "ndsClient,",
        "ionsClient,",
        "gesClient,",
        "ctsClient,",
        "torsClient,",
        "iesClient,",
        ":",
        "__init__(",
        "  self,",
        "str] = os.getenv(ENV_KEY),",
        "eout: float = 10.0,",
        "out: float = 10.0,",
        "ols: int = 10,",
        "ies: int = 3,",
        ": str = BASE,",
        ": bool = False,",
        " bool = False,",
        "Optional[Any] = None,",
        " ):",
        "r().__init__(",
        "i_key=api_key,",
        "meout=connect_timeout,",
        "meout=read_timeout,",
        "pools=num_pools,",
        "tries=retries,",
        " base=base,",
        "rbose=verbose,",
        "trace=trace,",
        "_json=custom_json,",
        "    )",
        "vx = VXClient(",
        "i_key=api_key,",
        "meout=connect_timeout,",
        "meout=read_timeout,",
        "pools=num_pools,",
        "tries=retries,",
        " base=base,",
        "rbose=verbose,",
        "trace=trace,",
        "_json=custom_json,",
        "    )",
        "mport Optional",
        " import modelclass",
        "lclass",
        " Agg:",
        " over a given date range in a custom time window size.\"",
        "al[float] = None",
        "al[float] = None",
        "al[float] = None",
        "nal[float] = None",
        "nal[float] = None",
        "al[float] = None",
        "tional[int] = None",
        "ptional[int] = None",
        "al[bool] = None",
        "ticmethod",
        "om_dict(d):",
        "eturn Agg(",
        "get(\"o\", None),",
        "get(\"h\", None),",
        "get(\"l\", None),",
        "get(\"c\", None),",
        "get(\"v\", None),",
        "et(\"vw\", None),",
        "get(\"t\", None),",
        "get(\"n\", None),",
        "et(\"otc\", None),",
        "    )",
        "lclass",
        "edDailyAgg:",
        "nd close (OHLC) data for a given date.\"",
        "onal[str] = None",
        "al[float] = None",
        "al[float] = None",
        "al[float] = None",
        "nal[float] = None",
        "nal[float] = None",
        "al[float] = None",
        "tional[int] = None",
        "ptional[int] = None",
        "al[bool] = None",
        "ticmethod",
        "om_dict(d):",
        "GroupedDailyAgg(",
        "get(\"T\", None),",
        "get(\"o\", None),",
        "get(\"h\", None),",
        "get(\"l\", None),",
        "get(\"c\", None),",
        "get(\"v\", None),",
        "et(\"vw\", None),",
        "get(\"t\", None),",
        "get(\"n\", None),",
        "et(\"otc\", None),",
        "    )",
        "lclass",
        "penCloseAgg:",
        "s prices of a ticker symbol on a specified date.\"",
        "tional[float] = None",
        "nal[float] = None",
        "onal[str] = None",
        "al[float] = None",
        "al[float] = None",
        "al[float] = None",
        "ional[float] = None",
        "onal[str] = None",
        "onal[str] = None",
        "nal[float] = None",
        "al[bool] = None",
        "ticmethod",
        "om_dict(d):",
        "ailyOpenCloseAgg(",
        "afterHours\", None),",
        "t(\"close\", None),",
        "t(\"from\", None),",
        "t(\"high\", None),",
        "et(\"low\", None),",
        "t(\"open\", None),",
        "\"preMarket\", None),",
        "(\"status\", None),",
        "(\"symbol\", None),",
        "(\"volume\", None),",
        "et(\"otc\", None),",
        "    )",
        "lclass",
        "ousCloseAgg:",
        " low, and close (OHLC) of the specified stock ticker.\"",
        "onal[str] = None",
        "nal[float] = None",
        "al[float] = None",
        "al[float] = None",
        "al[float] = None",
        "ional[float] = None",
        "nal[float] = None",
        "al[float] = None",
        "ticmethod",
        "om_dict(d):",
        "reviousCloseAgg(",
        "get(\"T\", None),",
        "get(\"c\", None),",
        "get(\"h\", None),",
        "get(\"l\", None),",
        "get(\"o\", None),",
        "get(\"t\", None),",
        "get(\"v\", None),",
        "et(\"vw\", None),",
        "    )",
        "import Enum",
        "rt(Enum):",
        " = \"asc\"",
        " = \"desc\"",
        "er(Enum):",
        " = \"asc\"",
        " = \"desc\"",
        "ale(Enum):",
        " = \"us\"",
        " = \"global\"",
        "ket(Enum):",
        " = \"stocks\"",
        " = \"crypto\"",
        " = \"fx\"",
        " = \"otc\"",
        " = \"indices\"",
        "Class(Enum):",
        " = \"stocks\"",
        " = \"options\"",
        " = \"crypto\"",
        " = \"fx\"",
        " = \"indices\"",
        "ndType(Enum):",
        " = \"CD\"",
        " = \"SC\"",
        " = \"LT\"",
        " = \"ST\"",
        "ency(Enum):",
        "TIME = 0",
        "ALLY = 1",
        "UALLY = 2",
        "TERLY = 4",
        "HLY = 12",
        "Type(Enum):",
        "DE = \"trade\"",
        "BO = \"bbo\"",
        "BO = \"nbbo\"",
        "P(Enum):",
        " = \"CTA\"",
        " = \"UTP\"",
        " = \"OPRA\"",
        "geType(Enum):",
        " = \"exchange\"",
        " = \"TRF\"",
        " = \"SIP\"",
        "tion(Enum):",
        " = \"gainers\"",
        " = \"losers\"",
        "arketType(Enum):",
        " = \"stocks\"",
        " = \"forex\"",
        " = \"crypto\"",
        " = \"indices\"",
        "rame(Enum):",
        " = \"annual\"",
        " = \"quarterly\"",
        "sion(Enum):",
        "RO = 0",
        "NE = 1",
        "WO = 2",
        "REE = 3",
        "UR = 4",
        "sType(Enum):",
        " = \"open\"",
        " = \"close\"",
        " = \"high\"",
        " = \"low\"",
        "dOptions(Enum):",
        " = \"X-Polygon-Edge-ID\"",
        "\"X-Polygon-Edge-IP-Address\"",
        " = \"X-Polygon-Edge-User-Agent\"",
        "rt Optional, List",
        " import modelclass",
        "lclass",
        "pMapping:",
        "l for each SIP that has a given condition.\"",
        "nal[str] = None",
        "nal[str] = None",
        "nal[str] = None",
        "ticmethod",
        "om_dict(d):",
        "SipMapping(**d)",
        "lclass",
        "solidated:",
        "on a consolidated (all exchanges) basis.\"",
        " Optional[bool] = None",
        ": Optional[bool] = None",
        "Optional[bool] = None",
        "ticmethod",
        "om_dict(d):",
        "onsolidated(**d)",
        "lclass",
        "ketCenter:",
        "rules on a per-market-center basis.\"",
        " Optional[bool] = None",
        ": Optional[bool] = None",
        "Optional[bool] = None",
        "ticmethod",
        "om_dict(d):",
        "arketCenter(**d)",
        "lclass",
        "ateRules:",
        "ist of aggregation rules.\"",
        "nal[Consolidated] = None",
        "nal[MarketCenter] = None",
        "ticmethod",
        "om_dict(d):",
        "n UpdateRules(",
        "onsolidated=(",
        "      None",
        "onsolidated\" not in d",
        "ed.from_dict(d[\"consolidated\"])",
        "     ),",
        "arket_center=(",
        "      None",
        "arket_center\" not in d",
        "er.from_dict(d[\"market_center\"])",
        "     ),",
        "    )",
        "lclass",
        "ndition:",
        "a condition that Polygon.io uses.\"",
        "ptional[str] = None",
        "ptional[str] = None",
        "nal[List[str]] = None",
        "ptional[str] = None",
        "ional[int] = None",
        "al[int] = None",
        "onal[bool] = None",
        "nal[str] = None",
        "nal[SipMapping] = None",
        "nal[str] = None",
        "nal[UpdateRules] = None",
        "ticmethod",
        "om_dict(d):",
        "rn Condition(",
        ".get(\"abbreviation\", None),",
        ".get(\"asset_class\", None),",
        ".get(\"data_types\", None),",
        ".get(\"description\", None),",
        ".get(\"exchange\", None),",
        ".get(\"id\", None),",
        ".get(\"legacy\", None),",
        ".get(\"name\", None),",
        "sip_mapping=(",
        "      None",
        "sip_mapping\" not in d",
        "ng.from_dict(d[\"sip_mapping\"])",
        "     ),",
        ".get(\"type\", None),",
        "pdate_rules=(",
        "      None",
        "pdate_rules\" not in d",
        "es.from_dict(d[\"update_rules\"])",
        "     ),",
        "    )",
        "rt Optional, List",
        " import modelclass",
        "lclass",
        "derlying:",
        "r deliverable associated with an option contract.\"",
        "nal[float] = None",
        "nal[str] = None",
        "tional[str] = None",
        "ticmethod",
        "om_dict(d):",
        "Underlying(**d)",
        "lclass",
        "nsContract:",
        "a for a specified ticker symbol.\"",
        "tional[List[Underlying]] = None",
        "nal[str] = None",
        "Optional[str] = None",
        "tional[str] = None",
        "Optional[str] = None",
        " Optional[str] = None",
        " Optional[str] = None",
        ": Optional[float] = None",
        "tional[float] = None",
        "onal[str] = None",
        ": Optional[str] = None",
        "ticmethod",
        "om_dict(d):",
        "OptionsContract(",
        "onal_underlyings=(",
        "      None",
        "onal_underlyings\" not in d",
        "t(u) for u in d[\"additional_underlyings\"]]",
        "     ),",
        ".get(\"cfi\", None),",
        ".get(\"contract_type\", None),",
        ".get(\"correction\", None),",
        ".get(\"exercise_style\", None),",
        ".get(\"expiration_date\", None),",
        ".get(\"primary_exchange\", None),",
        ".get(\"shares_per_contract\", None),",
        ".get(\"strike_price\", None),",
        ".get(\"size\", None),",
        ".get(\"ticker\", None),",
        ".get(\"underlying_ticker\", None),",
        "    )",
        "mport Optional",
        " import modelclass",
        "lclass",
        "ividend:",
        "ol, declaration date, ex-dividend date, record date, pay date, frequency, and amount.\"",
        "al[int] = None",
        "tional[float] = None",
        "ional[str] = None",
        " Optional[str] = None",
        "Optional[str] = None",
        " Optional[str] = None",
        "tional[int] = None",
        "ional[str] = None",
        "ptional[str] = None",
        "onal[str] = None",
        "ticmethod",
        "om_dict(d):",
        " Dividend(**d)",
        "mport Optional",
        " import modelclass",
        "lclass",
        "xchange:",
        " condition that Polygon.io uses.\"",
        "ional[str] = None",
        "ptional[str] = None",
        "al[int] = None",
        "onal[str] = None",
        "nal[str] = None",
        "nal[str] = None",
        "Optional[str] = None",
        "Optional[str] = None",
        "nal[str] = None",
        "nal[str] = None",
        "ticmethod",
        "om_dict(d):",
        " Exchange(**d)",
        " import dataclass",
        ", Dict, List, Optional",
        " import modelclass",
        "lclass",
        "class",
        "taPoint:",
        "  ",
        "onal[str] = None",
        "onal[int] = None",
        "nal[str] = None",
        "nal[float] = None",
        "onal[List[str]] = None",
        "ional[str] = None",
        "Dict[str, str]] = None",
        "onal[str] = None",
        "ticmethod",
        "ict[str, Any]]) -> \"DataPoint\":",
        "if not d:",
        "urn DataPoint()",
        "rn DataPoint(",
        "l=d.get(\"label\"),",
        "r=d.get(\"order\"),",
        "t=d.get(\"unit\"),",
        "e=d.get(\"value\"),",
        "m=d.get(\"derived_from\"),",
        "a=d.get(\"formula\"),",
        "e=d.get(\"source\"),",
        "h=d.get(\"xpath\"),",
        "    )",
        "class",
        "lclass",
        "anceSheet:",
        "l[DataPoint] = None",
        "ional[DataPoint] = None",
        "[DataPoint] = None",
        "Optional[DataPoint] = None",
        "nal[DataPoint] = None",
        "tional[DataPoint] = None",
        "Optional[DataPoint] = None",
        "ptional[DataPoint] = None",
        " Optional[DataPoint] = None",
        "onal[DataPoint] = None",
        "ptional[DataPoint] = None",
        "e: Optional[DataPoint] = None",
        ": Optional[DataPoint] = None",
        "onal[DataPoint] = None",
        "Optional[DataPoint] = None",
        "tional[DataPoint] = None",
        "tional[DataPoint] = None",
        "l[DataPoint] = None",
        "s: Optional[DataPoint] = None",
        " Optional[DataPoint] = None",
        "ional[DataPoint] = None",
        "es: Optional[DataPoint] = None",
        "ies: Optional[DataPoint] = None",
        "erest: Optional[DataPoint] = None",
        "st_common: Optional[DataPoint] = None",
        "st_other: Optional[DataPoint] = None",
        "_preferred: Optional[DataPoint] = None",
        "l[DataPoint] = None",
        "ng_interest: Optional[DataPoint] = None",
        "ent: Optional[DataPoint] = None",
        "tional[DataPoint] = None",
        "o_parent: Optional[DataPoint] = None",
        " Optional[DataPoint] = None",
        "ticmethod",
        "ct[str, Any]]) -> \"BalanceSheet\":",
        "if not d:",
        "rn BalanceSheet()",
        " BalanceSheet(",
        ".from_dict(d.get(\"assets\")),",
        ".from_dict(d.get(\"current_assets\")),",
        ".from_dict(d.get(\"cash\")),",
        ".from_dict(d.get(\"accounts_receivable\")),",
        ".from_dict(d.get(\"inventory\")),",
        ".from_dict(d.get(\"prepaid_expenses\")),",
        ".from_dict(d.get(\"other_current_assets\")),",
        ".from_dict(d.get(\"noncurrent_assets\")),",
        ".from_dict(d.get(\"long_term_investments\")),",
        ".from_dict(d.get(\"fixed_assets\")),",
        ".from_dict(d.get(\"intangible_assets\")),",
        "d_expense=DataPoint.from_dict(",
        "ncurrent_prepaid_expense\")",
        "     ),",
        "_assets=DataPoint.from_dict(",
        "ther_noncurrent_assets\")",
        "     ),",
        ".from_dict(d.get(\"liabilities\")),",
        ".from_dict(d.get(\"current_liabilities\")),",
        ".from_dict(d.get(\"accounts_payable\")),",
        ".from_dict(d.get(\"interest_payable\")),",
        ".from_dict(d.get(\"wages\")),",
        "bilities=DataPoint.from_dict(",
        "her_current_liabilities\")",
        "     ),",
        ".from_dict(d.get(\"noncurrent_liabilities\")),",
        ".from_dict(d.get(\"long_term_debt\")),",
        "iabilities=DataPoint.from_dict(",
        "er_noncurrent_liabilities\")",
        "     ),",
        "tingencies=DataPoint.from_dict(",
        "itments_and_contingencies\")",
        "     ),",
        "ling_interest=DataPoint.from_dict(",
        "able_noncontrolling_interest\")",
        "     ),",
        "_interest_common=DataPoint.from_dict(",
        "_noncontrolling_interest_common\")",
        "     ),",
        "g_interest_other=DataPoint.from_dict(",
        "e_noncontrolling_interest_other\")",
        "     ),",
        "interest_preferred=DataPoint.from_dict(",
        "noncontrolling_interest_preferred\")",
        "     ),",
        ".from_dict(d.get(\"equity\")),",
        "ontrolling_interest=DataPoint.from_dict(",
        "butable_to_noncontrolling_interest\")",
        "     ),",
        "_to_parent=DataPoint.from_dict(",
        "ty_attributable_to_parent\")",
        "     ),",
        ".from_dict(d.get(\"temporary_equity\")),",
        "table_to_parent=DataPoint.from_dict(",
        "_equity_attributable_to_parent\")",
        "     ),",
        ".from_dict(d.get(\"liabilities_and_equity\")),",
        "    )",
        "class",
        "lclass",
        "owStatement:",
        "tivities: Optional[DataPoint] = None",
        "es_continuing: Optional[DataPoint] = None",
        "s_discontinued: Optional[DataPoint] = None",
        "tivities: Optional[DataPoint] = None",
        "es_continuing: Optional[DataPoint] = None",
        "s_discontinued: Optional[DataPoint] = None",
        "tivities: Optional[DataPoint] = None",
        "es_continuing: Optional[DataPoint] = None",
        "s_discontinued: Optional[DataPoint] = None",
        " Optional[DataPoint] = None",
        "ional[DataPoint] = None",
        ": Optional[DataPoint] = None",
        "d: Optional[DataPoint] = None",
        "ticmethod",
        "str, Any]]) -> \"CashFlowStatement\":",
        "if not d:",
        "CashFlowStatement()",
        "ashFlowStatement(",
        "ting_activities=DataPoint.from_dict(",
        "flow_from_operating_activities\")",
        "     ),",
        "activities_continuing=DataPoint.from_dict(",
        "from_operating_activities_continuing\")",
        "     ),",
        "ctivities_discontinued=DataPoint.from_dict(",
        "rom_operating_activities_discontinued\")",
        "     ),",
        "ting_activities=DataPoint.from_dict(",
        "flow_from_investing_activities\")",
        "     ),",
        "activities_continuing=DataPoint.from_dict(",
        "from_investing_activities_continuing\")",
        "     ),",
        "ctivities_discontinued=DataPoint.from_dict(",
        "rom_investing_activities_discontinued\")",
        "     ),",
        "cing_activities=DataPoint.from_dict(",
        "flow_from_financing_activities\")",
        "     ),",
        "activities_continuing=DataPoint.from_dict(",
        "from_financing_activities_continuing\")",
        "     ),",
        "ctivities_discontinued=DataPoint.from_dict(",
        "rom_financing_activities_discontinued\")",
        "     ),",
        ".from_dict(d.get(\"exchange_gains_losses\")),",
        ".from_dict(d.get(\"net_cash_flow\")),",
        "ntinuing=DataPoint.from_dict(",
        "et_cash_flow_continuing\")",
        "     ),",
        "continued=DataPoint.from_dict(",
        "t_cash_flow_discontinued\")",
        "     ),",
        "    )",
        "class",
        "lclass",
        "ensiveIncome:",
        "s: Optional[DataPoint] = None",
        "le_to_noncontrolling_interest: Optional[",
        "DataPoint",
        "= None",
        "le_to_parent: Optional[DataPoint] = None",
        "loss: Optional[DataPoint] = None",
        "table_to_noncontrolling_interest: Optional[",
        "DataPoint",
        "= None",
        "table_to_parent: Optional[DataPoint] = None",
        "ticmethod",
        "tr, Any]]) -> \"ComprehensiveIncome\":",
        "if not d:",
        "omprehensiveIncome()",
        "mprehensiveIncome(",
        "ome_loss=DataPoint.from_dict(",
        "mprehensive_income_loss\")",
        "     ),",
        "e_to_noncontrolling_interest=DataPoint.from_dict(",
        "     d.get(",
        "oss_attributable_to_noncontrolling_interest\"",
        "        )",
        "     ),",
        "tributable_to_parent=DataPoint.from_dict(",
        "_income_loss_attributable_to_parent\")",
        "     ),",
        "income_loss=DataPoint.from_dict(",
        "_comprehensive_income_loss\")",
        "     ),",
        "able_to_noncontrolling_interest=DataPoint.from_dict(",
        "     d.get(",
        "e_loss_attributable_to_noncontrolling_interest\"",
        "        )",
        "     ),",
        "_attributable_to_parent=DataPoint.from_dict(",
        "ive_income_loss_attributable_to_parent\")",
        "     ),",
        "    )",
        "class",
        "lclass",
        "eStatement:",
        "al[DataPoint] = None",
        ": Optional[DataPoint] = None",
        "tional[DataPoint] = None",
        " Optional[DataPoint] = None",
        ": Optional[DataPoint] = None",
        "ptional[DataPoint] = None",
        "onal[DataPoint] = None",
        "et_tax: Optional[DataPoint] = None",
        ": Optional[DataPoint] = None",
        "ptional[DataPoint] = None",
        "e_expenses: Optional[DataPoint] = None",
        "ion: Optional[DataPoint] = None",
        ": Optional[DataPoint] = None",
        ": Optional[DataPoint] = None",
        " Optional[DataPoint] = None",
        "nses: Optional[DataPoint] = None",
        "nvestments: Optional[DataPoint] = None",
        "ns_after_tax: Optional[DataPoint] = None",
        "ns_before_tax: Optional[DataPoint] = None",
        "ons_net_of_tax: Optional[DataPoint] = None",
        "adjustment_to_prior_year_gain_loss_on_disposal: Optional[",
        "DataPoint",
        "= None",
        "ons_net_of_tax_during_phase_out: Optional[",
        "DataPoint",
        "= None",
        "_net_of_tax_gain_loss_on_disposal: Optional[",
        "DataPoint",
        "= None",
        "_tax_provision_for_gain_loss_on_disposal: Optional[",
        "DataPoint",
        "= None",
        "vestments: Optional[DataPoint] = None",
        "t: Optional[DataPoint] = None",
        "rrent: Optional[DataPoint] = None",
        "ferred: Optional[DataPoint] = None",
        "e: Optional[DataPoint] = None",
        "erating: Optional[DataPoint] = None",
        "g: Optional[DataPoint] = None",
        "on_for_losses: Optional[DataPoint] = None",
        "ing_net: Optional[DataPoint] = None",
        "Optional[DataPoint] = None",
        "ptional[DataPoint] = None",
        "er_losses: Optional[DataPoint] = None",
        "tional[DataPoint] = None",
        "rolling_interest: Optional[DataPoint] = None",
        "eemable_noncontrolling_interest: Optional[",
        "DataPoint",
        "= None",
        "_parent: Optional[DataPoint] = None",
        "emable_noncontrolling_interest: Optional[",
        "DataPoint",
        "= None",
        "ckholders_basic: Optional[DataPoint] = None",
        "_and_undistributed_earnings_loss_basic: (",
        "nal[DataPoint]",
        " (None)",
        "o_participating_securities_basic: Optional[",
        "DataPoint",
        "= None",
        "_adjustments: Optional[DataPoint] = None",
        ": Optional[DataPoint] = None",
        "e: Optional[DataPoint] = None",
        "Optional[DataPoint] = None",
        " Optional[DataPoint] = None",
        " Optional[DataPoint] = None",
        "ticmethod",
        "[str, Any]]) -> \"IncomeStatement\":",
        "if not d:",
        " IncomeStatement()",
        "IncomeStatement(",
        ".from_dict(d.get(\"revenues\")),",
        "xpenses=DataPoint.from_dict(",
        "enefits_costs_expenses\")",
        "     ),",
        ".from_dict(d.get(\"cost_of_revenue\")),",
        ".from_dict(d.get(\"cost_of_revenue_goods\")),",
        "services=DataPoint.from_dict(",
        "ost_of_revenue_services\")",
        "     ),",
        ".from_dict(d.get(\"costs_and_expenses\")),",
        ".from_dict(d.get(\"gross_profit\")),",
        "erties_net_tax=DataPoint.from_dict(",
        "ss_on_sale_properties_net_tax\")",
        "     ),",
        "ome_loss=DataPoint.from_dict(",
        "onoperating_income_loss\")",
        "     ),",
        ".from_dict(d.get(\"operating_expenses\")),",
        "strative_expenses=DataPoint.from_dict(",
        "eral_and_administrative_expenses\")",
        "     ),",
        "ortization=DataPoint.from_dict(",
        "eciation_and_amortization\")",
        "     ),",
        "elopment=DataPoint.from_dict(",
        "esearch_and_development\")",
        "     ),",
        "expenses=DataPoint.from_dict(",
        "ther_operating_expenses\")",
        "     ),",
        ".from_dict(d.get(\"operating_income_loss\")),",
        "me_expenses=DataPoint.from_dict(",
        "_operating_income_expenses\")",
        "     ),",
        "method_investments=DataPoint.from_dict(",
        "_before_equity_method_investments\")",
        "     ),",
        "operations_after_tax=DataPoint.from_dict(",
        "rom_continuing_operations_after_tax\")",
        "     ),",
        "perations_before_tax=DataPoint.from_dict(",
        "om_continuing_operations_before_tax\")",
        "     ),",
        "operations_net_of_tax=DataPoint.from_dict(",
        "m_discontinued_operations_net_of_tax\")",
        "     ),",
        "djustment_to_prior_year_gain_loss_on_disposal=DataPoint.from_dict(",
        "     d.get(",
        "s_net_of_tax_adjustment_to_prior_year_gain_loss_on_disposal\"",
        "        )",
        "     ),",
        "ns_net_of_tax_during_phase_out=DataPoint.from_dict(",
        "     d.get(",
        "inued_operations_net_of_tax_during_phase_out\"",
        "        )",
        "     ),",
        "net_of_tax_gain_loss_on_disposal=DataPoint.from_dict(",
        "     d.get(",
        "ued_operations_net_of_tax_gain_loss_on_disposal\"",
        "        )",
        "     ),",
        "tax_provision_for_gain_loss_on_disposal=DataPoint.from_dict(",
        "     d.get(",
        "rations_net_of_tax_provision_for_gain_loss_on_disposal\"",
        "        )",
        "     ),",
        "ethod_investments=DataPoint.from_dict(",
        "s_from_equity_method_investments\")",
        "     ),",
        "e_benefit=DataPoint.from_dict(",
        "come_tax_expense_benefit\")",
        "     ),",
        "nefit_current=DataPoint.from_dict(",
        "_tax_expense_benefit_current\")",
        "     ),",
        "efit_deferred=DataPoint.from_dict(",
        "tax_expense_benefit_deferred\")",
        "     ),",
        "_expense=DataPoint.from_dict(",
        "terest_and_debt_expense\")",
        "     ),",
        "ncome_operating=DataPoint.from_dict(",
        "_and_dividend_income_operating\")",
        "     ),",
        "operating=DataPoint.from_dict(",
        "terest_expense_operating\")",
        "     ),",
        "_provision_for_losses=DataPoint.from_dict(",
        "e_expense_after_provision_for_losses\")",
        "     ),",
        "_operating_net=DataPoint.from_dict(",
        "_income_expense_operating_net\")",
        "     ),",
        ".from_dict(d.get(\"noninterest_expense\")),",
        ".from_dict(d.get(\"noninterest_income\")),",
        "and_other_losses=DataPoint.from_dict(",
        "for_loan_lease_and_other_losses\")",
        "     ),",
        ".from_dict(d.get(\"net_income_loss\")),",
        "noncontrolling_interest=DataPoint.from_dict(",
        "ttributable_to_noncontrolling_interest\")",
        "     ),",
        "emable_noncontrolling_interest=DataPoint.from_dict(",
        "     d.get(",
        "able_to_nonredeemable_noncontrolling_interest\"",
        "        )",
        "     ),",
        "table_to_parent=DataPoint.from_dict(",
        "me_loss_attributable_to_parent\")",
        "     ),",
        "mable_noncontrolling_interest=DataPoint.from_dict(",
        "     d.get(",
        "table_to_redeemable_noncontrolling_interest\"",
        "        )",
        "     ),",
        "mmon_stockholders_basic=DataPoint.from_dict(",
        "available_to_common_stockholders_basic\")",
        "     ),",
        "undistributed_earnings_loss_basic=DataPoint.from_dict(",
        "     d.get(",
        "stributed_and_undistributed_earnings_loss_basic\"",
        "        )",
        "     ),",
        "_participating_securities_basic=DataPoint.from_dict(",
        "     d.get(",
        "ss_allocated_to_participating_securities_basic\"",
        "        )",
        "     ),",
        "d_other_adjustments=DataPoint.from_dict(",
        "ck_dividends_and_other_adjustments\")",
        "     ),",
        "er_share=DataPoint.from_dict(",
        "asic_earnings_per_share\")",
        "     ),",
        "per_share=DataPoint.from_dict(",
        "luted_earnings_per_share\")",
        "     ),",
        ".from_dict(d.get(\"basic_average_shares\")),",
        ".from_dict(d.get(\"diluted_average_shares\")),",
        ".from_dict(d.get(\"common_stock_dividends\")),",
        "    )",
        "class",
        "lclass",
        "nancials:",
        "  ",
        "nal[BalanceSheet] = None",
        "onal[CashFlowStatement] = None",
        "nal[ComprehensiveIncome] = None",
        "nal[IncomeStatement] = None",
        "ticmethod",
        "ict[str, Any]]) -> \"Financials\":",
        "if not d:",
        "urn Financials()",
        "n Financials(",
        "et.from_dict(d.get(\"balance_sheet\")),",
        "t=CashFlowStatement.from_dict(",
        "\"cash_flow_statement\")",
        "     ),",
        "e=ComprehensiveIncome.from_dict(",
        "\"comprehensive_income\")",
        "     ),",
        "ent.from_dict(d.get(\"income_statement\")),",
        "    )",
        "class",
        "lclass",
        "kFinancial:",
        "  ",
        "nal[str] = None",
        "ptional[str] = None",
        "ional[str] = None",
        "ptional[str] = None",
        "nal[Financials] = None",
        "Optional[str] = None",
        "ptional[str] = None",
        "rl: Optional[str] = None",
        ": Optional[str] = None",
        "tional[str] = None",
        "ticmethod",
        "t[str, Any]]) -> \"StockFinancial\":",
        "if not d:",
        "n StockFinancial()",
        "StockFinancial(",
        "k=d.get(\"cik\"),",
        "e=d.get(\"company_name\"),",
        "e=d.get(\"end_date\"),",
        "e=d.get(\"filing_date\"),",
        "from_dict(d.get(\"financials\", {})),",
        "d=d.get(\"fiscal_period\"),",
        "r=d.get(\"fiscal_year\"),",
        "l=d.get(\"source_filing_file_url\"),",
        "l=d.get(\"source_filing_url\"),",
        "e=d.get(\"start_date\"),",
        "    )",
        "mport Timestamp",
        "al, Any, Dict, List, Union",
        " import modelclass",
        " import Agg",
        "lclass",
        "catorValue:",
        "dicators with a single value.\"",
        "tional[int] = None",
        "nal[float] = None",
        "ticmethod",
        "om_dict(d):",
        "IndicatorValue(",
        ".get(\"timestamp\", None),",
        ".get(\"value\", None),",
        "    )",
        "lclass",
        "dicatorValue:",
        "m for all MACD values.\"",
        "tional[int] = None",
        "nal[float] = None",
        "nal[float] = None",
        "ional[float] = None",
        "ticmethod",
        "om_dict(d):",
        "CDIndicatorValue(",
        ".get(\"timestamp\", None),",
        ".get(\"value\", None),",
        ".get(\"signal\", None),",
        ".get(\"histogram\", None),",
        "    )",
        "lclass",
        "orUnderlying:",
        "e aggs used for building the indicator.\"",
        "nal[str] = None",
        "nal[List[Agg]] = None",
        "ticmethod",
        "om_dict(d):",
        "dicatorUnderlying(",
        ".get(\"url\", None),",
        "(a) for a in d.get(\"aggregates\", [])],",
        "    )",
        "lclass",
        "dicatorResults:",
        " values and Underlying.\"",
        "t[IndicatorValue]] = None",
        "ndicatorUnderlying] = None",
        "ticmethod",
        "om_dict(d):",
        "leIndicatorResults(",
        "dict(v) for v in (d.get(\"values\", []))],",
        "ng.from_dict(d.get(\"underlying\", None)),",
        "    )",
        "SingleIndicatorResults",
        "SingleIndicatorResults",
        "SingleIndicatorResults",
        "lclass",
        "icatorResults:",
        " values and Underlying.\"",
        "MACDIndicatorValue]] = None",
        "ndicatorUnderlying] = None",
        "ticmethod",
        "om_dict(d):",
        "DIndicatorResults(",
        "m_dict(v) for v in (d.get(\"values\", []))],",
        "ng.from_dict(d.get(\"underlying\", None)),",
        "    )",
        "mport Optional",
        " import modelclass",
        "lclass",
        "tCurrencies:",
        "y market status data.\"",
        "onal[str] = None",
        "al[str] = None",
        "ticmethod",
        "om_dict(d):",
        "ketCurrencies(**d)",
        "lclass",
        "tExchanges:",
        "e market status data.\"",
        "onal[str] = None",
        "nal[str] = None",
        "nal[str] = None",
        "ticmethod",
        "om_dict(d):",
        "rketExchanges(**d)",
        "lclass",
        "etIndices:",
        " market status data.\"",
        "ional[str] = None",
        " Optional[str] = None",
        "nal[str] = None",
        "nal[str] = None",
        "ptional[str] = None",
        "onal[str] = None",
        "onal[str] = None",
        "nal[str] = None",
        "onal[str] = None",
        "tional[str] = None",
        "ticmethod",
        "om_dict(d):",
        "arketIndices(**d)",
        "lclass",
        "etHoliday:",
        " market holidays and their open/close times.\"",
        "onal[str] = None",
        "nal[str] = None",
        "ional[str] = None",
        "nal[str] = None",
        "nal[str] = None",
        "onal[str] = None",
        "ticmethod",
        "om_dict(d):",
        "arketHoliday(**d)",
        "lclass",
        "ketStatus:",
        " status of the exchanges and overall financial markets.\"",
        "tional[bool] = None",
        "[MarketCurrencies] = None",
        "tional[bool] = None",
        "[MarketExchanges] = None",
        "nal[MarketIndices] = None",
        "onal[str] = None",
        "ptional[str] = None",
        "ticmethod",
        "om_dict(d):",
        " MarketStatus(",
        ".get(\"afterHours\", None),",
        "currencies=(",
        "      None",
        "currencies\" not in d",
        "ncies.from_dict(d[\"currencies\"])",
        "     ),",
        ".get(\"earlyHours\", None),",
        " exchanges=(",
        "      None",
        "\"exchanges\" not in d",
        "anges.from_dict(d[\"exchanges\"])",
        "     ),",
        "ndicesGroups=(",
        "      None",
        "ndicesGroups\" not in d",
        "es.from_dict(d[\"indicesGroups\"])",
        "     ),",
        ".get(\"market\", None),",
        ".get(\"serverTime\", None),",
        "    )",
        "rt Optional, List",
        " import modelclass",
        "lclass",
        "Quote:",
        "for a specified ticker symbol.\"",
        "ptional[int] = None",
        "ional[float] = None",
        "onal[float] = None",
        "ptional[int] = None",
        "ional[float] = None",
        "onal[float] = None",
        "nal[List[int]] = None",
        "nal[List[int]] = None",
        "mp: Optional[int] = None",
        " Optional[int] = None",
        "Optional[int] = None",
        "nal[int] = None",
        "Optional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "rn Quote(**d)",
        "lclass",
        "stQuote:",
        "ecent NBBO (Quote) tick for a given stock.\"",
        "onal[str] = None",
        "Optional[int] = None",
        " Optional[int] = None",
        "Optional[int] = None",
        "mp: Optional[int] = None",
        "ional[float] = None",
        "ional[int] = None",
        "ptional[int] = None",
        "nal[List[int]] = None",
        "nal[List[int]] = None",
        "ional[float] = None",
        "ional[int] = None",
        "ptional[int] = None",
        "nal[int] = None",
        "ticmethod",
        "om_dict(d):",
        "rn LastQuote(",
        "=d.get(\"T\", None),",
        "tamp=d.get(\"f\", None),",
        "umber=d.get(\"q\", None),",
        "tamp=d.get(\"t\", None),",
        "imestamp=d.get(\"y\", None),",
        "ce=d.get(\"P\", None),",
        "e=d.get(\"S\", None),",
        "nge=d.get(\"X\", None),",
        "ns=d.get(\"c\", None),",
        "rs=d.get(\"i\", None),",
        "ce=d.get(\"p\", None),",
        "e=d.get(\"s\", None),",
        "nge=d.get(\"x\", None),",
        "d.get(\"z\", None),",
        "    )",
        "lclass",
        "rexQuote:",
        "for a forex quote.\"",
        "al[float] = None",
        "al[float] = None",
        "ional[int] = None",
        "tional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "ForexQuote(**d)",
        "lclass",
        "ForexQuote:",
        "last quote tick for a forex currency pair.\"",
        "[ForexQuote] = None",
        "onal[str] = None",
        "ticmethod",
        "om_dict(d):",
        "LastForexQuote(",
        "d else ForexQuote.from_dict(d[\"last\"]),",
        ".get(\"symbol\", None),",
        "    )",
        "lclass",
        "rrencyConversion:",
        "cy conversions using the latest market conversion rates.\"",
        "ional[float] = None",
        "onal[str] = None",
        "ptional[float] = None",
        "[ForexQuote] = None",
        "al[str] = None",
        "ticmethod",
        "om_dict(d):",
        "meCurrencyConversion(",
        ".get(\"converted\", None),",
        ".get(\"from_\", None),",
        ".get(\"initialAmount\", None),",
        "d else ForexQuote.from_dict(d[\"last\"]),",
        ".get(\"to\", None),",
        "    )",
        "rt Dict, Optional",
        " \"X-Polygon-Edge-ID\"",
        " \"X-Polygon-Edge-IP-Address\"",
        " \"X-Polygon-Edge-User-Agent\"",
        " \"header\"",
        "OptionBuilder:",
        "__init__(",
        "  self,",
        "tional[str] = None,",
        ": Optional[str] = None,",
        "ptional[str] = None,",
        " ):",
        "    ",
        "onal[Dict[str, str]] = None",
        "and edge_ip_address is not None:",
        "f.edge_headers(",
        "ddress=edge_ip_address, edge_user=edge_user",
        "      )",
        "ge_headers(",
        "  self,",
        "ge_id: str,",
        "p_address: str,",
        "ptional[str] = None,",
        "tOptionBuilder\":",
        "    ",
        ": Dict[str, str] = {",
        "ON_EDGE_ID: edge_id,",
        "IP_ADDRESS: edge_ip_address,",
        "    }",
        "user is not None:",
        "GON_EDGE_USER_AGENT] = edge_user",
        "e_headers(**edge_headers)",
        "eturn self",
        "e_edge_header(",
        "  self,",
        "tional[str] = None,",
        ": Optional[str] = None,",
        "ptional[str] = None,",
        "tOptionBuilder\":",
        "    ",
        "headers is None:",
        "RequestOptionError(",
        "elds prior to using update function.\"",
        "      )",
        ": Dict[str, str] = {}",
        "_id is not None:",
        "_POLYGON_EDGE_ID] = edge_id",
        "address is not None:",
        "_EDGE_IP_ADDRESS] = edge_ip_address",
        "user is not None:",
        "GON_EDGE_USER_AGENT] = edge_user",
        "e_headers(**edge_headers)",
        "eturn self",
        "aders(self, **headers):",
        "headers is None:",
        "lf.headers = {}",
        "n headers.items():",
        "f.headers[k] = v",
        "nError(Exception):",
        "Optional, List, Dict",
        " import Agg",
        "mport LastQuote",
        "mport LastTrade",
        " import modelclass",
        "lclass",
        "teSnapshot:",
        "nt minute bar.\"",
        " Optional[float] = None",
        "al[float] = None",
        "al[float] = None",
        "al[float] = None",
        "nal[float] = None",
        "nal[float] = None",
        "al[float] = None",
        "al[bool] = None",
        "tional[int] = None",
        "ptional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "MinuteSnapshot(",
        "et(\"av\", None),",
        "get(\"o\", None),",
        "get(\"h\", None),",
        "get(\"l\", None),",
        "get(\"c\", None),",
        "get(\"v\", None),",
        "et(\"vw\", None),",
        "et(\"otc\", None),",
        "get(\"t\", None),",
        "get(\"n\", None),",
        "    )",
        "lclass",
        "cesSession:",
        "nt daily bar in an options contract.\"",
        "nal[float] = None",
        "ptional[float] = None",
        "nal[float] = None",
        "al[float] = None",
        "al[float] = None",
        "al[float] = None",
        "ptional[float] = None",
        "ticmethod",
        "om_dict(d):",
        "dicesSession(**d)",
        "lclass",
        "esSnapshot:",
        "nal[float] = None",
        "nal[str] = None",
        "nal[str] = None",
        "onal[str] = None",
        "Optional[str] = None",
        "IndicesSession] = None",
        "onal[str] = None",
        "ional[str] = None",
        "ticmethod",
        "om_dict(d):",
        "IndicesSnapshot(",
        ".get(\"value\", None),",
        ".get(\"name\", None),",
        ".get(\"type\", None),",
        ".get(\"ticker\", None),",
        ".get(\"market_status\", None),",
        "  session=(",
        "else IndicesSession.from_dict(d[\"session\"])",
        "     ),",
        ".get(\"error\", None),",
        ".get(\"message\", None),",
        "    )",
        "lclass",
        "erSnapshot:",
        "et data for all traded ticker symbols.\"",
        "nal[Agg] = None",
        "nal[LastQuote] = None",
        "nal[LastTrade] = None",
        "nuteSnapshot] = None",
        "ional[Agg] = None",
        "onal[str] = None",
        "ptional[float] = None",
        "t: Optional[float] = None",
        "ional[int] = None",
        " Optional[float] = None",
        "ticmethod",
        "om_dict(d):",
        "TickerSnapshot(",
        "in d else Agg.from_dict(d[\"day\"]),",
        "last_quote=(",
        " d else LastQuote.from_dict(d[\"lastQuote\"])",
        "     ),",
        "last_trade=(",
        " d else LastTrade.from_dict(d[\"lastTrade\"])",
        "     ),",
        "else MinuteSnapshot.from_dict(d[\"min\"]),",
        "ot in d else Agg.from_dict(d[\"prevDay\"]),",
        ".get(\"ticker\", None),",
        ".get(\"todaysChange\", None),",
        "=d.get(\"todaysChangePerc\", None),",
        ".get(\"updated\", None),",
        "value=d.get(\"fmv\", None),",
        "    )",
        "lclass",
        "ontractSnapshot:",
        "nt daily bar in an options contract.\"",
        "nal[float] = None",
        "ptional[float] = None",
        "nal[float] = None",
        "al[float] = None",
        "ptional[int] = None",
        "al[float] = None",
        "al[float] = None",
        "ptional[float] = None",
        "nal[float] = None",
        "al[float] = None",
        "ticmethod",
        "om_dict(d):",
        "onContractSnapshot(**d)",
        "lclass",
        "onDetails:",
        "or an options contract.\"",
        "Optional[str] = None",
        "Optional[str] = None",
        " Optional[str] = None",
        ": Optional[float] = None",
        "tional[float] = None",
        "onal[str] = None",
        "ticmethod",
        "om_dict(d):",
        "ptionDetails(**d)",
        "lclass",
        "onContractSnapshot:",
        "cent quote in an options contract.\"",
        "al[float] = None",
        "onal[float] = None",
        "al[float] = None",
        "onal[float] = None",
        "ptional[int] = None",
        "onal[float] = None",
        "tional[str] = None",
        "ticmethod",
        "om_dict(d):",
        "ptionContractSnapshot(**d)",
        "lclass",
        "onContractSnapshot:",
        "ent trade for an options contract.\"",
        "nal[float] = None",
        "Optional[int] = None",
        "nal[int] = None",
        "nal[List[int]] = None",
        "ional[int] = None",
        "tional[str] = None",
        "ticmethod",
        "om_dict(d):",
        "ptionContractSnapshot(**d)",
        "lclass",
        "Greeks:",
        "eeks in an options contract.\"",
        "nal[float] = None",
        "nal[float] = None",
        "nal[float] = None",
        "al[float] = None",
        "ticmethod",
        "om_dict(d):",
        "n Greeks(**d)",
        "lclass",
        "lyingAsset:",
        "ing stock in an options contract.\"",
        ": Optional[float] = None",
        "ptional[int] = None",
        "nal[float] = None",
        "nal[float] = None",
        "onal[str] = None",
        "tional[str] = None",
        "ticmethod",
        "om_dict(d):",
        "derlyingAsset(**d)",
        "lclass",
        "ntractSnapshot:",
        " an option contract of a stock equity.\"",
        "Optional[float] = None",
        "onContractSnapshot] = None",
        "[OptionDetails] = None",
        "nal[Greeks] = None",
        " Optional[float] = None",
        "teOptionContractSnapshot] = None",
        "deOptionContractSnapshot] = None",
        "ptional[float] = None",
        "nal[UnderlyingAsset] = None",
        " Optional[float] = None",
        "ticmethod",
        "om_dict(d):",
        "onContractSnapshot(",
        ".get(\"break_even_price\", None),",
        "    day=(",
        "      None",
        "if \"day\" not in d",
        "tractSnapshot.from_dict(d[\"day\"])",
        "     ),",
        "  details=(",
        " else OptionDetails.from_dict(d[\"details\"])",
        "     ),",
        "in d else Greeks.from_dict(d[\"greeks\"]),",
        ".get(\"implied_volatility\", None),",
        "last_quote=(",
        "      None",
        "last_quote\" not in d",
        "tractSnapshot.from_dict(d[\"last_quote\"])",
        "     ),",
        "last_trade=(",
        "      None",
        "last_trade\" not in d",
        "tractSnapshot.from_dict(d[\"last_trade\"])",
        "     ),",
        ".get(\"open_interest\", None),",
        "erlying_asset=(",
        "      None",
        "erlying_asset\" not in d",
        "et.from_dict(d[\"underlying_asset\"])",
        "     ),",
        "value=d.get(\"fmv\", None),",
        "    )",
        "lclass",
        "rBookQuote:",
        "r a book bid or ask.\"",
        "nal[float] = None",
        "al[Dict[str, float]] = None",
        "ticmethod",
        "om_dict(d):",
        "OrderBookQuote(",
        "get(\"p\", None),",
        "get(\"x\", None),",
        "    )",
        "lclass",
        "TickerFullBook:",
        "r. This is the combined book from all of the exchanges.\"",
        "onal[str] = None",
        "[OrderBookQuote]] = None",
        "[OrderBookQuote]] = None",
        "ional[float] = None",
        "ional[float] = None",
        "nal[float] = None",
        "ional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "shotTickerFullBook(",
        ".get(\"ticker\", None),",
        "   bids=(",
        "      None",
        "f \"bids\" not in d",
        "te.from_dict(o) for o in d[\"bids\"]]",
        "     ),",
        "   asks=(",
        "      None",
        "f \"asks\" not in d",
        "te.from_dict(o) for o in d[\"asks\"]]",
        "     ),",
        ".get(\"bidCount\", None),",
        ".get(\"askCount\", None),",
        ".get(\"spread\", None),",
        ".get(\"updated\", None),",
        "    )",
        "lclass",
        "SnapshotSession:",
        "  ",
        "nal[float] = None",
        "nal[float] = None",
        "ptional[float] = None",
        ": Optional[float] = None",
        "cent: Optional[float] = None",
        "e: Optional[float] = None",
        "rcent: Optional[float] = None",
        ": Optional[float] = None",
        "cent: Optional[float] = None",
        "al[float] = None",
        "nal[float] = None",
        "al[float] = None",
        "al[float] = None",
        "ptional[float] = None",
        "nal[float] = None",
        "ticmethod",
        "om_dict(d):",
        "alSnapshotSession(**d)",
        "lclass",
        "napshotLastQuote:",
        "  ",
        "al[float] = None",
        "onal[float] = None",
        "al[float] = None",
        "onal[float] = None",
        "onal[float] = None",
        "ional[int] = None",
        "tional[str] = None",
        "ptional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "lSnapshotLastQuote(**d)",
        "lclass",
        "napshotLastTrade:",
        "  ",
        "al[int] = None",
        "nal[float] = None",
        "nal[int] = None",
        "ional[int] = None",
        "nal[List[int]] = None",
        "tional[str] = None",
        "ptional[int] = None",
        "mp: Optional[int] = None",
        "Optional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "lSnapshotLastTrade(**d)",
        "lclass",
        "shotUnderlyingAsset:",
        "  ",
        "onal[str] = None",
        "nal[float] = None",
        "nal[float] = None",
        ": Optional[float] = None",
        "tional[str] = None",
        "ptional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "apshotUnderlyingAsset(**d)",
        "lclass",
        "SnapshotDetails:",
        "  ",
        "Optional[str] = None",
        "Optional[str] = None",
        " Optional[str] = None",
        ": Optional[float] = None",
        "tional[float] = None",
        "ticmethod",
        "om_dict(d):",
        "alSnapshotDetails(**d)",
        "lclass",
        "salSnapshot:",
        "  ",
        "onal[str] = None",
        "nal[str] = None",
        "rsalSnapshotSession] = None",
        "ersalSnapshotLastQuote] = None",
        "ersalSnapshotLastTrade] = None",
        "nal[Greeks] = None",
        "ersalSnapshotUnderlyingAsset] = None",
        "rsalSnapshotDetails] = None",
        "Optional[float] = None",
        " Optional[float] = None",
        "ptional[float] = None",
        "Optional[str] = None",
        "nal[str] = None",
        " Optional[float] = None",
        "onal[str] = None",
        "ional[str] = None",
        "ticmethod",
        "om_dict(d):",
        "niversalSnapshot(",
        ".get(\"ticker\", None),",
        ".get(\"type\", None),",
        "  session=(",
        "      None",
        " \"session\" not in d",
        "shotSession.from_dict(d[\"session\"])",
        "     ),",
        "last_quote=(",
        "      None",
        "last_quote\" not in d",
        "tLastQuote.from_dict(d[\"last_quote\"])",
        "     ),",
        "last_trade=(",
        "      None",
        "last_trade\" not in d",
        "tLastTrade.from_dict(d[\"last_trade\"])",
        "     ),",
        "in d else Greeks.from_dict(d[\"greeks\"]),",
        "erlying_asset=(",
        "      None",
        "erlying_asset\" not in d",
        "lyingAsset.from_dict(d[\"underlying_asset\"])",
        "     ),",
        "  details=(",
        "      None",
        " \"details\" not in d",
        "shotDetails.from_dict(d[\"details\"])",
        "     ),",
        ".get(\"break_even_price\", None),",
        ".get(\"implied_volatility\", None),",
        ".get(\"open_interest\", None),",
        ".get(\"market_status\", None),",
        ".get(\"name\", None),",
        "value=d.get(\"fmv\", None),",
        ".get(\"error\", None),",
        ".get(\"message\", None),",
        "    )",
        "mport Optional",
        " import modelclass",
        "lclass",
        "Split:",
        "icker symbol, the execution date, and the factors of the split ratio.\"",
        "al[int] = None",
        "Optional[str] = None",
        "tional[int] = None",
        "ional[int] = None",
        "onal[str] = None",
        "ticmethod",
        "om_dict(d):",
        "rn Split(**d)",
        "mport Timestamp",
        "mport Optional",
        " import modelclass",
        "import Branding",
        "lclass",
        "ession:",
        "for the summaries endpoint.\"",
        "nal[float] = None",
        "ptional[float] = None",
        ": Optional[float] = None",
        "cent: Optional[float] = None",
        ": Optional[float] = None",
        "cent: Optional[float] = None",
        "nal[float] = None",
        "al[float] = None",
        "al[float] = None",
        "al[float] = None",
        "ptional[float] = None",
        "nal[float] = None",
        "ticmethod",
        "om_dict(d):",
        "n Session(**d)",
        "lclass",
        "ptions:",
        "for the summaries endpoint\"",
        "Optional[str] = None",
        "Optional[str] = None",
        " Optional[str] = None",
        ": Optional[float] = None",
        "tional[float] = None",
        " Optional[float] = None",
        "ticmethod",
        "om_dict(d):",
        "n Options(**d)",
        "lclass",
        "aryResult:",
        " data for a list of tickers\"",
        "nal[float] = None",
        "nal[str] = None",
        "onal[str] = None",
        "nal[Branding] = None",
        "Optional[str] = None",
        "ptional[int] = None",
        "nal[str] = None",
        "nal[Session] = None",
        "nal[Options] = None",
        "onal[str] = None",
        "ional[str] = None",
        "ticmethod",
        "om_dict(d):",
        " SummaryResult(",
        ".get(\"price\", None),",
        ".get(\"name\", None),",
        ".get(\"ticker\", None),",
        "in d else Branding.from_dict(d[\"branding\"]),",
        ".get(\"market_status\", None),",
        ".get(\"last_updated\", None),",
        ".get(\"type\", None),",
        "in d else Session.from_dict(d[\"session\"]),",
        "in d else Options.from_dict(d[\"options\"]),",
        ".get(\"error\", None),",
        ".get(\"message\", None),",
        "    )",
        "rt Optional, List",
        " import modelclass",
        "lclass",
        "anyAddress:",
        "ta for a ticker detail.\"",
        "ional[str] = None",
        "ional[str] = None",
        "nal[str] = None",
        "onal[str] = None",
        "ional[str] = None",
        "ptional[str] = None",
        "ticmethod",
        "om_dict(d):",
        "mpanyAddress(**d)",
        "lclass",
        "randing:",
        "ata for a ticker detail.\"",
        "ional[str] = None",
        "ional[str] = None",
        "ptional[str] = None",
        "ptional[str] = None",
        "tional[str] = None",
        "ticmethod",
        "om_dict(d):",
        " Branding(**d)",
        "lclass",
        "nsight:",
        "s related to the article.\"",
        "tional[str] = None",
        "g: Optional[str] = None",
        "onal[str] = None",
        "ticmethod",
        "om_dict(d):",
        "n Insight(**d)",
        "lclass",
        "blisher:",
        " data for ticker news.\"",
        "ptional[str] = None",
        "ptional[str] = None",
        "ional[str] = None",
        "nal[str] = None",
        "ticmethod",
        "om_dict(d):",
        " Publisher(**d)",
        "lclass",
        "Ticker:",
        "r a specified ticker symbol.\"",
        "onal[bool] = None",
        "nal[str] = None",
        "Optional[str] = None",
        "Optional[str] = None",
        " Optional[str] = None",
        "l: Optional[str] = None",
        ": Optional[str] = None",
        "ptional[str] = None",
        " Optional[str] = None",
        "onal[str] = None",
        "onal[str] = None",
        "nal[str] = None",
        " Optional[str] = None",
        " Optional[str] = None",
        "onal[str] = None",
        "nal[str] = None",
        "ptional[str] = None",
        "ticmethod",
        "om_dict(d):",
        "n Ticker(**d)",
        "lclass",
        "erDetails:",
        " for a specified ticker symbol.\"",
        "onal[bool] = None",
        "CompanyAddress] = None",
        "nal[Branding] = None",
        "nal[str] = None",
        "Optional[str] = None",
        "Optional[str] = None",
        " Optional[str] = None",
        ": Optional[str] = None",
        "l: Optional[str] = None",
        "ptional[str] = None",
        "ptional[str] = None",
        "ptional[str] = None",
        "Optional[str] = None",
        "ptional[str] = None",
        "tional[str] = None",
        "onal[str] = None",
        "onal[str] = None",
        "ional[float] = None",
        "nal[str] = None",
        "ptional[str] = None",
        " Optional[str] = None",
        " Optional[str] = None",
        "anding: Optional[int] = None",
        "ional[str] = None",
        " Optional[str] = None",
        "onal[str] = None",
        " Optional[int] = None",
        "nal[str] = None",
        "nding: Optional[int] = None",
        "ticmethod",
        "om_dict(d):",
        " TickerDetails(",
        ".get(\"active\", None),",
        "  address=(",
        "else CompanyAddress.from_dict(d[\"address\"])",
        "     ),",
        "in d else Branding.from_dict(d[\"branding\"]),",
        ".get(\"cik\", None),",
        ".get(\"composite_figi\", None),",
        ".get(\"currency_name\", None),",
        ".get(\"currency_symbol\", None),",
        ".get(\"base_currency_name\", None),",
        ".get(\"base_currency_symbol\", None),",
        ".get(\"delisted_utc\", None),",
        ".get(\"description\", None),",
        ".get(\"ticker_root\", None),",
        ".get(\"ticker_suffix\", None),",
        ".get(\"homepage_url\", None),",
        ".get(\"list_date\", None),",
        ".get(\"locale\", None),",
        ".get(\"market\", None),",
        ".get(\"market_cap\", None),",
        ".get(\"name\", None),",
        ".get(\"phone_number\", None),",
        ".get(\"primary_exchange\", None),",
        ".get(\"share_class_figi\", None),",
        "shares_outstanding=d.get(",
        "s_shares_outstanding\", None",
        "     ),",
        ".get(\"sic_code\", None),",
        ".get(\"sic_description\", None),",
        ".get(\"ticker\", None),",
        ".get(\"total_employees\", None),",
        ".get(\"type\", None),",
        ".get(\"weighted_shares_outstanding\", None),",
        "    )",
        "lclass",
        "ckerNews:",
        "rticles relating to a stock ticker symbol.\"",
        "ional[str] = None",
        "ptional[str] = None",
        "onal[str] = None",
        "ptional[str] = None",
        "al[str] = None",
        "tional[str] = None",
        "[List[Insight]] = None",
        "al[List[str]] = None",
        "Optional[str] = None",
        "nal[Publisher] = None",
        "al[List[str]] = None",
        "onal[str] = None",
        "ticmethod",
        "om_dict(d):",
        "n TickerNews(",
        ".get(\"amp_url\", None),",
        ".get(\"article_url\", None),",
        ".get(\"author\", None),",
        ".get(\"description\", None),",
        ".get(\"id\", None),",
        ".get(\"image_url\", None),",
        " insights=(",
        "nsight) for insight in d[\"insights\"]]",
        "f \"insights\" in d",
        "    else None",
        "     ),",
        ".get(\"keywords\", None),",
        ".get(\"published_utc\", None),",
        " publisher=(",
        " d else Publisher.from_dict(d[\"publisher\"])",
        "     ),",
        ".get(\"tickers\", None),",
        ".get(\"title\", None),",
        "    )",
        "lclass",
        "kerTypes:",
        "s data for ticker types.\"",
        "ptional[str] = None",
        "nal[str] = None",
        "ptional[str] = None",
        "onal[str] = None",
        "ticmethod",
        "om_dict(d):",
        "TickerTypes(**d)",
        "lclass",
        "tedCompany:",
        "  ",
        "onal[str] = None",
        "ticmethod",
        "om_dict(d):",
        "RelatedCompany(",
        ".get(\"ticker\", None),",
        "    )",
        "lclass",
        "kerChange:",
        "ker: str",
        "ticmethod",
        "om_dict(d):",
        "ickerChange(**d)",
        "lclass",
        "ChangeEvent:",
        "pe: str",
        "te: str",
        "ge: TickerChange",
        "ticmethod",
        "om_dict(d):",
        "kerChangeEvent(**d)",
        "lclass",
        "hangeResults:",
        "me: str",
        "te_figi: str",
        "k: str",
        "TickerChangeEvent]] = None",
        "ticmethod",
        "om_dict(d):",
        "erChangeResults(**d)",
        "mport Optional",
        " import modelclass",
        "lclass",
        "OListing:",
        "  ",
        "Optional[str] = None",
        "Optional[str] = None",
        " Optional[float] = None",
        ": Optional[float] = None",
        "tional[str] = None",
        "nal[str] = None",
        "ptional[str] = None",
        "ptional[str] = None",
        "ptional[str] = None",
        "ional[int] = None",
        " Optional[float] = None",
        ": Optional[int] = None",
        ": Optional[int] = None",
        " Optional[str] = None",
        "n: Optional[str] = None",
        "Optional[str] = None",
        ": Optional[int] = None",
        "onal[str] = None",
        "Optional[float] = None",
        "ional[str] = None",
        "ticmethod",
        "om_dict(d):",
        "n IPOListing(",
        "e=d.get(\"announced_date\"),",
        "e=d.get(\"currency_code\"),",
        "e=d.get(\"final_issue_price\"),",
        "e=d.get(\"highest_offer_price\"),",
        "s=d.get(\"ipo_status\"),",
        "n=d.get(\"isin\"),",
        "e=d.get(\"issuer_name\"),",
        "d=d.get(\"last_updated\"),",
        "e=d.get(\"listing_date\"),",
        "e=d.get(\"lot_size\"),",
        "e=d.get(\"lowest_offer_price\"),",
        "d=d.get(\"max_shares_offered\"),",
        "d=d.get(\"min_shares_offered\"),",
        "e=d.get(\"primary_exchange\"),",
        "n=d.get(\"security_description\"),",
        "e=d.get(\"security_type\"),",
        "g=d.get(\"shares_outstanding\"),",
        "r=d.get(\"ticker\"),",
        "e=d.get(\"total_offer_size\"),",
        "e=d.get(\"us_code\"),",
        "    )",
        "rt Optional, List",
        " import modelclass",
        "lclass",
        "Trade:",
        "for a specified ticker symbol.\"",
        "nal[List[int]] = None",
        "tional[int] = None",
        "ional[int] = None",
        "al[str] = None",
        "mp: Optional[int] = None",
        "nal[float] = None",
        " Optional[int] = None",
        "Optional[int] = None",
        "al[float] = None",
        "nal[int] = None",
        "onal[int] = None",
        "Optional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "rn Trade(**d)",
        "lclass",
        "stTrade:",
        "nt trade for a given ticker symbol.\"",
        "onal[str] = None",
        "Optional[int] = None",
        "Optional[float] = None",
        "Optional[int] = None",
        "mp: Optional[int] = None",
        "nal[List[int]] = None",
        "tional[int] = None",
        "al[str] = None",
        "nal[float] = None",
        "onal[int] = None",
        "al[float] = None",
        "ional[int] = None",
        "nal[int] = None",
        "ticmethod",
        "om_dict(d):",
        "rn LastTrade(",
        "get(\"T\", None),",
        "get(\"f\", None),",
        "get(\"q\", None),",
        "get(\"t\", None),",
        "get(\"y\", None),",
        "get(\"c\", None),",
        "get(\"e\", None),",
        "get(\"i\", None),",
        "get(\"p\", None),",
        "get(\"r\", None),",
        "get(\"s\", None),",
        "get(\"x\", None),",
        "get(\"z\", None),",
        "    )",
        "lclass",
        "ptoTrade:",
        "for a crypto trade.\"",
        "nal[List[int]] = None",
        "ional[int] = None",
        "nal[float] = None",
        "al[float] = None",
        "tional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "CryptoTrade(**d)",
        "s import *",
        "on import *",
        "ions import *",
        "cts import *",
        "nds import *",
        "ges import *",
        "ials import *",
        "tors import *",
        "ts import *",
        "es import *",
        "hot import *",
        "ts import *",
        "rs import *",
        "es import *",
        "ies import *",
        "rt os",
        "import Enum",
        " List, Set, Callable, Awaitable, Any",
        "logging",
        "t json",
        "asyncio",
        "t ssl",
        "certifi",
        "ls import *",
        "onnect, WebSocketClientProtocol",
        "nectionClosedOK, ConnectionClosedError",
        "mport get_logger",
        "logging",
        " import AuthError",
        "LYGON_API_KEY\"",
        "(\"WebSocketClient\")",
        "cketClient:",
        "__init__(",
        "  self,",
        "str] = os.getenv(env_key),",
        ", Feed] = Feed.RealTime,",
        ", Market] = Market.Stocks,",
        "bool = False,",
        ": bool = False,",
        "tional[List[str]] = None,",
        "s: Optional[int] = 5,",
        ": bool = True,",
        "Optional[Any] = None,",
        "**kwargs,",
        " ):",
        "    ",
        "i_key is None:",
        "ise AuthError(",
        "env_key} or pass api_key in constructor\"",
        "      )",
        "i_key = api_key",
        ".feed = feed",
        "arket = market",
        "f.raw = raw",
        "f verbose:",
        "tLevel(logging.DEBUG)",
        "ocket_cfg = kwargs",
        "ance(feed, Enum):",
        "ed = feed.value",
        "nce(market, Enum):",
        "et = market.value",
        "ecure else ''}://{feed}/{market}\"",
        "bscribed = False",
        ": Set[str] = set()",
        "nects = max_reconnects",
        "[WebSocketClientProtocol] = None",
        "riptions is None:",
        "scriptions = []",
        "Set[str] = set(subscriptions)",
        "dule_resub = True",
        "custom_json:",
        "json = custom_json",
        "  else:",
        "lf.json = json",
        "  ",
        "ef connect(",
        "  self,",
        "essor: Union[",
        "bSocketMessage]], Awaitable],",
        "n[str, bytes]], Awaitable],",
        "   ],",
        "imeout: int = 1,",
        "**kwargs,",
        " ):",
        "    ",
        "onnects = 0",
        "connect: %s\", self.url)",
        "    ",
        "ontext = None",
        "startswith(\"wss://\"):",
        "LContext(ssl.PROTOCOL_TLS_CLIENT)",
        "rify_locations(certifi.where())",
        "or s in connect(",
        "ose_timeout, ssl=ssl_context, **kwargs",
        "   ):",
        "f.websocket = s",
        "    try:",
        "g = await s.recv()",
        "bug(\"connected: %s\", msg)",
        "r.debug(\"authing...\")",
        "  await s.send(",
        "ction\": \"auth\", \"params\": self.api_key})",
        "        )",
        "_msg = await s.recv()",
        "ed = self.json.loads(auth_msg)",
        "ug(\"authed: %s\", auth_msg)",
        "ed[0][\"status\"] == \"auth_failed\":",
        "or(auth_msg_parsed[0][\"message\"])",
        "   while True:",
        "f self.schedule_resub:",
        "      logger.debug(",
        ": %s %s\", self.subs, self.scheduled_subs",
        "            )",
        "f.scheduled_subs.difference(self.subs)",
        "it self._subscribe(new_subs)",
        "f.subs.difference(self.scheduled_subs)",
        "t self._unsubscribe(old_subs)",
        "f.subs = self.scheduled_subs",
        "ubs = set(self.scheduled_subs)",
        "elf.schedule_resub = False",
        "        try:",
        "WebSocketMessage], Union[str, bytes]] = (",
        "syncio.wait_for(s.recv(), timeout=1)",
        "            )",
        "pt asyncio.TimeoutError:",
        "        continue",
        "  if not self.raw:",
        "            ",
        "son = self.json.loads(cmsg)  ",
        "    for m in msgJson:",
        "   if m[\"ev\"] == \"status\":",
        "er.debug(\"status: %s\", m[\"message\"])",
        "            continue",
        "sg = parse(msgJson, logger)",
        "  if len(cmsg) > 0:",
        " await processor(cmsg)  ",
        "nnectionClosedOK as e:",
        "connection closed (OK): %s\", e)",
        "     return",
        "ectionClosedError as e:",
        "onnection closed (ERR): %s\", e)",
        " reconnects += 1",
        "uled_subs = set(self.subs)",
        "self.subs = set()",
        "schedule_resub = True",
        "t None and reconnects > self.max_reconnects:",
        "       return",
        "    continue",
        "f run(",
        "  self,",
        "e_msg: Union[",
        "[WebSocketMessage]], None],",
        "ion[str, bytes]], None],",
        "   ],",
        "imeout: int = 1,",
        "**kwargs,",
        " ):",
        "    ",
        "dle_msg_wrapper(msgs):",
        "ndle_msg(msgs)",
        "_msg_wrapper, close_timeout, **kwargs))",
        "pics: Union[List[str], Set[str]]):",
        "s None or len(topics) == 0:",
        "   return",
        "\",\".join(topics)",
        "(\"subbing: %s\", subs)",
        "f.websocket.send(",
        "on\": \"subscribe\", \"params\": subs})",
        "    )",
        "opics: Union[List[str], Set[str]]):",
        "s None or len(topics) == 0:",
        "   return",
        "\",\".join(topics)",
        "\"unsubbing: %s\", subs)",
        "f.websocket.send(",
        "n\": \"unsubscribe\", \"params\": subs})",
        "    )",
        "ticmethod",
        "scription(s: str):",
        "= s.strip()",
        "s.split(\".\", 1)  ",
        "n(split) != 2:",
        "\"invalid subscription:\", s)",
        "urn [None, None]",
        "turn split",
        ", *subscriptions: str):",
        "    ",
        "n subscriptions:",
        "elf._parse_subscription(s)",
        " topic == None:",
        "    continue",
        "g(\"sub desired: %s\", s)",
        "heduled_subs.add(s)",
        "      ",
        "f sym == \"*\":",
        "t in list(self.subs):",
        "f t.startswith(topic):",
        "f.scheduled_subs.discard(t)",
        "dule_resub = True",
        "f, *subscriptions: str):",
        "    ",
        "n subscriptions:",
        "elf._parse_subscription(s)",
        " topic == None:",
        "    continue",
        "(\"sub undesired: %s\", s)",
        "duled_subs.discard(s)",
        "      ",
        "f sym == \"*\":",
        "t in list(self.subs):",
        "f t.startswith(topic):",
        "f.scheduled_subs.discard(t)",
        "dule_resub = True",
        "ribe_all(self):",
        "    ",
        "duled_subs = set()",
        "dule_resub = True",
        " close(self):",
        "    ",
        "debug(\"closing\")",
        "lf.websocket:",
        "lf.websocket.close()",
        ".websocket = None",
        "  else:",
        "no websocket open to close\")",
        "import Enum",
        "ed(Enum):",
        "layed.polygon.io\"",
        "ocket.polygon.io\"",
        "aqfeed.polygon.io\"",
        "lyfeed.polygon.io\"",
        "lyfeedplus.polygon.io\"",
        "arterfeed.polygon.io\"",
        "unchpad.polygon.io\"",
        "siness.polygon.io\"",
        "gx-business.polygon.io\"",
        "layed-business.polygon.io\"",
        "ayed-edgx-business.polygon.io\"",
        "yed-nasdaq-last-sale-business.polygon.io\"",
        "-nasdaq-basic-business.polygon.io\"",
        "ayed-fullmarket-business.polygon.io\"",
        "llmarket-business.polygon.io\"",
        "daq-last-sale-business.polygon.io\"",
        "daq-basic-business.polygon.io\"",
        "ket(Enum):",
        " = \"stocks\"",
        " = \"options\"",
        " = \"forex\"",
        " = \"crypto\"",
        " = \"indices\"",
        "Type(Enum):",
        "yAgg = \"A\"",
        "ggMin = \"AM\"",
        "Agg = \"XA\"",
        "gSec = \"XAS\"",
        "Agg = \"CA\"",
        "gSec = \"CAS\"",
        "Trade = \"T\"",
        "rade = \"XT\"",
        "Quote = \"Q\"",
        "uote = \"C\"",
        "uote = \"XQ\"",
        "ces = \"NOI\"",
        "itDown = \"LULD\"",
        "L2 = \"XL2\"",
        "ue = \"V\"",
        "  ",
        "dValue = \"LV\"",
        "AggMin = \"AM\"",
        "  ",
        "arketValue = \"FMV\"",
        "nal, List, Union, NewType",
        "mport EventType",
        " import modelclass",
        "lclass",
        "uityAgg:",
        "  ",
        "ion[str, EventType]] = None",
        "onal[str] = None",
        "nal[float] = None",
        " Optional[float] = None",
        ": Optional[float] = None",
        "al[float] = None",
        "al[float] = None",
        "nal[float] = None",
        "al[float] = None",
        "al[float] = None",
        "ptional[float] = None",
        "tional[float] = None",
        " Optional[int] = None",
        "Optional[int] = None",
        "al[bool] = None",
        "ticmethod",
        "om_dict(d):",
        "rn EquityAgg(",
        "et(\"ev\", None),",
        "et(\"sym\", None),",
        "get(\"v\", None),",
        "et(\"av\", None),",
        "et(\"op\", None),",
        "et(\"vw\", None),",
        "get(\"o\", None),",
        "get(\"c\", None),",
        "get(\"h\", None),",
        "get(\"l\", None),",
        "get(\"a\", None),",
        "get(\"z\", None),",
        "get(\"s\", None),",
        "get(\"e\", None),",
        "et(\"otc\", None),",
        "    )",
        "lclass",
        "rencyAgg:",
        "either forex currency pairs or crypto pairs.\"",
        "ion[str, EventType]] = None",
        "nal[str] = None",
        "al[float] = None",
        "nal[float] = None",
        "al[float] = None",
        "al[float] = None",
        "nal[float] = None",
        "al[float] = None",
        " Optional[int] = None",
        "Optional[int] = None",
        "ptional[float] = None",
        "ticmethod",
        "om_dict(d):",
        "n CurrencyAgg(",
        "et(\"ev\", None),",
        "t(\"pair\", None),",
        "get(\"o\", None),",
        "get(\"c\", None),",
        "get(\"h\", None),",
        "get(\"l\", None),",
        "get(\"v\", None),",
        "et(\"vw\", None),",
        "get(\"s\", None),",
        "get(\"e\", None),",
        "get(\"z\", None),",
        "    )",
        "lclass",
        "ityTrade:",
        "either stock tickers or option contracts.\"",
        "ion[str, EventType]] = None",
        "onal[str] = None",
        "ional[int] = None",
        "al[str] = None",
        "nal[int] = None",
        "nal[float] = None",
        "nal[int] = None",
        "nal[List[int]] = None",
        "tional[int] = None",
        " Optional[int] = None",
        "onal[int] = None",
        "Optional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "n EquityTrade(",
        "et(\"ev\", None),",
        "et(\"sym\", None),",
        "get(\"x\", None),",
        "get(\"i\", None),",
        "get(\"z\", None),",
        "get(\"p\", None),",
        "get(\"s\", None),",
        "get(\"c\", None),",
        "get(\"t\", None),",
        "get(\"q\", None),",
        "t(\"trfi\", None),",
        "t(\"trft\", None),",
        "    )",
        "lclass",
        "ptoTrade:",
        "ade data for a crypto pair.\"",
        "ion[str, EventType]] = None",
        "nal[str] = None",
        "ional[int] = None",
        "al[str] = None",
        "nal[float] = None",
        "al[float] = None",
        "nal[List[int]] = None",
        "tional[int] = None",
        ": Optional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "n CryptoTrade(",
        "et(\"ev\", None),",
        "t(\"pair\", None),",
        "get(\"x\", None),",
        "get(\"i\", None),",
        "get(\"p\", None),",
        "get(\"s\", None),",
        "get(\"c\", None),",
        "get(\"t\", None),",
        "get(\"r\", None),",
        "    )",
        "lclass",
        "ityQuote:",
        "either stock tickers or option contracts.\"",
        "ion[str, EventType]] = None",
        "onal[str] = None",
        " Optional[int] = None",
        "ional[float] = None",
        "ional[int] = None",
        " Optional[int] = None",
        "ional[float] = None",
        "ional[int] = None",
        "tional[int] = None",
        "nal[List[int]] = None",
        "tional[int] = None",
        "nal[int] = None",
        " Optional[int] = None",
        "onal[int] = None",
        "Optional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "n EquityQuote(",
        "et(\"ev\", None),",
        "et(\"sym\", None),",
        "et(\"bx\", None),",
        "et(\"bp\", None),",
        "et(\"bs\", None),",
        "et(\"ax\", None),",
        "et(\"ap\", None),",
        "et(\"as\", None),",
        "get(\"c\", None),",
        "get(\"i\", None),",
        "get(\"t\", None),",
        "get(\"z\", None),",
        "get(\"q\", None),",
        "t(\"trfi\", None),",
        "t(\"trft\", None),",
        "    )",
        "lclass",
        "rexQuote:",
        "data for a forex currency pair.\"",
        "ion[str, EventType]] = None",
        "nal[str] = None",
        "ptional[int] = None",
        "ional[float] = None",
        "ional[float] = None",
        "tional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "n ForexQuote(",
        "et(\"ev\", None),",
        "get(\"p\", None),",
        "get(\"x\", None),",
        "get(\"a\", None),",
        "get(\"b\", None),",
        "get(\"t\", None),",
        "    )",
        "lclass",
        "ptoQuote:",
        "ote data for a crypto pair.\"",
        "ion[str, EventType]] = None",
        "nal[str] = None",
        "tional[int] = None",
        "onal[float] = None",
        "tional[int] = None",
        "ional[int] = None",
        "ional[float] = None",
        "ptional[int] = None",
        ": Optional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "n CryptoQuote(",
        "et(\"ev\", None),",
        "t(\"pair\", None),",
        "et(\"bp\", None),",
        "et(\"bs\", None),",
        "et(\"ap\", None),",
        "et(\"as\", None),",
        "get(\"t\", None),",
        "get(\"x\", None),",
        "get(\"r\", None),",
        "    )",
        "lclass",
        "balance:",
        " data for a given stock ticker symbol.\"",
        "ion[str, EventType]] = None",
        "onal[str] = None",
        "tional[int] = None",
        "ptional[int] = None",
        "ptional[str] = None",
        " Optional[int] = None",
        "ptional[int] = None",
        ": Optional[int] = None",
        " Optional[int] = None",
        ": Optional[float] = None",
        "ticmethod",
        "om_dict(d):",
        "rn Imbalance(",
        "et(\"ev\", None),",
        "get(\"T\", None),",
        "get(\"t\", None),",
        "et(\"at\", None),",
        "get(\"a\", None),",
        "get(\"i\", None),",
        "get(\"x\", None),",
        "get(\"o\", None),",
        "get(\"p\", None),",
        "get(\"b\", None),",
        "    )",
        "lclass",
        "UpLimitDown:",
        "t data for a given stock ticker symbol.\"",
        "ion[str, EventType]] = None",
        "onal[str] = None",
        "ional[float] = None",
        "ional[float] = None",
        "nal[List[int]] = None",
        "nal[int] = None",
        "tional[int] = None",
        " Optional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "imitUpLimitDown(",
        "et(\"ev\", None),",
        "get(\"T\", None),",
        "get(\"h\", None),",
        "get(\"l\", None),",
        "get(\"i\", None),",
        "get(\"z\", None),",
        "get(\"t\", None),",
        "get(\"q\", None),",
        "    )",
        "lclass",
        "vel2Book:",
        "ook data for a given crypto pair.\"",
        "ion[str, EventType]] = None",
        "nal[str] = None",
        "ional[float] = None",
        "ional[float] = None",
        "tional[int] = None",
        "ptional[int] = None",
        ": Optional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "n Level2Book(",
        "et(\"ev\", None),",
        "t(\"pair\", None),",
        "get(\"b\", None),",
        "get(\"a\", None),",
        "get(\"t\", None),",
        "get(\"x\", None),",
        "get(\"r\", None),",
        "    )",
        "lclass",
        "dexValue:",
        "ion[str, EventType]] = None",
        "nal[float] = None",
        "onal[str] = None",
        "tional[str] = None",
        "ticmethod",
        "om_dict(d):",
        "n IndexValue(",
        "et(\"ev\", None),",
        "et(\"val\", None),",
        "get(\"T\", None),",
        "get(\"t\", None),",
        "    )",
        "lclass",
        "chpadValue:",
        "ion[str, EventType]] = None",
        "nal[float] = None",
        "onal[str] = None",
        "tional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "LaunchpadValue(",
        "pe=d.get(\"ev\", None),",
        "d.get(\"val\", None),",
        "d.get(\"sym\", None),",
        "mp=d.get(\"t\", None),",
        "    )",
        "lclass",
        "arketValue:",
        "ion[str, EventType]] = None",
        "al[float] = None",
        "onal[str] = None",
        "tional[int] = None",
        "ticmethod",
        "om_dict(d):",
        "FairMarketValue(",
        "pe=d.get(\"ev\", None),",
        ".get(\"fmv\", None),",
        "d.get(\"sym\", None),",
        "mp=d.get(\"t\", None),",
        "    )",
        "age = NewType(",
        "ketMessage\",",
        "List[",
        " Union[",
        " EquityAgg,",
        "CurrencyAgg,",
        "EquityTrade,",
        "CryptoTrade,",
        "EquityQuote,",
        " ForexQuote,",
        "CryptoQuote,",
        " Imbalance,",
        "mitUpLimitDown,",
        " Level2Book,",
        " IndexValue,",
        "aunchpadValue,",
        "irMarketValue,",
        "    ]",
        " ],",
        ")",
        "t Dict, Any, List",
        "on import *",
        "ls import *",
        "logging",
        "ta: Dict[str, Any]):",
        "e = data[\"ev\"]",
        "gg.value, EventType.EquityAggMin.value]:",
        "yAgg.from_dict(data)",
        "nt_type in [",
        ".CryptoAgg.value,",
        "CryptoAggSec.value,",
        "e.ForexAgg.value,",
        "ForexAggSec.value,",
        " ]:",
        "cyAgg.from_dict(data)",
        "entType.EquityTrade.value:",
        "Trade.from_dict(data)",
        "entType.CryptoTrade.value:",
        "Trade.from_dict(data)",
        "entType.EquityQuote.value:",
        "Quote.from_dict(data)",
        "entType.ForexQuote.value:",
        "Quote.from_dict(data)",
        "entType.CryptoQuote.value:",
        "Quote.from_dict(data)",
        "entType.Imbalances.value:",
        "ance.from_dict(data)",
        "Type.LimitUpLimitDown.value:",
        "imitDown.from_dict(data)",
        "ventType.CryptoL2.value:",
        "2Book.from_dict(data)",
        " EventType.Value.value:",
        "Value.from_dict(data)",
        "tType.LaunchpadValue.value:",
        "adValue.from_dict(data)",
        "e.BusinessFairMarketValue.value:",
        "etValue.from_dict(data)",
        "urn None",
        ": logging.Logger) -> List[WebSocketMessage]:",
        "s = []",
        "m in msg:",
        " parse_single(m)",
        "rsed is None:",
        "\"ev\"] != \"status\":",
        "\"could not parse message %s\", m)",
        "  else:",
        ".append(parsed)",
        "urn res",
        "unittest",
        "asyncio",
        "port run_mock_server",
        " import List",
        "import WebSocketMessage",
        "X_LENGTH = 30000  ",
        "",
        "IsolatedAsyncioTestCase):",
        "ebSocketMessage] = []",
        "unt = 0",
        "cessor(self, msg):",
        ", self.expected[self.count])",
        "f.count += 1",
        "ponse(self, msg):",
        "ected.append(msg)",
        "syncSetUp(self):",
        "maxDiff = None",
        "cio.get_event_loop()",
        "eate_task(run_mock_server())",
        "ncTearDown(self):",
        "task.cancel()",
        " import serve  ",
        "asyncio",
        "t json",
        "= 8765",
        " set()",
        "erver(websocket):",
        "bsocket.send(",
        "ted\",\"message\":\"Connected Successfully\"}]'",
        "  )",
        "sage in websocket:",
        "json.loads(message)",
        "n\" not in message:",
        "  continue",
        "\"action\"] == \"auth\":",
        "t websocket.send(",
        "\"auth_success\",\"message\":\"authenticated\"}]'",
        "      )",
        "ction\"] == \"subscribe\":",
        "age[\"params\"].split(\",\"):",
        "   subs.add(p)",
        "ait websocket.send(",
        "     json.dumps(",
        "            [",
        "              {",
        "         \"ev\": \"status\",",
        "      \"status\": \"success\",",
        "\"message\": f\"subscribed to: {p}\",",
        "              }",
        "            ]",
        "          )",
        "        )",
        "ait websocket.send(",
        "     json.dumps(",
        "            [",
        "              {",
        "           \"ev\": \"T\",",
        "         \"sym\": \"AAPL\",",
        "          \"i\": \"5096\",",
        "            \"x\": 10,",
        "          \"p\": 161.87,",
        "            \"s\": 300,",
        "         \"c\": [14, 41],",
        "       \"t\": 1651684192462,",
        "          \"q\": 4009402,",
        "             \"z\": 3,",
        "              }",
        "            ]",
        "          )",
        "        )",
        "ait websocket.send(",
        "     json.dumps(",
        "            [",
        "              {",
        "           \"ev\": \"T\",",
        "         \"sym\": \"AMZN\",",
        "          \"i\": \"72815\",",
        "            \"x\": 12,",
        "          \"p\": 161.87,",
        "             \"s\": 1,",
        "       \"c\": [14, 37, 41],",
        "       \"t\": 1651684192536,",
        "          \"q\": 4009408,",
        "             \"z\": 3,",
        "             },",
        "              {",
        "           \"ev\": \"T\",",
        "         \"sym\": \"AMZN\",",
        "           \"i\": \"799\",",
        "             \"x\": 4,",
        "          \"p\": 161.87,",
        "            \"s\": 100,",
        "       \"t\": 1651684192717,",
        "          \"q\": 4009434,",
        "             \"z\": 3,",
        "             },",
        "            ]",
        "          )",
        "        )",
        "tion\"] == \"unsubscribe\":",
        "age[\"params\"].split(\",\"):",
        " subs.discard(p)",
        "ait websocket.send(",
        "     json.dumps(",
        "            [",
        "              {",
        "         \"ev\": \"status\",",
        "      \"status\": \"success\",",
        "message\": f\"unsubscribed to: {p}\",",
        "              }",
        "            ]",
        "          )",
        "        )",
        "mock_server():",
        "server, \"localhost\", port):",
        "yncio.Future()  ",
        "= \"__main__\":",
        "un_mock_server())",
        "rt WebSocketClient",
        "mport BaseTest",
        "import subs, port",
        "asyncio",
        "et import EquityTrade",
        "sTest(BaseTest):",
        "est_conn(self):",
        "bSocketClient(",
        "st:{port}\", verbose=True, secure=False",
        "    )",
        "xpectResponse(",
        "      [",
        "  EquityTrade(",
        "   event_type=\"T\",",
        "   symbol=\"AAPL\",",
        "    exchange=10,",
        "     id=\"5096\",",
        "       tape=3,",
        "    price=161.87,",
        "      size=300,",
        "conditions=[14, 41],",
        "mestamp=1651684192462,",
        "quence_number=4009402,",
        "        )",
        "      ]",
        "    )",
        "cribe(\"T.AAPL\")",
        "binded(msg):",
        "xpectProcessor(msg)",
        ").create_task(c.connect(binded))",
        "xpectResponse(",
        "      [",
        "  EquityTrade(",
        "   event_type=\"T\",",
        "   symbol=\"AMZN\",",
        "    exchange=12,",
        "     id=\"72815\",",
        "       tape=3,",
        "    price=161.87,",
        "       size=1,",
        "nditions=[14, 37, 41],",
        "mestamp=1651684192536,",
        "quence_number=4009408,",
        "       ),",
        "  EquityTrade(",
        "   event_type=\"T\",",
        "   symbol=\"AMZN\",",
        "     exchange=4,",
        "      id=\"799\",",
        "       tape=3,",
        "    price=161.87,",
        "      size=100,",
        "  conditions=None,",
        "mestamp=1651684192717,",
        "quence_number=4009434,",
        "       ),",
        "      ]",
        "    )",
        "cribe(\"T.AMZN\")",
        "Equal(subs, c.subs)",
        "ubscribe_all()",
        "tEqual(subs, set())",
        "scribe(\"T.*\")",
        "Equal(subs, c.subs)",
        "bscribe(\"T.*\")",
        "tEqual(subs, set())",
        "it c.close()"
    ]
}